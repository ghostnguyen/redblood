#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.3082
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Data.Linq;
using System.Data.Linq.Mapping;
using System.Linq;
using System.Linq.Expressions;
using System.Reflection;



[System.Data.Linq.Mapping.DatabaseAttribute(Name="RedBlood_DB")]
public partial class RedBloodDataContext : System.Data.Linq.DataContext
{
	
	private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
	
  #region Extensibility Method Definitions
  partial void OnCreated();
  partial void Insertaspnet_UserProfile(aspnet_UserProfile instance);
  partial void Updateaspnet_UserProfile(aspnet_UserProfile instance);
  partial void Deleteaspnet_UserProfile(aspnet_UserProfile instance);
  partial void Insertaspnet_User(aspnet_User instance);
  partial void Updateaspnet_User(aspnet_User instance);
  partial void Deleteaspnet_User(aspnet_User instance);
  partial void Insertaspnet_Membership(aspnet_Membership instance);
  partial void Updateaspnet_Membership(aspnet_Membership instance);
  partial void Deleteaspnet_Membership(aspnet_Membership instance);
  partial void InsertCompanyContactPerson(CompanyContactPerson instance);
  partial void UpdateCompanyContactPerson(CompanyContactPerson instance);
  partial void DeleteCompanyContactPerson(CompanyContactPerson instance);
  partial void InsertSex(Sex instance);
  partial void UpdateSex(Sex instance);
  partial void DeleteSex(Sex instance);
  partial void InsertGeo(Geo instance);
  partial void UpdateGeo(Geo instance);
  partial void DeleteGeo(Geo instance);
  partial void InsertHospital(Hospital instance);
  partial void UpdateHospital(Hospital instance);
  partial void DeleteHospital(Hospital instance);
  partial void InsertTestDef(TestDef instance);
  partial void UpdateTestDef(TestDef instance);
  partial void DeleteTestDef(TestDef instance);
  partial void InsertPeople(People instance);
  partial void UpdatePeople(People instance);
  partial void DeletePeople(People instance);
  partial void InsertOrg(Org instance);
  partial void UpdateOrg(Org instance);
  partial void DeleteOrg(Org instance);
  partial void InsertCampaign(Campaign instance);
  partial void UpdateCampaign(Campaign instance);
  partial void DeleteCampaign(Campaign instance);
  partial void InsertCampaignStatusHistory(CampaignStatusHistory instance);
  partial void UpdateCampaignStatusHistory(CampaignStatusHistory instance);
  partial void DeleteCampaignStatusHistory(CampaignStatusHistory instance);
  partial void InsertExcel(Excel instance);
  partial void UpdateExcel(Excel instance);
  partial void DeleteExcel(Excel instance);
  partial void InsertSideEffect(SideEffect instance);
  partial void UpdateSideEffect(SideEffect instance);
  partial void DeleteSideEffect(SideEffect instance);
  partial void InsertPackSideEffect(PackSideEffect instance);
  partial void UpdatePackSideEffect(PackSideEffect instance);
  partial void DeletePackSideEffect(PackSideEffect instance);
  partial void InsertDepartment(Department instance);
  partial void UpdateDepartment(Department instance);
  partial void DeleteDepartment(Department instance);
  partial void InsertFacility(Facility instance);
  partial void UpdateFacility(Facility instance);
  partial void DeleteFacility(Facility instance);
  partial void InsertST_General(ST_General instance);
  partial void UpdateST_General(ST_General instance);
  partial void DeleteST_General(ST_General instance);
  partial void InsertDonationStatusLog(DonationStatusLog instance);
  partial void UpdateDonationStatusLog(DonationStatusLog instance);
  partial void DeleteDonationStatusLog(DonationStatusLog instance);
  partial void InsertPack(Pack instance);
  partial void UpdatePack(Pack instance);
  partial void DeletePack(Pack instance);
  partial void InsertDonation(Donation instance);
  partial void UpdateDonation(Donation instance);
  partial void DeleteDonation(Donation instance);
  partial void InsertDonationTestLog(DonationTestLog instance);
  partial void UpdateDonationTestLog(DonationTestLog instance);
  partial void DeleteDonationTestLog(DonationTestLog instance);
  partial void InsertOrder(Order instance);
  partial void UpdateOrder(Order instance);
  partial void DeleteOrder(Order instance);
  partial void InsertPackOrder(PackOrder instance);
  partial void UpdatePackOrder(PackOrder instance);
  partial void DeletePackOrder(PackOrder instance);
  partial void InsertStoreFinalize(StoreFinalize instance);
  partial void UpdateStoreFinalize(StoreFinalize instance);
  partial void DeleteStoreFinalize(StoreFinalize instance);
  partial void InsertPackRemainDaily(PackRemainDaily instance);
  partial void UpdatePackRemainDaily(PackRemainDaily instance);
  partial void DeletePackRemainDaily(PackRemainDaily instance);
  partial void InsertPrintSetting(PrintSetting instance);
  partial void UpdatePrintSetting(PrintSetting instance);
  partial void DeletePrintSetting(PrintSetting instance);
  partial void InsertProduct(Product instance);
  partial void UpdateProduct(Product instance);
  partial void DeleteProduct(Product instance);
  partial void InsertReceipt(Receipt instance);
  partial void UpdateReceipt(Receipt instance);
  partial void DeleteReceipt(Receipt instance);
  partial void InsertReceiptProduct(ReceiptProduct instance);
  partial void UpdateReceiptProduct(ReceiptProduct instance);
  partial void DeleteReceiptProduct(ReceiptProduct instance);
  partial void InsertLog(Log instance);
  partial void UpdateLog(Log instance);
  partial void DeleteLog(Log instance);
  partial void InsertReturn(Return instance);
  partial void UpdateReturn(Return instance);
  partial void DeleteReturn(Return instance);
  partial void InsertReturnPackOrder(ReturnPackOrder instance);
  partial void UpdateReturnPackOrder(ReturnPackOrder instance);
  partial void DeleteReturnPackOrder(ReturnPackOrder instance);
  partial void InsertPackTransaction(PackTransaction instance);
  partial void UpdatePackTransaction(PackTransaction instance);
  partial void DeletePackTransaction(PackTransaction instance);
  #endregion
	
	public RedBloodDataContext() : 
			base(global::System.Configuration.ConfigurationManager.ConnectionStrings["RedBlood_DBConnectionString"].ConnectionString, mappingSource)
	{
		OnCreated();
	}
	
	public RedBloodDataContext(string connection) : 
			base(connection, mappingSource)
	{
		OnCreated();
	}
	
	public RedBloodDataContext(System.Data.IDbConnection connection) : 
			base(connection, mappingSource)
	{
		OnCreated();
	}
	
	public RedBloodDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
			base(connection, mappingSource)
	{
		OnCreated();
	}
	
	public RedBloodDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
			base(connection, mappingSource)
	{
		OnCreated();
	}
	
	public System.Data.Linq.Table<aspnet_UserProfile> aspnet_UserProfiles
	{
		get
		{
			return this.GetTable<aspnet_UserProfile>();
		}
	}
	
	public System.Data.Linq.Table<aspnet_User> aspnet_Users
	{
		get
		{
			return this.GetTable<aspnet_User>();
		}
	}
	
	public System.Data.Linq.Table<aspnet_Membership> aspnet_Memberships
	{
		get
		{
			return this.GetTable<aspnet_Membership>();
		}
	}
	
	public System.Data.Linq.Table<CompanyContactPerson> CompanyContactPersons
	{
		get
		{
			return this.GetTable<CompanyContactPerson>();
		}
	}
	
	public System.Data.Linq.Table<Sex> Sexes
	{
		get
		{
			return this.GetTable<Sex>();
		}
	}
	
	public System.Data.Linq.Table<Geo> Geos
	{
		get
		{
			return this.GetTable<Geo>();
		}
	}
	
	public System.Data.Linq.Table<Hospital> Hospitals
	{
		get
		{
			return this.GetTable<Hospital>();
		}
	}
	
	public System.Data.Linq.Table<TestDef> TestDefs
	{
		get
		{
			return this.GetTable<TestDef>();
		}
	}
	
	public System.Data.Linq.Table<People> Peoples
	{
		get
		{
			return this.GetTable<People>();
		}
	}
	
	public System.Data.Linq.Table<Org> Orgs
	{
		get
		{
			return this.GetTable<Org>();
		}
	}
	
	public System.Data.Linq.Table<Campaign> Campaigns
	{
		get
		{
			return this.GetTable<Campaign>();
		}
	}
	
	public System.Data.Linq.Table<CampaignStatusHistory> CampaignStatusHistories
	{
		get
		{
			return this.GetTable<CampaignStatusHistory>();
		}
	}
	
	public System.Data.Linq.Table<Excel> Excels
	{
		get
		{
			return this.GetTable<Excel>();
		}
	}
	
	public System.Data.Linq.Table<SideEffect> SideEffects
	{
		get
		{
			return this.GetTable<SideEffect>();
		}
	}
	
	public System.Data.Linq.Table<PackSideEffect> PackSideEffects
	{
		get
		{
			return this.GetTable<PackSideEffect>();
		}
	}
	
	public System.Data.Linq.Table<Department> Departments
	{
		get
		{
			return this.GetTable<Department>();
		}
	}
	
	public System.Data.Linq.Table<Facility> Facilities
	{
		get
		{
			return this.GetTable<Facility>();
		}
	}
	
	public System.Data.Linq.Table<ST_General> ST_Generals
	{
		get
		{
			return this.GetTable<ST_General>();
		}
	}
	
	public System.Data.Linq.Table<DonationStatusLog> DonationStatusLogs
	{
		get
		{
			return this.GetTable<DonationStatusLog>();
		}
	}
	
	public System.Data.Linq.Table<Pack> Packs
	{
		get
		{
			return this.GetTable<Pack>();
		}
	}
	
	public System.Data.Linq.Table<Donation> Donations
	{
		get
		{
			return this.GetTable<Donation>();
		}
	}
	
	public System.Data.Linq.Table<DonationTestLog> DonationTestLogs
	{
		get
		{
			return this.GetTable<DonationTestLog>();
		}
	}
	
	public System.Data.Linq.Table<Order> Orders
	{
		get
		{
			return this.GetTable<Order>();
		}
	}
	
	public System.Data.Linq.Table<PackOrder> PackOrders
	{
		get
		{
			return this.GetTable<PackOrder>();
		}
	}
	
	public System.Data.Linq.Table<StoreFinalize> StoreFinalizes
	{
		get
		{
			return this.GetTable<StoreFinalize>();
		}
	}
	
	public System.Data.Linq.Table<PackRemainDaily> PackRemainDailies
	{
		get
		{
			return this.GetTable<PackRemainDaily>();
		}
	}
	
	public System.Data.Linq.Table<PrintSetting> PrintSettings
	{
		get
		{
			return this.GetTable<PrintSetting>();
		}
	}
	
	public System.Data.Linq.Table<Product> Products
	{
		get
		{
			return this.GetTable<Product>();
		}
	}
	
	public System.Data.Linq.Table<Receipt> Receipts
	{
		get
		{
			return this.GetTable<Receipt>();
		}
	}
	
	public System.Data.Linq.Table<ReceiptProduct> ReceiptProducts
	{
		get
		{
			return this.GetTable<ReceiptProduct>();
		}
	}
	
	public System.Data.Linq.Table<Log> Logs
	{
		get
		{
			return this.GetTable<Log>();
		}
	}
	
	public System.Data.Linq.Table<vw_ProductCount> vw_ProductCounts
	{
		get
		{
			return this.GetTable<vw_ProductCount>();
		}
	}
	
	public System.Data.Linq.Table<vw_PackRemainDaily> vw_PackRemainDailies
	{
		get
		{
			return this.GetTable<vw_PackRemainDaily>();
		}
	}
	
	public System.Data.Linq.Table<vw_PackTran> vw_PackTrans
	{
		get
		{
			return this.GetTable<vw_PackTran>();
		}
	}
	
	public System.Data.Linq.Table<Return> Returns
	{
		get
		{
			return this.GetTable<Return>();
		}
	}
	
	public System.Data.Linq.Table<ReturnPackOrder> ReturnPackOrders
	{
		get
		{
			return this.GetTable<ReturnPackOrder>();
		}
	}
	
	public System.Data.Linq.Table<PackTransaction> PackTransactions
	{
		get
		{
			return this.GetTable<PackTransaction>();
		}
	}
}

[Table(Name="dbo.aspnet_UserProfiles")]
public partial class aspnet_UserProfile : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private System.Guid _UserID;
	
	private string _Fullname;
	
	private string _Phone;
	
	private EntityRef<aspnet_User> _aspnet_User;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUserIDChanging(System.Guid value);
    partial void OnUserIDChanged();
    partial void OnFullnameChanging(string value);
    partial void OnFullnameChanged();
    partial void OnPhoneChanging(string value);
    partial void OnPhoneChanged();
    #endregion
	
	public aspnet_UserProfile()
	{
		this._aspnet_User = default(EntityRef<aspnet_User>);
		OnCreated();
	}
	
	[Column(Storage="_UserID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
	public System.Guid UserID
	{
		get
		{
			return this._UserID;
		}
		set
		{
			if ((this._UserID != value))
			{
				if (this._aspnet_User.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnUserIDChanging(value);
				this.SendPropertyChanging();
				this._UserID = value;
				this.SendPropertyChanged("UserID");
				this.OnUserIDChanged();
			}
		}
	}
	
	[Column(Storage="_Fullname", DbType="NVarChar(MAX)")]
	public string Fullname
	{
		get
		{
			return this._Fullname;
		}
		set
		{
			if ((this._Fullname != value))
			{
				this.OnFullnameChanging(value);
				this.SendPropertyChanging();
				this._Fullname = value;
				this.SendPropertyChanged("Fullname");
				this.OnFullnameChanged();
			}
		}
	}
	
	[Column(Storage="_Phone", DbType="NVarChar(MAX)")]
	public string Phone
	{
		get
		{
			return this._Phone;
		}
		set
		{
			if ((this._Phone != value))
			{
				this.OnPhoneChanging(value);
				this.SendPropertyChanging();
				this._Phone = value;
				this.SendPropertyChanged("Phone");
				this.OnPhoneChanged();
			}
		}
	}
	
	[Association(Name="aspnet_User_aspnet_UserProfile", Storage="_aspnet_User", ThisKey="UserID", OtherKey="UserId", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
	public aspnet_User aspnet_User
	{
		get
		{
			return this._aspnet_User.Entity;
		}
		set
		{
			aspnet_User previousValue = this._aspnet_User.Entity;
			if (((previousValue != value) 
						|| (this._aspnet_User.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._aspnet_User.Entity = null;
					previousValue.aspnet_UserProfile = null;
				}
				this._aspnet_User.Entity = value;
				if ((value != null))
				{
					value.aspnet_UserProfile = this;
					this._UserID = value.UserId;
				}
				else
				{
					this._UserID = default(System.Guid);
				}
				this.SendPropertyChanged("aspnet_User");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}

[Table(Name="dbo.aspnet_Users")]
public partial class aspnet_User : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private System.Guid _ApplicationId;
	
	private System.Guid _UserId;
	
	private string _UserName;
	
	private string _LoweredUserName;
	
	private string _MobileAlias;
	
	private bool _IsAnonymous;
	
	private System.DateTime _LastActivityDate;
	
	private EntityRef<aspnet_UserProfile> _aspnet_UserProfile;
	
	private EntityRef<aspnet_Membership> _aspnet_Membership;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnApplicationIdChanging(System.Guid value);
    partial void OnApplicationIdChanged();
    partial void OnUserIdChanging(System.Guid value);
    partial void OnUserIdChanged();
    partial void OnUserNameChanging(string value);
    partial void OnUserNameChanged();
    partial void OnLoweredUserNameChanging(string value);
    partial void OnLoweredUserNameChanged();
    partial void OnMobileAliasChanging(string value);
    partial void OnMobileAliasChanged();
    partial void OnIsAnonymousChanging(bool value);
    partial void OnIsAnonymousChanged();
    partial void OnLastActivityDateChanging(System.DateTime value);
    partial void OnLastActivityDateChanged();
    #endregion
	
	public aspnet_User()
	{
		this._aspnet_UserProfile = default(EntityRef<aspnet_UserProfile>);
		this._aspnet_Membership = default(EntityRef<aspnet_Membership>);
		OnCreated();
	}
	
	[Column(Storage="_ApplicationId", DbType="UniqueIdentifier NOT NULL")]
	public System.Guid ApplicationId
	{
		get
		{
			return this._ApplicationId;
		}
		set
		{
			if ((this._ApplicationId != value))
			{
				this.OnApplicationIdChanging(value);
				this.SendPropertyChanging();
				this._ApplicationId = value;
				this.SendPropertyChanged("ApplicationId");
				this.OnApplicationIdChanged();
			}
		}
	}
	
	[Column(Storage="_UserId", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
	public System.Guid UserId
	{
		get
		{
			return this._UserId;
		}
		set
		{
			if ((this._UserId != value))
			{
				this.OnUserIdChanging(value);
				this.SendPropertyChanging();
				this._UserId = value;
				this.SendPropertyChanged("UserId");
				this.OnUserIdChanged();
			}
		}
	}
	
	[Column(Storage="_UserName", DbType="NVarChar(256) NOT NULL", CanBeNull=false)]
	public string UserName
	{
		get
		{
			return this._UserName;
		}
		set
		{
			if ((this._UserName != value))
			{
				this.OnUserNameChanging(value);
				this.SendPropertyChanging();
				this._UserName = value;
				this.SendPropertyChanged("UserName");
				this.OnUserNameChanged();
			}
		}
	}
	
	[Column(Storage="_LoweredUserName", DbType="NVarChar(256) NOT NULL", CanBeNull=false)]
	public string LoweredUserName
	{
		get
		{
			return this._LoweredUserName;
		}
		set
		{
			if ((this._LoweredUserName != value))
			{
				this.OnLoweredUserNameChanging(value);
				this.SendPropertyChanging();
				this._LoweredUserName = value;
				this.SendPropertyChanged("LoweredUserName");
				this.OnLoweredUserNameChanged();
			}
		}
	}
	
	[Column(Storage="_MobileAlias", DbType="NVarChar(16)")]
	public string MobileAlias
	{
		get
		{
			return this._MobileAlias;
		}
		set
		{
			if ((this._MobileAlias != value))
			{
				this.OnMobileAliasChanging(value);
				this.SendPropertyChanging();
				this._MobileAlias = value;
				this.SendPropertyChanged("MobileAlias");
				this.OnMobileAliasChanged();
			}
		}
	}
	
	[Column(Storage="_IsAnonymous", DbType="Bit NOT NULL")]
	public bool IsAnonymous
	{
		get
		{
			return this._IsAnonymous;
		}
		set
		{
			if ((this._IsAnonymous != value))
			{
				this.OnIsAnonymousChanging(value);
				this.SendPropertyChanging();
				this._IsAnonymous = value;
				this.SendPropertyChanged("IsAnonymous");
				this.OnIsAnonymousChanged();
			}
		}
	}
	
	[Column(Storage="_LastActivityDate", DbType="DateTime NOT NULL")]
	public System.DateTime LastActivityDate
	{
		get
		{
			return this._LastActivityDate;
		}
		set
		{
			if ((this._LastActivityDate != value))
			{
				this.OnLastActivityDateChanging(value);
				this.SendPropertyChanging();
				this._LastActivityDate = value;
				this.SendPropertyChanged("LastActivityDate");
				this.OnLastActivityDateChanged();
			}
		}
	}
	
	[Association(Name="aspnet_User_aspnet_UserProfile", Storage="_aspnet_UserProfile", ThisKey="UserId", OtherKey="UserID", IsUnique=true, IsForeignKey=false)]
	public aspnet_UserProfile aspnet_UserProfile
	{
		get
		{
			return this._aspnet_UserProfile.Entity;
		}
		set
		{
			aspnet_UserProfile previousValue = this._aspnet_UserProfile.Entity;
			if (((previousValue != value) 
						|| (this._aspnet_UserProfile.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._aspnet_UserProfile.Entity = null;
					previousValue.aspnet_User = null;
				}
				this._aspnet_UserProfile.Entity = value;
				if ((value != null))
				{
					value.aspnet_User = this;
				}
				this.SendPropertyChanged("aspnet_UserProfile");
			}
		}
	}
	
	[Association(Name="aspnet_User_aspnet_Membership", Storage="_aspnet_Membership", ThisKey="UserId", OtherKey="UserId", IsUnique=true, IsForeignKey=false)]
	public aspnet_Membership aspnet_Membership
	{
		get
		{
			return this._aspnet_Membership.Entity;
		}
		set
		{
			aspnet_Membership previousValue = this._aspnet_Membership.Entity;
			if (((previousValue != value) 
						|| (this._aspnet_Membership.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._aspnet_Membership.Entity = null;
					previousValue.aspnet_User = null;
				}
				this._aspnet_Membership.Entity = value;
				if ((value != null))
				{
					value.aspnet_User = this;
				}
				this.SendPropertyChanged("aspnet_Membership");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}

[Table(Name="dbo.aspnet_Membership")]
public partial class aspnet_Membership : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private System.Guid _ApplicationId;
	
	private System.Guid _UserId;
	
	private string _Password;
	
	private int _PasswordFormat;
	
	private string _PasswordSalt;
	
	private string _MobilePIN;
	
	private string _Email;
	
	private string _LoweredEmail;
	
	private string _PasswordQuestion;
	
	private string _PasswordAnswer;
	
	private bool _IsApproved;
	
	private bool _IsLockedOut;
	
	private System.DateTime _CreateDate;
	
	private System.DateTime _LastLoginDate;
	
	private System.DateTime _LastPasswordChangedDate;
	
	private System.DateTime _LastLockoutDate;
	
	private int _FailedPasswordAttemptCount;
	
	private System.DateTime _FailedPasswordAttemptWindowStart;
	
	private int _FailedPasswordAnswerAttemptCount;
	
	private System.DateTime _FailedPasswordAnswerAttemptWindowStart;
	
	private string _Comment;
	
	private EntityRef<aspnet_User> _aspnet_User;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnApplicationIdChanging(System.Guid value);
    partial void OnApplicationIdChanged();
    partial void OnUserIdChanging(System.Guid value);
    partial void OnUserIdChanged();
    partial void OnPasswordChanging(string value);
    partial void OnPasswordChanged();
    partial void OnPasswordFormatChanging(int value);
    partial void OnPasswordFormatChanged();
    partial void OnPasswordSaltChanging(string value);
    partial void OnPasswordSaltChanged();
    partial void OnMobilePINChanging(string value);
    partial void OnMobilePINChanged();
    partial void OnEmailChanging(string value);
    partial void OnEmailChanged();
    partial void OnLoweredEmailChanging(string value);
    partial void OnLoweredEmailChanged();
    partial void OnPasswordQuestionChanging(string value);
    partial void OnPasswordQuestionChanged();
    partial void OnPasswordAnswerChanging(string value);
    partial void OnPasswordAnswerChanged();
    partial void OnIsApprovedChanging(bool value);
    partial void OnIsApprovedChanged();
    partial void OnIsLockedOutChanging(bool value);
    partial void OnIsLockedOutChanged();
    partial void OnCreateDateChanging(System.DateTime value);
    partial void OnCreateDateChanged();
    partial void OnLastLoginDateChanging(System.DateTime value);
    partial void OnLastLoginDateChanged();
    partial void OnLastPasswordChangedDateChanging(System.DateTime value);
    partial void OnLastPasswordChangedDateChanged();
    partial void OnLastLockoutDateChanging(System.DateTime value);
    partial void OnLastLockoutDateChanged();
    partial void OnFailedPasswordAttemptCountChanging(int value);
    partial void OnFailedPasswordAttemptCountChanged();
    partial void OnFailedPasswordAttemptWindowStartChanging(System.DateTime value);
    partial void OnFailedPasswordAttemptWindowStartChanged();
    partial void OnFailedPasswordAnswerAttemptCountChanging(int value);
    partial void OnFailedPasswordAnswerAttemptCountChanged();
    partial void OnFailedPasswordAnswerAttemptWindowStartChanging(System.DateTime value);
    partial void OnFailedPasswordAnswerAttemptWindowStartChanged();
    partial void OnCommentChanging(string value);
    partial void OnCommentChanged();
    #endregion
	
	public aspnet_Membership()
	{
		this._aspnet_User = default(EntityRef<aspnet_User>);
		OnCreated();
	}
	
	[Column(Storage="_ApplicationId", DbType="UniqueIdentifier NOT NULL")]
	public System.Guid ApplicationId
	{
		get
		{
			return this._ApplicationId;
		}
		set
		{
			if ((this._ApplicationId != value))
			{
				this.OnApplicationIdChanging(value);
				this.SendPropertyChanging();
				this._ApplicationId = value;
				this.SendPropertyChanged("ApplicationId");
				this.OnApplicationIdChanged();
			}
		}
	}
	
	[Column(Storage="_UserId", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
	public System.Guid UserId
	{
		get
		{
			return this._UserId;
		}
		set
		{
			if ((this._UserId != value))
			{
				if (this._aspnet_User.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnUserIdChanging(value);
				this.SendPropertyChanging();
				this._UserId = value;
				this.SendPropertyChanged("UserId");
				this.OnUserIdChanged();
			}
		}
	}
	
	[Column(Storage="_Password", DbType="NVarChar(128) NOT NULL", CanBeNull=false)]
	public string Password
	{
		get
		{
			return this._Password;
		}
		set
		{
			if ((this._Password != value))
			{
				this.OnPasswordChanging(value);
				this.SendPropertyChanging();
				this._Password = value;
				this.SendPropertyChanged("Password");
				this.OnPasswordChanged();
			}
		}
	}
	
	[Column(Storage="_PasswordFormat", DbType="Int NOT NULL")]
	public int PasswordFormat
	{
		get
		{
			return this._PasswordFormat;
		}
		set
		{
			if ((this._PasswordFormat != value))
			{
				this.OnPasswordFormatChanging(value);
				this.SendPropertyChanging();
				this._PasswordFormat = value;
				this.SendPropertyChanged("PasswordFormat");
				this.OnPasswordFormatChanged();
			}
		}
	}
	
	[Column(Storage="_PasswordSalt", DbType="NVarChar(128) NOT NULL", CanBeNull=false)]
	public string PasswordSalt
	{
		get
		{
			return this._PasswordSalt;
		}
		set
		{
			if ((this._PasswordSalt != value))
			{
				this.OnPasswordSaltChanging(value);
				this.SendPropertyChanging();
				this._PasswordSalt = value;
				this.SendPropertyChanged("PasswordSalt");
				this.OnPasswordSaltChanged();
			}
		}
	}
	
	[Column(Storage="_MobilePIN", DbType="NVarChar(16)")]
	public string MobilePIN
	{
		get
		{
			return this._MobilePIN;
		}
		set
		{
			if ((this._MobilePIN != value))
			{
				this.OnMobilePINChanging(value);
				this.SendPropertyChanging();
				this._MobilePIN = value;
				this.SendPropertyChanged("MobilePIN");
				this.OnMobilePINChanged();
			}
		}
	}
	
	[Column(Storage="_Email", DbType="NVarChar(256)")]
	public string Email
	{
		get
		{
			return this._Email;
		}
		set
		{
			if ((this._Email != value))
			{
				this.OnEmailChanging(value);
				this.SendPropertyChanging();
				this._Email = value;
				this.SendPropertyChanged("Email");
				this.OnEmailChanged();
			}
		}
	}
	
	[Column(Storage="_LoweredEmail", DbType="NVarChar(256)")]
	public string LoweredEmail
	{
		get
		{
			return this._LoweredEmail;
		}
		set
		{
			if ((this._LoweredEmail != value))
			{
				this.OnLoweredEmailChanging(value);
				this.SendPropertyChanging();
				this._LoweredEmail = value;
				this.SendPropertyChanged("LoweredEmail");
				this.OnLoweredEmailChanged();
			}
		}
	}
	
	[Column(Storage="_PasswordQuestion", DbType="NVarChar(256)")]
	public string PasswordQuestion
	{
		get
		{
			return this._PasswordQuestion;
		}
		set
		{
			if ((this._PasswordQuestion != value))
			{
				this.OnPasswordQuestionChanging(value);
				this.SendPropertyChanging();
				this._PasswordQuestion = value;
				this.SendPropertyChanged("PasswordQuestion");
				this.OnPasswordQuestionChanged();
			}
		}
	}
	
	[Column(Storage="_PasswordAnswer", DbType="NVarChar(128)")]
	public string PasswordAnswer
	{
		get
		{
			return this._PasswordAnswer;
		}
		set
		{
			if ((this._PasswordAnswer != value))
			{
				this.OnPasswordAnswerChanging(value);
				this.SendPropertyChanging();
				this._PasswordAnswer = value;
				this.SendPropertyChanged("PasswordAnswer");
				this.OnPasswordAnswerChanged();
			}
		}
	}
	
	[Column(Storage="_IsApproved", DbType="Bit NOT NULL")]
	public bool IsApproved
	{
		get
		{
			return this._IsApproved;
		}
		set
		{
			if ((this._IsApproved != value))
			{
				this.OnIsApprovedChanging(value);
				this.SendPropertyChanging();
				this._IsApproved = value;
				this.SendPropertyChanged("IsApproved");
				this.OnIsApprovedChanged();
			}
		}
	}
	
	[Column(Storage="_IsLockedOut", DbType="Bit NOT NULL")]
	public bool IsLockedOut
	{
		get
		{
			return this._IsLockedOut;
		}
		set
		{
			if ((this._IsLockedOut != value))
			{
				this.OnIsLockedOutChanging(value);
				this.SendPropertyChanging();
				this._IsLockedOut = value;
				this.SendPropertyChanged("IsLockedOut");
				this.OnIsLockedOutChanged();
			}
		}
	}
	
	[Column(Storage="_CreateDate", DbType="DateTime NOT NULL")]
	public System.DateTime CreateDate
	{
		get
		{
			return this._CreateDate;
		}
		set
		{
			if ((this._CreateDate != value))
			{
				this.OnCreateDateChanging(value);
				this.SendPropertyChanging();
				this._CreateDate = value;
				this.SendPropertyChanged("CreateDate");
				this.OnCreateDateChanged();
			}
		}
	}
	
	[Column(Storage="_LastLoginDate", DbType="DateTime NOT NULL")]
	public System.DateTime LastLoginDate
	{
		get
		{
			return this._LastLoginDate;
		}
		set
		{
			if ((this._LastLoginDate != value))
			{
				this.OnLastLoginDateChanging(value);
				this.SendPropertyChanging();
				this._LastLoginDate = value;
				this.SendPropertyChanged("LastLoginDate");
				this.OnLastLoginDateChanged();
			}
		}
	}
	
	[Column(Storage="_LastPasswordChangedDate", DbType="DateTime NOT NULL")]
	public System.DateTime LastPasswordChangedDate
	{
		get
		{
			return this._LastPasswordChangedDate;
		}
		set
		{
			if ((this._LastPasswordChangedDate != value))
			{
				this.OnLastPasswordChangedDateChanging(value);
				this.SendPropertyChanging();
				this._LastPasswordChangedDate = value;
				this.SendPropertyChanged("LastPasswordChangedDate");
				this.OnLastPasswordChangedDateChanged();
			}
		}
	}
	
	[Column(Storage="_LastLockoutDate", DbType="DateTime NOT NULL")]
	public System.DateTime LastLockoutDate
	{
		get
		{
			return this._LastLockoutDate;
		}
		set
		{
			if ((this._LastLockoutDate != value))
			{
				this.OnLastLockoutDateChanging(value);
				this.SendPropertyChanging();
				this._LastLockoutDate = value;
				this.SendPropertyChanged("LastLockoutDate");
				this.OnLastLockoutDateChanged();
			}
		}
	}
	
	[Column(Storage="_FailedPasswordAttemptCount", DbType="Int NOT NULL")]
	public int FailedPasswordAttemptCount
	{
		get
		{
			return this._FailedPasswordAttemptCount;
		}
		set
		{
			if ((this._FailedPasswordAttemptCount != value))
			{
				this.OnFailedPasswordAttemptCountChanging(value);
				this.SendPropertyChanging();
				this._FailedPasswordAttemptCount = value;
				this.SendPropertyChanged("FailedPasswordAttemptCount");
				this.OnFailedPasswordAttemptCountChanged();
			}
		}
	}
	
	[Column(Storage="_FailedPasswordAttemptWindowStart", DbType="DateTime NOT NULL")]
	public System.DateTime FailedPasswordAttemptWindowStart
	{
		get
		{
			return this._FailedPasswordAttemptWindowStart;
		}
		set
		{
			if ((this._FailedPasswordAttemptWindowStart != value))
			{
				this.OnFailedPasswordAttemptWindowStartChanging(value);
				this.SendPropertyChanging();
				this._FailedPasswordAttemptWindowStart = value;
				this.SendPropertyChanged("FailedPasswordAttemptWindowStart");
				this.OnFailedPasswordAttemptWindowStartChanged();
			}
		}
	}
	
	[Column(Storage="_FailedPasswordAnswerAttemptCount", DbType="Int NOT NULL")]
	public int FailedPasswordAnswerAttemptCount
	{
		get
		{
			return this._FailedPasswordAnswerAttemptCount;
		}
		set
		{
			if ((this._FailedPasswordAnswerAttemptCount != value))
			{
				this.OnFailedPasswordAnswerAttemptCountChanging(value);
				this.SendPropertyChanging();
				this._FailedPasswordAnswerAttemptCount = value;
				this.SendPropertyChanged("FailedPasswordAnswerAttemptCount");
				this.OnFailedPasswordAnswerAttemptCountChanged();
			}
		}
	}
	
	[Column(Storage="_FailedPasswordAnswerAttemptWindowStart", DbType="DateTime NOT NULL")]
	public System.DateTime FailedPasswordAnswerAttemptWindowStart
	{
		get
		{
			return this._FailedPasswordAnswerAttemptWindowStart;
		}
		set
		{
			if ((this._FailedPasswordAnswerAttemptWindowStart != value))
			{
				this.OnFailedPasswordAnswerAttemptWindowStartChanging(value);
				this.SendPropertyChanging();
				this._FailedPasswordAnswerAttemptWindowStart = value;
				this.SendPropertyChanged("FailedPasswordAnswerAttemptWindowStart");
				this.OnFailedPasswordAnswerAttemptWindowStartChanged();
			}
		}
	}
	
	[Column(Storage="_Comment", DbType="NText", UpdateCheck=UpdateCheck.Never)]
	public string Comment
	{
		get
		{
			return this._Comment;
		}
		set
		{
			if ((this._Comment != value))
			{
				this.OnCommentChanging(value);
				this.SendPropertyChanging();
				this._Comment = value;
				this.SendPropertyChanged("Comment");
				this.OnCommentChanged();
			}
		}
	}
	
	[Association(Name="aspnet_User_aspnet_Membership", Storage="_aspnet_User", ThisKey="UserId", OtherKey="UserId", IsForeignKey=true)]
	public aspnet_User aspnet_User
	{
		get
		{
			return this._aspnet_User.Entity;
		}
		set
		{
			aspnet_User previousValue = this._aspnet_User.Entity;
			if (((previousValue != value) 
						|| (this._aspnet_User.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._aspnet_User.Entity = null;
					previousValue.aspnet_Membership = null;
				}
				this._aspnet_User.Entity = value;
				if ((value != null))
				{
					value.aspnet_Membership = this;
					this._UserId = value.UserId;
				}
				else
				{
					this._UserId = default(System.Guid);
				}
				this.SendPropertyChanged("aspnet_User");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}

[Table(Name="dbo.CompanyContactPerson")]
public partial class CompanyContactPerson : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private System.Guid _ID;
	
	private string _FullName;
	
	private string _Phone;
	
	private string _Email;
	
	private System.Nullable<System.DateTime> _Birthday;
	
	private string _Title;
	
	private string _Note;
	
	private System.Nullable<System.Guid> _CompanyLocationID;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(System.Guid value);
    partial void OnIDChanged();
    partial void OnFullNameChanging(string value);
    partial void OnFullNameChanged();
    partial void OnPhoneChanging(string value);
    partial void OnPhoneChanged();
    partial void OnEmailChanging(string value);
    partial void OnEmailChanged();
    partial void OnBirthdayChanging(System.Nullable<System.DateTime> value);
    partial void OnBirthdayChanged();
    partial void OnTitleChanging(string value);
    partial void OnTitleChanged();
    partial void OnNoteChanging(string value);
    partial void OnNoteChanged();
    partial void OnCompanyLocationIDChanging(System.Nullable<System.Guid> value);
    partial void OnCompanyLocationIDChanged();
    #endregion
	
	public CompanyContactPerson()
	{
		OnCreated();
	}
	
	[Column(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true, IsDbGenerated=true)]
	public System.Guid ID
	{
		get
		{
			return this._ID;
		}
		set
		{
			if ((this._ID != value))
			{
				this.OnIDChanging(value);
				this.SendPropertyChanging();
				this._ID = value;
				this.SendPropertyChanged("ID");
				this.OnIDChanged();
			}
		}
	}
	
	[Column(Storage="_FullName", DbType="NVarChar(MAX)")]
	public string FullName
	{
		get
		{
			return this._FullName;
		}
		set
		{
			if ((this._FullName != value))
			{
				this.OnFullNameChanging(value);
				this.SendPropertyChanging();
				this._FullName = value;
				this.SendPropertyChanged("FullName");
				this.OnFullNameChanged();
			}
		}
	}
	
	[Column(Storage="_Phone", DbType="NVarChar(MAX)")]
	public string Phone
	{
		get
		{
			return this._Phone;
		}
		set
		{
			if ((this._Phone != value))
			{
				this.OnPhoneChanging(value);
				this.SendPropertyChanging();
				this._Phone = value;
				this.SendPropertyChanged("Phone");
				this.OnPhoneChanged();
			}
		}
	}
	
	[Column(Storage="_Email", DbType="NVarChar(MAX)")]
	public string Email
	{
		get
		{
			return this._Email;
		}
		set
		{
			if ((this._Email != value))
			{
				this.OnEmailChanging(value);
				this.SendPropertyChanging();
				this._Email = value;
				this.SendPropertyChanged("Email");
				this.OnEmailChanged();
			}
		}
	}
	
	[Column(Storage="_Birthday", DbType="DateTime")]
	public System.Nullable<System.DateTime> Birthday
	{
		get
		{
			return this._Birthday;
		}
		set
		{
			if ((this._Birthday != value))
			{
				this.OnBirthdayChanging(value);
				this.SendPropertyChanging();
				this._Birthday = value;
				this.SendPropertyChanged("Birthday");
				this.OnBirthdayChanged();
			}
		}
	}
	
	[Column(Storage="_Title", DbType="NVarChar(MAX)")]
	public string Title
	{
		get
		{
			return this._Title;
		}
		set
		{
			if ((this._Title != value))
			{
				this.OnTitleChanging(value);
				this.SendPropertyChanging();
				this._Title = value;
				this.SendPropertyChanged("Title");
				this.OnTitleChanged();
			}
		}
	}
	
	[Column(Storage="_Note", DbType="NVarChar(MAX)")]
	public string Note
	{
		get
		{
			return this._Note;
		}
		set
		{
			if ((this._Note != value))
			{
				this.OnNoteChanging(value);
				this.SendPropertyChanging();
				this._Note = value;
				this.SendPropertyChanged("Note");
				this.OnNoteChanged();
			}
		}
	}
	
	[Column(Storage="_CompanyLocationID", DbType="UniqueIdentifier")]
	public System.Nullable<System.Guid> CompanyLocationID
	{
		get
		{
			return this._CompanyLocationID;
		}
		set
		{
			if ((this._CompanyLocationID != value))
			{
				this.OnCompanyLocationIDChanging(value);
				this.SendPropertyChanging();
				this._CompanyLocationID = value;
				this.SendPropertyChanged("CompanyLocationID");
				this.OnCompanyLocationIDChanged();
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}

[Table(Name="dbo.Sex")]
public partial class Sex : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private System.Guid _ID;
	
	private string _Name;
	
	private EntitySet<People> _Peoples;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(System.Guid value);
    partial void OnIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
	
	public Sex()
	{
		this._Peoples = new EntitySet<People>(new Action<People>(this.attach_Peoples), new Action<People>(this.detach_Peoples));
		OnCreated();
	}
	
	[Column(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true, IsDbGenerated=true)]
	public System.Guid ID
	{
		get
		{
			return this._ID;
		}
		set
		{
			if ((this._ID != value))
			{
				this.OnIDChanging(value);
				this.SendPropertyChanging();
				this._ID = value;
				this.SendPropertyChanged("ID");
				this.OnIDChanged();
			}
		}
	}
	
	[Column(Storage="_Name", DbType="NVarChar(MAX)")]
	public string Name
	{
		get
		{
			return this._Name;
		}
		set
		{
			if ((this._Name != value))
			{
				this.OnNameChanging(value);
				this.SendPropertyChanging();
				this._Name = value;
				this.SendPropertyChanged("Name");
				this.OnNameChanged();
			}
		}
	}
	
	[Association(Name="Sex_People", Storage="_Peoples", ThisKey="ID", OtherKey="SexID")]
	public EntitySet<People> Peoples
	{
		get
		{
			return this._Peoples;
		}
		set
		{
			this._Peoples.Assign(value);
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_Peoples(People entity)
	{
		this.SendPropertyChanging();
		entity.Sex = this;
	}
	
	private void detach_Peoples(People entity)
	{
		this.SendPropertyChanging();
		entity.Sex = null;
	}
}

[Table(Name="dbo.Geo")]
public partial class Geo : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private System.Guid _ID;
	
	private string _Name;
	
	private System.Nullable<System.Guid> _ParentID;
	
	private System.Nullable<int> _Level;
	
	private string _Fullname;
	
	private string _FullnameNoDiacritics;
	
	private EntitySet<Geo> _Geos;
	
	private EntitySet<People> _Peoples;
	
	private EntitySet<People> _Peoples1;
	
	private EntitySet<People> _Peoples2;
	
	private EntitySet<People> _Peoples3;
	
	private EntitySet<People> _Peoples4;
	
	private EntitySet<People> _Peoples5;
	
	private EntitySet<Org> _OrgsByGeo1;
	
	private EntitySet<Org> _OrgsByGeo2;
	
	private EntitySet<Org> _OrgsByGeo3;
	
	private EntityRef<Geo> _Geo1;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(System.Guid value);
    partial void OnIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnParentIDChanging(System.Nullable<System.Guid> value);
    partial void OnParentIDChanged();
    partial void OnLevelChanging(System.Nullable<int> value);
    partial void OnLevelChanged();
    partial void OnFullnameChanging(string value);
    partial void OnFullnameChanged();
    partial void OnFullnameNoDiacriticsChanging(string value);
    partial void OnFullnameNoDiacriticsChanged();
    #endregion
	
	public Geo()
	{
		this._Geos = new EntitySet<Geo>(new Action<Geo>(this.attach_Geos), new Action<Geo>(this.detach_Geos));
		this._Peoples = new EntitySet<People>(new Action<People>(this.attach_Peoples), new Action<People>(this.detach_Peoples));
		this._Peoples1 = new EntitySet<People>(new Action<People>(this.attach_Peoples1), new Action<People>(this.detach_Peoples1));
		this._Peoples2 = new EntitySet<People>(new Action<People>(this.attach_Peoples2), new Action<People>(this.detach_Peoples2));
		this._Peoples3 = new EntitySet<People>(new Action<People>(this.attach_Peoples3), new Action<People>(this.detach_Peoples3));
		this._Peoples4 = new EntitySet<People>(new Action<People>(this.attach_Peoples4), new Action<People>(this.detach_Peoples4));
		this._Peoples5 = new EntitySet<People>(new Action<People>(this.attach_Peoples5), new Action<People>(this.detach_Peoples5));
		this._OrgsByGeo1 = new EntitySet<Org>(new Action<Org>(this.attach_OrgsByGeo1), new Action<Org>(this.detach_OrgsByGeo1));
		this._OrgsByGeo2 = new EntitySet<Org>(new Action<Org>(this.attach_OrgsByGeo2), new Action<Org>(this.detach_OrgsByGeo2));
		this._OrgsByGeo3 = new EntitySet<Org>(new Action<Org>(this.attach_OrgsByGeo3), new Action<Org>(this.detach_OrgsByGeo3));
		this._Geo1 = default(EntityRef<Geo>);
		OnCreated();
	}
	
	[Column(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true, IsDbGenerated=true)]
	public System.Guid ID
	{
		get
		{
			return this._ID;
		}
		set
		{
			if ((this._ID != value))
			{
				this.OnIDChanging(value);
				this.SendPropertyChanging();
				this._ID = value;
				this.SendPropertyChanged("ID");
				this.OnIDChanged();
			}
		}
	}
	
	[Column(Storage="_Name", DbType="NVarChar(MAX)")]
	public string Name
	{
		get
		{
			return this._Name;
		}
		set
		{
			if ((this._Name != value))
			{
				this.OnNameChanging(value);
				this.SendPropertyChanging();
				this._Name = value;
				this.SendPropertyChanged("Name");
				this.OnNameChanged();
			}
		}
	}
	
	[Column(Storage="_ParentID", DbType="UniqueIdentifier")]
	public System.Nullable<System.Guid> ParentID
	{
		get
		{
			return this._ParentID;
		}
		set
		{
			if ((this._ParentID != value))
			{
				if (this._Geo1.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnParentIDChanging(value);
				this.SendPropertyChanging();
				this._ParentID = value;
				this.SendPropertyChanged("ParentID");
				this.OnParentIDChanged();
			}
		}
	}
	
	[Column(Name="[Level]", Storage="_Level", DbType="Int")]
	public System.Nullable<int> Level
	{
		get
		{
			return this._Level;
		}
		set
		{
			if ((this._Level != value))
			{
				this.OnLevelChanging(value);
				this.SendPropertyChanging();
				this._Level = value;
				this.SendPropertyChanged("Level");
				this.OnLevelChanged();
			}
		}
	}
	
	[Column(Storage="_Fullname", DbType="NVarChar(MAX)")]
	public string Fullname
	{
		get
		{
			return this._Fullname;
		}
		set
		{
			if ((this._Fullname != value))
			{
				this.OnFullnameChanging(value);
				this.SendPropertyChanging();
				this._Fullname = value;
				this.SendPropertyChanged("Fullname");
				this.OnFullnameChanged();
			}
		}
	}
	
	[Column(Storage="_FullnameNoDiacritics", DbType="NVarChar(MAX)")]
	public string FullnameNoDiacritics
	{
		get
		{
			return this._FullnameNoDiacritics;
		}
		set
		{
			if ((this._FullnameNoDiacritics != value))
			{
				this.OnFullnameNoDiacriticsChanging(value);
				this.SendPropertyChanging();
				this._FullnameNoDiacritics = value;
				this.SendPropertyChanged("FullnameNoDiacritics");
				this.OnFullnameNoDiacriticsChanged();
			}
		}
	}
	
	[Association(Name="Geo_Geo", Storage="_Geos", ThisKey="ID", OtherKey="ParentID")]
	public EntitySet<Geo> Geos
	{
		get
		{
			return this._Geos;
		}
		set
		{
			this._Geos.Assign(value);
		}
	}
	
	[Association(Name="Geo_People", Storage="_Peoples", ThisKey="ID", OtherKey="MailingGeoID1")]
	public EntitySet<People> PeopleMailingGeo1
	{
		get
		{
			return this._Peoples;
		}
		set
		{
			this._Peoples.Assign(value);
		}
	}
	
	[Association(Name="Geo_People1", Storage="_Peoples1", ThisKey="ID", OtherKey="MailingGeoID2")]
	public EntitySet<People> PeopleMailingGeo2
	{
		get
		{
			return this._Peoples1;
		}
		set
		{
			this._Peoples1.Assign(value);
		}
	}
	
	[Association(Name="Geo_People2", Storage="_Peoples2", ThisKey="ID", OtherKey="MailingGeoID3")]
	public EntitySet<People> PeopleMailingGeo3
	{
		get
		{
			return this._Peoples2;
		}
		set
		{
			this._Peoples2.Assign(value);
		}
	}
	
	[Association(Name="Geo_People3", Storage="_Peoples3", ThisKey="ID", OtherKey="ResidentGeoID1")]
	public EntitySet<People> PeopleResidentGeo1
	{
		get
		{
			return this._Peoples3;
		}
		set
		{
			this._Peoples3.Assign(value);
		}
	}
	
	[Association(Name="Geo_People4", Storage="_Peoples4", ThisKey="ID", OtherKey="ResidentGeoID2")]
	public EntitySet<People> PeopleResidentGeo2
	{
		get
		{
			return this._Peoples4;
		}
		set
		{
			this._Peoples4.Assign(value);
		}
	}
	
	[Association(Name="Geo_People5", Storage="_Peoples5", ThisKey="ID", OtherKey="ResidentGeoID3")]
	public EntitySet<People> PeopleResidentGeo3
	{
		get
		{
			return this._Peoples5;
		}
		set
		{
			this._Peoples5.Assign(value);
		}
	}
	
	[Association(Name="Geo_Org", Storage="_OrgsByGeo1", ThisKey="ID", OtherKey="GeoID1")]
	public EntitySet<Org> OrgsByGeo1
	{
		get
		{
			return this._OrgsByGeo1;
		}
		set
		{
			this._OrgsByGeo1.Assign(value);
		}
	}
	
	[Association(Name="Geo_Org1", Storage="_OrgsByGeo2", ThisKey="ID", OtherKey="GeoID2")]
	public EntitySet<Org> OrgsByGeo2
	{
		get
		{
			return this._OrgsByGeo2;
		}
		set
		{
			this._OrgsByGeo2.Assign(value);
		}
	}
	
	[Association(Name="Geo_Org2", Storage="_OrgsByGeo3", ThisKey="ID", OtherKey="GeoID3")]
	public EntitySet<Org> OrgsByGeo3
	{
		get
		{
			return this._OrgsByGeo3;
		}
		set
		{
			this._OrgsByGeo3.Assign(value);
		}
	}
	
	[Association(Name="Geo_Geo", Storage="_Geo1", ThisKey="ParentID", OtherKey="ID", IsForeignKey=true)]
	public Geo ParentGeo
	{
		get
		{
			return this._Geo1.Entity;
		}
		set
		{
			Geo previousValue = this._Geo1.Entity;
			if (((previousValue != value) 
						|| (this._Geo1.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Geo1.Entity = null;
					previousValue.Geos.Remove(this);
				}
				this._Geo1.Entity = value;
				if ((value != null))
				{
					value.Geos.Add(this);
					this._ParentID = value.ID;
				}
				else
				{
					this._ParentID = default(Nullable<System.Guid>);
				}
				this.SendPropertyChanged("ParentGeo");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_Geos(Geo entity)
	{
		this.SendPropertyChanging();
		entity.ParentGeo = this;
	}
	
	private void detach_Geos(Geo entity)
	{
		this.SendPropertyChanging();
		entity.ParentGeo = null;
	}
	
	private void attach_Peoples(People entity)
	{
		this.SendPropertyChanging();
		entity.MailingGeo1 = this;
	}
	
	private void detach_Peoples(People entity)
	{
		this.SendPropertyChanging();
		entity.MailingGeo1 = null;
	}
	
	private void attach_Peoples1(People entity)
	{
		this.SendPropertyChanging();
		entity.MailingGeo2 = this;
	}
	
	private void detach_Peoples1(People entity)
	{
		this.SendPropertyChanging();
		entity.MailingGeo2 = null;
	}
	
	private void attach_Peoples2(People entity)
	{
		this.SendPropertyChanging();
		entity.MailingGeo3 = this;
	}
	
	private void detach_Peoples2(People entity)
	{
		this.SendPropertyChanging();
		entity.MailingGeo3 = null;
	}
	
	private void attach_Peoples3(People entity)
	{
		this.SendPropertyChanging();
		entity.ResidentGeo1 = this;
	}
	
	private void detach_Peoples3(People entity)
	{
		this.SendPropertyChanging();
		entity.ResidentGeo1 = null;
	}
	
	private void attach_Peoples4(People entity)
	{
		this.SendPropertyChanging();
		entity.ResidentGeo2 = this;
	}
	
	private void detach_Peoples4(People entity)
	{
		this.SendPropertyChanging();
		entity.ResidentGeo2 = null;
	}
	
	private void attach_Peoples5(People entity)
	{
		this.SendPropertyChanging();
		entity.ResidentGeo3 = this;
	}
	
	private void detach_Peoples5(People entity)
	{
		this.SendPropertyChanging();
		entity.ResidentGeo3 = null;
	}
	
	private void attach_OrgsByGeo1(Org entity)
	{
		this.SendPropertyChanging();
		entity.Geo1 = this;
	}
	
	private void detach_OrgsByGeo1(Org entity)
	{
		this.SendPropertyChanging();
		entity.Geo1 = null;
	}
	
	private void attach_OrgsByGeo2(Org entity)
	{
		this.SendPropertyChanging();
		entity.Geo2 = this;
	}
	
	private void detach_OrgsByGeo2(Org entity)
	{
		this.SendPropertyChanging();
		entity.Geo2 = null;
	}
	
	private void attach_OrgsByGeo3(Org entity)
	{
		this.SendPropertyChanging();
		entity.Geo3 = this;
	}
	
	private void detach_OrgsByGeo3(Org entity)
	{
		this.SendPropertyChanging();
		entity.Geo3 = null;
	}
}

[Table(Name="dbo.Hospital")]
public partial class Hospital : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private System.Guid _ID;
	
	private string _Name;
	
	private string _NameInEnglish;
	
	private string _Address;
	
	private string _Phone;
	
	private string _Fax;
	
	private string _Email;
	
	private string _Website;
	
	private string _Code;
	
	private EntitySet<Department> _Departments;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(System.Guid value);
    partial void OnIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnNameInEnglishChanging(string value);
    partial void OnNameInEnglishChanged();
    partial void OnAddressChanging(string value);
    partial void OnAddressChanged();
    partial void OnPhoneChanging(string value);
    partial void OnPhoneChanged();
    partial void OnFaxChanging(string value);
    partial void OnFaxChanged();
    partial void OnEmailChanging(string value);
    partial void OnEmailChanged();
    partial void OnWebsiteChanging(string value);
    partial void OnWebsiteChanged();
    partial void OnCodeChanging(string value);
    partial void OnCodeChanged();
    #endregion
	
	public Hospital()
	{
		this._Departments = new EntitySet<Department>(new Action<Department>(this.attach_Departments), new Action<Department>(this.detach_Departments));
		OnCreated();
	}
	
	[Column(Storage="_ID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
	public System.Guid ID
	{
		get
		{
			return this._ID;
		}
		set
		{
			if ((this._ID != value))
			{
				this.OnIDChanging(value);
				this.SendPropertyChanging();
				this._ID = value;
				this.SendPropertyChanged("ID");
				this.OnIDChanged();
			}
		}
	}
	
	[Column(Storage="_Name", DbType="NVarChar(MAX)")]
	public string Name
	{
		get
		{
			return this._Name;
		}
		set
		{
			if ((this._Name != value))
			{
				this.OnNameChanging(value);
				this.SendPropertyChanging();
				this._Name = value;
				this.SendPropertyChanged("Name");
				this.OnNameChanged();
			}
		}
	}
	
	[Column(Storage="_NameInEnglish", DbType="NVarChar(MAX)")]
	public string NameInEnglish
	{
		get
		{
			return this._NameInEnglish;
		}
		set
		{
			if ((this._NameInEnglish != value))
			{
				this.OnNameInEnglishChanging(value);
				this.SendPropertyChanging();
				this._NameInEnglish = value;
				this.SendPropertyChanged("NameInEnglish");
				this.OnNameInEnglishChanged();
			}
		}
	}
	
	[Column(Storage="_Address", DbType="NVarChar(MAX)")]
	public string Address
	{
		get
		{
			return this._Address;
		}
		set
		{
			if ((this._Address != value))
			{
				this.OnAddressChanging(value);
				this.SendPropertyChanging();
				this._Address = value;
				this.SendPropertyChanged("Address");
				this.OnAddressChanged();
			}
		}
	}
	
	[Column(Storage="_Phone", DbType="NVarChar(MAX)")]
	public string Phone
	{
		get
		{
			return this._Phone;
		}
		set
		{
			if ((this._Phone != value))
			{
				this.OnPhoneChanging(value);
				this.SendPropertyChanging();
				this._Phone = value;
				this.SendPropertyChanged("Phone");
				this.OnPhoneChanged();
			}
		}
	}
	
	[Column(Storage="_Fax", DbType="NVarChar(MAX)")]
	public string Fax
	{
		get
		{
			return this._Fax;
		}
		set
		{
			if ((this._Fax != value))
			{
				this.OnFaxChanging(value);
				this.SendPropertyChanging();
				this._Fax = value;
				this.SendPropertyChanged("Fax");
				this.OnFaxChanged();
			}
		}
	}
	
	[Column(Storage="_Email", DbType="NVarChar(MAX)")]
	public string Email
	{
		get
		{
			return this._Email;
		}
		set
		{
			if ((this._Email != value))
			{
				this.OnEmailChanging(value);
				this.SendPropertyChanging();
				this._Email = value;
				this.SendPropertyChanged("Email");
				this.OnEmailChanged();
			}
		}
	}
	
	[Column(Storage="_Website", DbType="NVarChar(MAX)")]
	public string Website
	{
		get
		{
			return this._Website;
		}
		set
		{
			if ((this._Website != value))
			{
				this.OnWebsiteChanging(value);
				this.SendPropertyChanging();
				this._Website = value;
				this.SendPropertyChanged("Website");
				this.OnWebsiteChanged();
			}
		}
	}
	
	[Column(Storage="_Code", DbType="NVarChar(MAX)")]
	public string Code
	{
		get
		{
			return this._Code;
		}
		set
		{
			if ((this._Code != value))
			{
				this.OnCodeChanging(value);
				this.SendPropertyChanging();
				this._Code = value;
				this.SendPropertyChanged("Code");
				this.OnCodeChanged();
			}
		}
	}
	
	[Association(Name="Hospital_Department", Storage="_Departments", ThisKey="ID", OtherKey="HospitalID")]
	public EntitySet<Department> Departments
	{
		get
		{
			return this._Departments;
		}
		set
		{
			this._Departments.Assign(value);
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_Departments(Department entity)
	{
		this.SendPropertyChanging();
		entity.Hospital = this;
	}
	
	private void detach_Departments(Department entity)
	{
		this.SendPropertyChanging();
		entity.Hospital = null;
	}
}

[Table(Name="dbo.TestDef")]
public partial class TestDef : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _ID;
	
	private string _Name;
	
	private System.Nullable<int> _ParentID;
	
	private string _Note;
	
	private System.Nullable<int> _Level;
	
	private EntitySet<TestDef> _Children;
	
	private EntitySet<Campaign> _CampaignsBySource;
	
	private EntityRef<TestDef> _Parent;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnParentIDChanging(System.Nullable<int> value);
    partial void OnParentIDChanged();
    partial void OnNoteChanging(string value);
    partial void OnNoteChanged();
    partial void OnLevelChanging(System.Nullable<int> value);
    partial void OnLevelChanged();
    #endregion
	
	public TestDef()
	{
		this._Children = new EntitySet<TestDef>(new Action<TestDef>(this.attach_Children), new Action<TestDef>(this.detach_Children));
		this._CampaignsBySource = new EntitySet<Campaign>(new Action<Campaign>(this.attach_CampaignsBySource), new Action<Campaign>(this.detach_CampaignsBySource));
		this._Parent = default(EntityRef<TestDef>);
		OnCreated();
	}
	
	[Column(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int ID
	{
		get
		{
			return this._ID;
		}
		set
		{
			if ((this._ID != value))
			{
				this.OnIDChanging(value);
				this.SendPropertyChanging();
				this._ID = value;
				this.SendPropertyChanged("ID");
				this.OnIDChanged();
			}
		}
	}
	
	[Column(Storage="_Name", DbType="NVarChar(MAX)")]
	public string Name
	{
		get
		{
			return this._Name;
		}
		set
		{
			if ((this._Name != value))
			{
				this.OnNameChanging(value);
				this.SendPropertyChanging();
				this._Name = value;
				this.SendPropertyChanged("Name");
				this.OnNameChanged();
			}
		}
	}
	
	[Column(Storage="_ParentID", DbType="Int")]
	public System.Nullable<int> ParentID
	{
		get
		{
			return this._ParentID;
		}
		set
		{
			if ((this._ParentID != value))
			{
				if (this._Parent.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnParentIDChanging(value);
				this.SendPropertyChanging();
				this._ParentID = value;
				this.SendPropertyChanged("ParentID");
				this.OnParentIDChanged();
			}
		}
	}
	
	[Column(Storage="_Note", DbType="NVarChar(MAX)")]
	public string Note
	{
		get
		{
			return this._Note;
		}
		set
		{
			if ((this._Note != value))
			{
				this.OnNoteChanging(value);
				this.SendPropertyChanging();
				this._Note = value;
				this.SendPropertyChanged("Note");
				this.OnNoteChanged();
			}
		}
	}
	
	[Column(Name="[Level]", Storage="_Level", DbType="Int")]
	public System.Nullable<int> Level
	{
		get
		{
			return this._Level;
		}
		set
		{
			if ((this._Level != value))
			{
				this.OnLevelChanging(value);
				this.SendPropertyChanging();
				this._Level = value;
				this.SendPropertyChanged("Level");
				this.OnLevelChanged();
			}
		}
	}
	
	[Association(Name="TestDef_TestDef", Storage="_Children", ThisKey="ID", OtherKey="ParentID")]
	public EntitySet<TestDef> Children
	{
		get
		{
			return this._Children;
		}
		set
		{
			this._Children.Assign(value);
		}
	}
	
	[Association(Name="TestDef_Campaign", Storage="_CampaignsBySource", ThisKey="ID", OtherKey="SourceID")]
	public EntitySet<Campaign> CampaignsBySource
	{
		get
		{
			return this._CampaignsBySource;
		}
		set
		{
			this._CampaignsBySource.Assign(value);
		}
	}
	
	[Association(Name="TestDef_TestDef", Storage="_Parent", ThisKey="ParentID", OtherKey="ID", IsForeignKey=true)]
	public TestDef Parent
	{
		get
		{
			return this._Parent.Entity;
		}
		set
		{
			TestDef previousValue = this._Parent.Entity;
			if (((previousValue != value) 
						|| (this._Parent.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Parent.Entity = null;
					previousValue.Children.Remove(this);
				}
				this._Parent.Entity = value;
				if ((value != null))
				{
					value.Children.Add(this);
					this._ParentID = value.ID;
				}
				else
				{
					this._ParentID = default(Nullable<int>);
				}
				this.SendPropertyChanged("Parent");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_Children(TestDef entity)
	{
		this.SendPropertyChanging();
		entity.Parent = this;
	}
	
	private void detach_Children(TestDef entity)
	{
		this.SendPropertyChanging();
		entity.Parent = null;
	}
	
	private void attach_CampaignsBySource(Campaign entity)
	{
		this.SendPropertyChanging();
		entity.Source = this;
	}
	
	private void detach_CampaignsBySource(Campaign entity)
	{
		this.SendPropertyChanging();
		entity.Source = null;
	}
}

[Table(Name="dbo.People")]
public partial class People : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private System.Guid _ID;
	
	private string _Name;
	
	private string _Codabar;
	
	private string _CMND;
	
	private System.Nullable<System.DateTime> _DOB;
	
	private System.Nullable<System.Guid> _SexID;
	
	private string _Job;
	
	private string _Email;
	
	private string _Phone;
	
	private string _Note;
	
	private System.Data.Linq.Binary _Photo;
	
	private System.Nullable<int> _Status;
	
	private string _ResidentAddress;
	
	private System.Nullable<System.Guid> _ResidentGeo1;
	
	private System.Nullable<System.Guid> _ResidentGeo2;
	
	private System.Nullable<System.Guid> _ResidentGeo3;
	
	private string _MailingAddress;
	
	private System.Nullable<System.Guid> _MailingGeo1;
	
	private System.Nullable<System.Guid> _MailingGeo2;
	
	private System.Nullable<System.Guid> _MailingGeo3;
	
	private System.Nullable<bool> _EnableMailingAddress;
	
	private string _NameNoDiacritics;
	
	private int _Autonum;
	
	private System.Nullable<int> _DOBYear;
	
	private EntitySet<Donation> _Donations;
	
	private EntitySet<Order> _Orders;
	
	private EntityRef<Geo> _Geo;
	
	private EntityRef<Geo> _Geo1;
	
	private EntityRef<Geo> _Geo2;
	
	private EntityRef<Geo> _Geo3;
	
	private EntityRef<Geo> _Geo4;
	
	private EntityRef<Geo> _Geo5;
	
	private EntityRef<Sex> _Sex;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(System.Guid value);
    partial void OnIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnCodabarChanging(string value);
    partial void OnCodabarChanged();
    partial void OnCMNDChanging(string value);
    partial void OnCMNDChanged();
    partial void OnDOBChanging(System.Nullable<System.DateTime> value);
    partial void OnDOBChanged();
    partial void OnSexIDChanging(System.Nullable<System.Guid> value);
    partial void OnSexIDChanged();
    partial void OnJobChanging(string value);
    partial void OnJobChanged();
    partial void OnEmailChanging(string value);
    partial void OnEmailChanged();
    partial void OnPhoneChanging(string value);
    partial void OnPhoneChanged();
    partial void OnNoteChanging(string value);
    partial void OnNoteChanged();
    partial void OnPhotoChanging(System.Data.Linq.Binary value);
    partial void OnPhotoChanged();
    partial void OnStatusChanging(System.Nullable<int> value);
    partial void OnStatusChanged();
    partial void OnResidentAddressChanging(string value);
    partial void OnResidentAddressChanged();
    partial void OnResidentGeoID1Changing(System.Nullable<System.Guid> value);
    partial void OnResidentGeoID1Changed();
    partial void OnResidentGeoID2Changing(System.Nullable<System.Guid> value);
    partial void OnResidentGeoID2Changed();
    partial void OnResidentGeoID3Changing(System.Nullable<System.Guid> value);
    partial void OnResidentGeoID3Changed();
    partial void OnMailingAddressChanging(string value);
    partial void OnMailingAddressChanged();
    partial void OnMailingGeoID1Changing(System.Nullable<System.Guid> value);
    partial void OnMailingGeoID1Changed();
    partial void OnMailingGeoID2Changing(System.Nullable<System.Guid> value);
    partial void OnMailingGeoID2Changed();
    partial void OnMailingGeoID3Changing(System.Nullable<System.Guid> value);
    partial void OnMailingGeoID3Changed();
    partial void OnEnableMailingAddressChanging(System.Nullable<bool> value);
    partial void OnEnableMailingAddressChanged();
    partial void OnNameNoDiacriticsChanging(string value);
    partial void OnNameNoDiacriticsChanged();
    partial void OnAutonumChanging(int value);
    partial void OnAutonumChanged();
    partial void OnDOBYearChanging(System.Nullable<int> value);
    partial void OnDOBYearChanged();
    #endregion
	
	public People()
	{
		this._Donations = new EntitySet<Donation>(new Action<Donation>(this.attach_Donations), new Action<Donation>(this.detach_Donations));
		this._Orders = new EntitySet<Order>(new Action<Order>(this.attach_Orders), new Action<Order>(this.detach_Orders));
		this._Geo = default(EntityRef<Geo>);
		this._Geo1 = default(EntityRef<Geo>);
		this._Geo2 = default(EntityRef<Geo>);
		this._Geo3 = default(EntityRef<Geo>);
		this._Geo4 = default(EntityRef<Geo>);
		this._Geo5 = default(EntityRef<Geo>);
		this._Sex = default(EntityRef<Sex>);
		OnCreated();
	}
	
	[Column(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true, IsDbGenerated=true)]
	public System.Guid ID
	{
		get
		{
			return this._ID;
		}
		set
		{
			if ((this._ID != value))
			{
				this.OnIDChanging(value);
				this.SendPropertyChanging();
				this._ID = value;
				this.SendPropertyChanged("ID");
				this.OnIDChanged();
			}
		}
	}
	
	[Column(Storage="_Name", DbType="NVarChar(MAX)")]
	public string Name
	{
		get
		{
			return this._Name;
		}
		set
		{
			if ((this._Name != value))
			{
				this.OnNameChanging(value);
				this.SendPropertyChanging();
				this._Name = value;
				this.SendPropertyChanged("Name");
				this.OnNameChanged();
			}
		}
	}
	
	[Column(Storage="_Codabar", DbType="NVarChar(MAX)")]
	public string Codabar
	{
		get
		{
			return this._Codabar;
		}
		set
		{
			if ((this._Codabar != value))
			{
				this.OnCodabarChanging(value);
				this.SendPropertyChanging();
				this._Codabar = value;
				this.SendPropertyChanged("Codabar");
				this.OnCodabarChanged();
			}
		}
	}
	
	[Column(Storage="_CMND", DbType="NVarChar(MAX)")]
	public string CMND
	{
		get
		{
			return this._CMND;
		}
		set
		{
			if ((this._CMND != value))
			{
				this.OnCMNDChanging(value);
				this.SendPropertyChanging();
				this._CMND = value;
				this.SendPropertyChanged("CMND");
				this.OnCMNDChanged();
			}
		}
	}
	
	[Column(Storage="_DOB", DbType="DateTime")]
	public System.Nullable<System.DateTime> DOB
	{
		get
		{
			return this._DOB;
		}
		set
		{
			if ((this._DOB != value))
			{
				this.OnDOBChanging(value);
				this.SendPropertyChanging();
				this._DOB = value;
				this.SendPropertyChanged("DOB");
				this.OnDOBChanged();
			}
		}
	}
	
	[Column(Storage="_SexID", DbType="UniqueIdentifier")]
	public System.Nullable<System.Guid> SexID
	{
		get
		{
			return this._SexID;
		}
		set
		{
			if ((this._SexID != value))
			{
				if (this._Sex.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnSexIDChanging(value);
				this.SendPropertyChanging();
				this._SexID = value;
				this.SendPropertyChanged("SexID");
				this.OnSexIDChanged();
			}
		}
	}
	
	[Column(Storage="_Job", DbType="NVarChar(MAX)")]
	public string Job
	{
		get
		{
			return this._Job;
		}
		set
		{
			if ((this._Job != value))
			{
				this.OnJobChanging(value);
				this.SendPropertyChanging();
				this._Job = value;
				this.SendPropertyChanged("Job");
				this.OnJobChanged();
			}
		}
	}
	
	[Column(Storage="_Email", DbType="NVarChar(MAX)")]
	public string Email
	{
		get
		{
			return this._Email;
		}
		set
		{
			if ((this._Email != value))
			{
				this.OnEmailChanging(value);
				this.SendPropertyChanging();
				this._Email = value;
				this.SendPropertyChanged("Email");
				this.OnEmailChanged();
			}
		}
	}
	
	[Column(Storage="_Phone", DbType="NVarChar(MAX)")]
	public string Phone
	{
		get
		{
			return this._Phone;
		}
		set
		{
			if ((this._Phone != value))
			{
				this.OnPhoneChanging(value);
				this.SendPropertyChanging();
				this._Phone = value;
				this.SendPropertyChanged("Phone");
				this.OnPhoneChanged();
			}
		}
	}
	
	[Column(Storage="_Note", DbType="NVarChar(MAX)")]
	public string Note
	{
		get
		{
			return this._Note;
		}
		set
		{
			if ((this._Note != value))
			{
				this.OnNoteChanging(value);
				this.SendPropertyChanging();
				this._Note = value;
				this.SendPropertyChanged("Note");
				this.OnNoteChanged();
			}
		}
	}
	
	[Column(Storage="_Photo", DbType="Image", UpdateCheck=UpdateCheck.Never)]
	public System.Data.Linq.Binary Photo
	{
		get
		{
			return this._Photo;
		}
		set
		{
			if ((this._Photo != value))
			{
				this.OnPhotoChanging(value);
				this.SendPropertyChanging();
				this._Photo = value;
				this.SendPropertyChanged("Photo");
				this.OnPhotoChanged();
			}
		}
	}
	
	[Column(Storage="_Status", DbType="Int")]
	public System.Nullable<int> Status
	{
		get
		{
			return this._Status;
		}
		set
		{
			if ((this._Status != value))
			{
				this.OnStatusChanging(value);
				this.SendPropertyChanging();
				this._Status = value;
				this.SendPropertyChanged("Status");
				this.OnStatusChanged();
			}
		}
	}
	
	[Column(Storage="_ResidentAddress", DbType="NVarChar(MAX)")]
	public string ResidentAddress
	{
		get
		{
			return this._ResidentAddress;
		}
		set
		{
			if ((this._ResidentAddress != value))
			{
				this.OnResidentAddressChanging(value);
				this.SendPropertyChanging();
				this._ResidentAddress = value;
				this.SendPropertyChanged("ResidentAddress");
				this.OnResidentAddressChanged();
			}
		}
	}
	
	[Column(Storage="_ResidentGeo1", DbType="UniqueIdentifier")]
	public System.Nullable<System.Guid> ResidentGeoID1
	{
		get
		{
			return this._ResidentGeo1;
		}
		set
		{
			if ((this._ResidentGeo1 != value))
			{
				if (this._Geo3.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnResidentGeoID1Changing(value);
				this.SendPropertyChanging();
				this._ResidentGeo1 = value;
				this.SendPropertyChanged("ResidentGeoID1");
				this.OnResidentGeoID1Changed();
			}
		}
	}
	
	[Column(Storage="_ResidentGeo2", DbType="UniqueIdentifier")]
	public System.Nullable<System.Guid> ResidentGeoID2
	{
		get
		{
			return this._ResidentGeo2;
		}
		set
		{
			if ((this._ResidentGeo2 != value))
			{
				if (this._Geo4.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnResidentGeoID2Changing(value);
				this.SendPropertyChanging();
				this._ResidentGeo2 = value;
				this.SendPropertyChanged("ResidentGeoID2");
				this.OnResidentGeoID2Changed();
			}
		}
	}
	
	[Column(Storage="_ResidentGeo3", DbType="UniqueIdentifier")]
	public System.Nullable<System.Guid> ResidentGeoID3
	{
		get
		{
			return this._ResidentGeo3;
		}
		set
		{
			if ((this._ResidentGeo3 != value))
			{
				if (this._Geo5.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnResidentGeoID3Changing(value);
				this.SendPropertyChanging();
				this._ResidentGeo3 = value;
				this.SendPropertyChanged("ResidentGeoID3");
				this.OnResidentGeoID3Changed();
			}
		}
	}
	
	[Column(Storage="_MailingAddress", DbType="NVarChar(MAX)")]
	public string MailingAddress
	{
		get
		{
			return this._MailingAddress;
		}
		set
		{
			if ((this._MailingAddress != value))
			{
				this.OnMailingAddressChanging(value);
				this.SendPropertyChanging();
				this._MailingAddress = value;
				this.SendPropertyChanged("MailingAddress");
				this.OnMailingAddressChanged();
			}
		}
	}
	
	[Column(Storage="_MailingGeo1", DbType="UniqueIdentifier")]
	public System.Nullable<System.Guid> MailingGeoID1
	{
		get
		{
			return this._MailingGeo1;
		}
		set
		{
			if ((this._MailingGeo1 != value))
			{
				if (this._Geo.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnMailingGeoID1Changing(value);
				this.SendPropertyChanging();
				this._MailingGeo1 = value;
				this.SendPropertyChanged("MailingGeoID1");
				this.OnMailingGeoID1Changed();
			}
		}
	}
	
	[Column(Storage="_MailingGeo2", DbType="UniqueIdentifier")]
	public System.Nullable<System.Guid> MailingGeoID2
	{
		get
		{
			return this._MailingGeo2;
		}
		set
		{
			if ((this._MailingGeo2 != value))
			{
				if (this._Geo1.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnMailingGeoID2Changing(value);
				this.SendPropertyChanging();
				this._MailingGeo2 = value;
				this.SendPropertyChanged("MailingGeoID2");
				this.OnMailingGeoID2Changed();
			}
		}
	}
	
	[Column(Storage="_MailingGeo3", DbType="UniqueIdentifier")]
	public System.Nullable<System.Guid> MailingGeoID3
	{
		get
		{
			return this._MailingGeo3;
		}
		set
		{
			if ((this._MailingGeo3 != value))
			{
				if (this._Geo2.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnMailingGeoID3Changing(value);
				this.SendPropertyChanging();
				this._MailingGeo3 = value;
				this.SendPropertyChanged("MailingGeoID3");
				this.OnMailingGeoID3Changed();
			}
		}
	}
	
	[Column(Storage="_EnableMailingAddress", DbType="Bit")]
	public System.Nullable<bool> EnableMailingAddress
	{
		get
		{
			return this._EnableMailingAddress;
		}
		set
		{
			if ((this._EnableMailingAddress != value))
			{
				this.OnEnableMailingAddressChanging(value);
				this.SendPropertyChanging();
				this._EnableMailingAddress = value;
				this.SendPropertyChanged("EnableMailingAddress");
				this.OnEnableMailingAddressChanged();
			}
		}
	}
	
	[Column(Storage="_NameNoDiacritics", DbType="NVarChar(MAX)")]
	public string NameNoDiacritics
	{
		get
		{
			return this._NameNoDiacritics;
		}
		set
		{
			if ((this._NameNoDiacritics != value))
			{
				this.OnNameNoDiacriticsChanging(value);
				this.SendPropertyChanging();
				this._NameNoDiacritics = value;
				this.SendPropertyChanged("NameNoDiacritics");
				this.OnNameNoDiacriticsChanged();
			}
		}
	}
	
	[Column(Storage="_Autonum", AutoSync=AutoSync.Always, DbType="Int NOT NULL IDENTITY", IsDbGenerated=true)]
	public int Autonum
	{
		get
		{
			return this._Autonum;
		}
		set
		{
			if ((this._Autonum != value))
			{
				this.OnAutonumChanging(value);
				this.SendPropertyChanging();
				this._Autonum = value;
				this.SendPropertyChanged("Autonum");
				this.OnAutonumChanged();
			}
		}
	}
	
	[Column(Storage="_DOBYear", DbType="Int")]
	public System.Nullable<int> DOBYear
	{
		get
		{
			return this._DOBYear;
		}
		set
		{
			if ((this._DOBYear != value))
			{
				this.OnDOBYearChanging(value);
				this.SendPropertyChanging();
				this._DOBYear = value;
				this.SendPropertyChanged("DOBYear");
				this.OnDOBYearChanged();
			}
		}
	}
	
	[Association(Name="People_Donation", Storage="_Donations", ThisKey="ID", OtherKey="PeopleID")]
	public EntitySet<Donation> Donations
	{
		get
		{
			return this._Donations;
		}
		set
		{
			this._Donations.Assign(value);
		}
	}
	
	[Association(Name="People_Order", Storage="_Orders", ThisKey="ID", OtherKey="PeopleID")]
	public EntitySet<Order> Orders
	{
		get
		{
			return this._Orders;
		}
		set
		{
			this._Orders.Assign(value);
		}
	}
	
	[Association(Name="Geo_People", Storage="_Geo", ThisKey="MailingGeoID1", OtherKey="ID", IsForeignKey=true)]
	public Geo MailingGeo1
	{
		get
		{
			return this._Geo.Entity;
		}
		set
		{
			Geo previousValue = this._Geo.Entity;
			if (((previousValue != value) 
						|| (this._Geo.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Geo.Entity = null;
					previousValue.PeopleMailingGeo1.Remove(this);
				}
				this._Geo.Entity = value;
				if ((value != null))
				{
					value.PeopleMailingGeo1.Add(this);
					this._MailingGeo1 = value.ID;
				}
				else
				{
					this._MailingGeo1 = default(Nullable<System.Guid>);
				}
				this.SendPropertyChanged("MailingGeo1");
			}
		}
	}
	
	[Association(Name="Geo_People1", Storage="_Geo1", ThisKey="MailingGeoID2", OtherKey="ID", IsForeignKey=true)]
	public Geo MailingGeo2
	{
		get
		{
			return this._Geo1.Entity;
		}
		set
		{
			Geo previousValue = this._Geo1.Entity;
			if (((previousValue != value) 
						|| (this._Geo1.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Geo1.Entity = null;
					previousValue.PeopleMailingGeo2.Remove(this);
				}
				this._Geo1.Entity = value;
				if ((value != null))
				{
					value.PeopleMailingGeo2.Add(this);
					this._MailingGeo2 = value.ID;
				}
				else
				{
					this._MailingGeo2 = default(Nullable<System.Guid>);
				}
				this.SendPropertyChanged("MailingGeo2");
			}
		}
	}
	
	[Association(Name="Geo_People2", Storage="_Geo2", ThisKey="MailingGeoID3", OtherKey="ID", IsForeignKey=true)]
	public Geo MailingGeo3
	{
		get
		{
			return this._Geo2.Entity;
		}
		set
		{
			Geo previousValue = this._Geo2.Entity;
			if (((previousValue != value) 
						|| (this._Geo2.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Geo2.Entity = null;
					previousValue.PeopleMailingGeo3.Remove(this);
				}
				this._Geo2.Entity = value;
				if ((value != null))
				{
					value.PeopleMailingGeo3.Add(this);
					this._MailingGeo3 = value.ID;
				}
				else
				{
					this._MailingGeo3 = default(Nullable<System.Guid>);
				}
				this.SendPropertyChanged("MailingGeo3");
			}
		}
	}
	
	[Association(Name="Geo_People3", Storage="_Geo3", ThisKey="ResidentGeoID1", OtherKey="ID", IsForeignKey=true)]
	public Geo ResidentGeo1
	{
		get
		{
			return this._Geo3.Entity;
		}
		set
		{
			Geo previousValue = this._Geo3.Entity;
			if (((previousValue != value) 
						|| (this._Geo3.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Geo3.Entity = null;
					previousValue.PeopleResidentGeo1.Remove(this);
				}
				this._Geo3.Entity = value;
				if ((value != null))
				{
					value.PeopleResidentGeo1.Add(this);
					this._ResidentGeo1 = value.ID;
				}
				else
				{
					this._ResidentGeo1 = default(Nullable<System.Guid>);
				}
				this.SendPropertyChanged("ResidentGeo1");
			}
		}
	}
	
	[Association(Name="Geo_People4", Storage="_Geo4", ThisKey="ResidentGeoID2", OtherKey="ID", IsForeignKey=true)]
	public Geo ResidentGeo2
	{
		get
		{
			return this._Geo4.Entity;
		}
		set
		{
			Geo previousValue = this._Geo4.Entity;
			if (((previousValue != value) 
						|| (this._Geo4.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Geo4.Entity = null;
					previousValue.PeopleResidentGeo2.Remove(this);
				}
				this._Geo4.Entity = value;
				if ((value != null))
				{
					value.PeopleResidentGeo2.Add(this);
					this._ResidentGeo2 = value.ID;
				}
				else
				{
					this._ResidentGeo2 = default(Nullable<System.Guid>);
				}
				this.SendPropertyChanged("ResidentGeo2");
			}
		}
	}
	
	[Association(Name="Geo_People5", Storage="_Geo5", ThisKey="ResidentGeoID3", OtherKey="ID", IsForeignKey=true)]
	public Geo ResidentGeo3
	{
		get
		{
			return this._Geo5.Entity;
		}
		set
		{
			Geo previousValue = this._Geo5.Entity;
			if (((previousValue != value) 
						|| (this._Geo5.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Geo5.Entity = null;
					previousValue.PeopleResidentGeo3.Remove(this);
				}
				this._Geo5.Entity = value;
				if ((value != null))
				{
					value.PeopleResidentGeo3.Add(this);
					this._ResidentGeo3 = value.ID;
				}
				else
				{
					this._ResidentGeo3 = default(Nullable<System.Guid>);
				}
				this.SendPropertyChanged("ResidentGeo3");
			}
		}
	}
	
	[Association(Name="Sex_People", Storage="_Sex", ThisKey="SexID", OtherKey="ID", IsForeignKey=true)]
	public Sex Sex
	{
		get
		{
			return this._Sex.Entity;
		}
		set
		{
			Sex previousValue = this._Sex.Entity;
			if (((previousValue != value) 
						|| (this._Sex.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Sex.Entity = null;
					previousValue.Peoples.Remove(this);
				}
				this._Sex.Entity = value;
				if ((value != null))
				{
					value.Peoples.Add(this);
					this._SexID = value.ID;
				}
				else
				{
					this._SexID = default(Nullable<System.Guid>);
				}
				this.SendPropertyChanged("Sex");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_Donations(Donation entity)
	{
		this.SendPropertyChanging();
		entity.People = this;
	}
	
	private void detach_Donations(Donation entity)
	{
		this.SendPropertyChanging();
		entity.People = null;
	}
	
	private void attach_Orders(Order entity)
	{
		this.SendPropertyChanging();
		entity.People = this;
	}
	
	private void detach_Orders(Order entity)
	{
		this.SendPropertyChanging();
		entity.People = null;
	}
}

[Table(Name="dbo.Org")]
public partial class Org : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _ID;
	
	private string _Name;
	
	private string _NameNoDiacritics;
	
	private string _Address;
	
	private System.Nullable<System.Guid> _GeoID1;
	
	private System.Nullable<System.Guid> _GeoID2;
	
	private System.Nullable<System.Guid> _GeoID3;
	
	private string _Note;
	
	private System.Nullable<int> _Type;
	
	private EntitySet<Campaign> _CampaignsByCoopOrg;
	
	private EntitySet<Campaign> _CampaignsByHostOrg;
	
	private EntitySet<Order> _Orders;
	
	private EntityRef<Geo> _Geo1;
	
	private EntityRef<Geo> _Geo2;
	
	private EntityRef<Geo> _Geo3;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnNameNoDiacriticsChanging(string value);
    partial void OnNameNoDiacriticsChanged();
    partial void OnAddressChanging(string value);
    partial void OnAddressChanged();
    partial void OnGeoID1Changing(System.Nullable<System.Guid> value);
    partial void OnGeoID1Changed();
    partial void OnGeoID2Changing(System.Nullable<System.Guid> value);
    partial void OnGeoID2Changed();
    partial void OnGeoID3Changing(System.Nullable<System.Guid> value);
    partial void OnGeoID3Changed();
    partial void OnNoteChanging(string value);
    partial void OnNoteChanged();
    partial void OnTypeChanging(System.Nullable<int> value);
    partial void OnTypeChanged();
    #endregion
	
	public Org()
	{
		this._CampaignsByCoopOrg = new EntitySet<Campaign>(new Action<Campaign>(this.attach_CampaignsByCoopOrg), new Action<Campaign>(this.detach_CampaignsByCoopOrg));
		this._CampaignsByHostOrg = new EntitySet<Campaign>(new Action<Campaign>(this.attach_CampaignsByHostOrg), new Action<Campaign>(this.detach_CampaignsByHostOrg));
		this._Orders = new EntitySet<Order>(new Action<Order>(this.attach_Orders), new Action<Order>(this.detach_Orders));
		this._Geo1 = default(EntityRef<Geo>);
		this._Geo2 = default(EntityRef<Geo>);
		this._Geo3 = default(EntityRef<Geo>);
		OnCreated();
	}
	
	[Column(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int ID
	{
		get
		{
			return this._ID;
		}
		set
		{
			if ((this._ID != value))
			{
				this.OnIDChanging(value);
				this.SendPropertyChanging();
				this._ID = value;
				this.SendPropertyChanged("ID");
				this.OnIDChanged();
			}
		}
	}
	
	[Column(Storage="_Name", DbType="NVarChar(MAX)")]
	public string Name
	{
		get
		{
			return this._Name;
		}
		set
		{
			if ((this._Name != value))
			{
				this.OnNameChanging(value);
				this.SendPropertyChanging();
				this._Name = value;
				this.SendPropertyChanged("Name");
				this.OnNameChanged();
			}
		}
	}
	
	[Column(Storage="_NameNoDiacritics", DbType="NVarChar(MAX)")]
	public string NameNoDiacritics
	{
		get
		{
			return this._NameNoDiacritics;
		}
		set
		{
			if ((this._NameNoDiacritics != value))
			{
				this.OnNameNoDiacriticsChanging(value);
				this.SendPropertyChanging();
				this._NameNoDiacritics = value;
				this.SendPropertyChanged("NameNoDiacritics");
				this.OnNameNoDiacriticsChanged();
			}
		}
	}
	
	[Column(Storage="_Address", DbType="NVarChar(MAX)")]
	public string Address
	{
		get
		{
			return this._Address;
		}
		set
		{
			if ((this._Address != value))
			{
				this.OnAddressChanging(value);
				this.SendPropertyChanging();
				this._Address = value;
				this.SendPropertyChanged("Address");
				this.OnAddressChanged();
			}
		}
	}
	
	[Column(Storage="_GeoID1", DbType="UniqueIdentifier")]
	public System.Nullable<System.Guid> GeoID1
	{
		get
		{
			return this._GeoID1;
		}
		set
		{
			if ((this._GeoID1 != value))
			{
				if (this._Geo1.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnGeoID1Changing(value);
				this.SendPropertyChanging();
				this._GeoID1 = value;
				this.SendPropertyChanged("GeoID1");
				this.OnGeoID1Changed();
			}
		}
	}
	
	[Column(Storage="_GeoID2", DbType="UniqueIdentifier")]
	public System.Nullable<System.Guid> GeoID2
	{
		get
		{
			return this._GeoID2;
		}
		set
		{
			if ((this._GeoID2 != value))
			{
				if (this._Geo2.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnGeoID2Changing(value);
				this.SendPropertyChanging();
				this._GeoID2 = value;
				this.SendPropertyChanged("GeoID2");
				this.OnGeoID2Changed();
			}
		}
	}
	
	[Column(Storage="_GeoID3", DbType="UniqueIdentifier")]
	public System.Nullable<System.Guid> GeoID3
	{
		get
		{
			return this._GeoID3;
		}
		set
		{
			if ((this._GeoID3 != value))
			{
				if (this._Geo3.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnGeoID3Changing(value);
				this.SendPropertyChanging();
				this._GeoID3 = value;
				this.SendPropertyChanged("GeoID3");
				this.OnGeoID3Changed();
			}
		}
	}
	
	[Column(Storage="_Note", DbType="NVarChar(MAX)")]
	public string Note
	{
		get
		{
			return this._Note;
		}
		set
		{
			if ((this._Note != value))
			{
				this.OnNoteChanging(value);
				this.SendPropertyChanging();
				this._Note = value;
				this.SendPropertyChanged("Note");
				this.OnNoteChanged();
			}
		}
	}
	
	[Column(Storage="_Type", DbType="Int")]
	public System.Nullable<int> Type
	{
		get
		{
			return this._Type;
		}
		set
		{
			if ((this._Type != value))
			{
				this.OnTypeChanging(value);
				this.SendPropertyChanging();
				this._Type = value;
				this.SendPropertyChanged("Type");
				this.OnTypeChanged();
			}
		}
	}
	
	[Association(Name="Org_Campaign", Storage="_CampaignsByCoopOrg", ThisKey="ID", OtherKey="CoopOrgID")]
	public EntitySet<Campaign> CampaignsByCoopOrg
	{
		get
		{
			return this._CampaignsByCoopOrg;
		}
		set
		{
			this._CampaignsByCoopOrg.Assign(value);
		}
	}
	
	[Association(Name="Org_Campaign1", Storage="_CampaignsByHostOrg", ThisKey="ID", OtherKey="HostOrgID")]
	public EntitySet<Campaign> CampaignsByHostOrg
	{
		get
		{
			return this._CampaignsByHostOrg;
		}
		set
		{
			this._CampaignsByHostOrg.Assign(value);
		}
	}
	
	[Association(Name="Org_Order", Storage="_Orders", ThisKey="ID", OtherKey="OrgID")]
	public EntitySet<Order> Orders
	{
		get
		{
			return this._Orders;
		}
		set
		{
			this._Orders.Assign(value);
		}
	}
	
	[Association(Name="Geo_Org", Storage="_Geo1", ThisKey="GeoID1", OtherKey="ID", IsForeignKey=true)]
	public Geo Geo1
	{
		get
		{
			return this._Geo1.Entity;
		}
		set
		{
			Geo previousValue = this._Geo1.Entity;
			if (((previousValue != value) 
						|| (this._Geo1.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Geo1.Entity = null;
					previousValue.OrgsByGeo1.Remove(this);
				}
				this._Geo1.Entity = value;
				if ((value != null))
				{
					value.OrgsByGeo1.Add(this);
					this._GeoID1 = value.ID;
				}
				else
				{
					this._GeoID1 = default(Nullable<System.Guid>);
				}
				this.SendPropertyChanged("Geo1");
			}
		}
	}
	
	[Association(Name="Geo_Org1", Storage="_Geo2", ThisKey="GeoID2", OtherKey="ID", IsForeignKey=true)]
	public Geo Geo2
	{
		get
		{
			return this._Geo2.Entity;
		}
		set
		{
			Geo previousValue = this._Geo2.Entity;
			if (((previousValue != value) 
						|| (this._Geo2.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Geo2.Entity = null;
					previousValue.OrgsByGeo2.Remove(this);
				}
				this._Geo2.Entity = value;
				if ((value != null))
				{
					value.OrgsByGeo2.Add(this);
					this._GeoID2 = value.ID;
				}
				else
				{
					this._GeoID2 = default(Nullable<System.Guid>);
				}
				this.SendPropertyChanged("Geo2");
			}
		}
	}
	
	[Association(Name="Geo_Org2", Storage="_Geo3", ThisKey="GeoID3", OtherKey="ID", IsForeignKey=true)]
	public Geo Geo3
	{
		get
		{
			return this._Geo3.Entity;
		}
		set
		{
			Geo previousValue = this._Geo3.Entity;
			if (((previousValue != value) 
						|| (this._Geo3.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Geo3.Entity = null;
					previousValue.OrgsByGeo3.Remove(this);
				}
				this._Geo3.Entity = value;
				if ((value != null))
				{
					value.OrgsByGeo3.Add(this);
					this._GeoID3 = value.ID;
				}
				else
				{
					this._GeoID3 = default(Nullable<System.Guid>);
				}
				this.SendPropertyChanged("Geo3");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_CampaignsByCoopOrg(Campaign entity)
	{
		this.SendPropertyChanging();
		entity.CoopOrg = this;
	}
	
	private void detach_CampaignsByCoopOrg(Campaign entity)
	{
		this.SendPropertyChanging();
		entity.CoopOrg = null;
	}
	
	private void attach_CampaignsByHostOrg(Campaign entity)
	{
		this.SendPropertyChanging();
		entity.HostOrg = this;
	}
	
	private void detach_CampaignsByHostOrg(Campaign entity)
	{
		this.SendPropertyChanging();
		entity.HostOrg = null;
	}
	
	private void attach_Orders(Order entity)
	{
		this.SendPropertyChanging();
		entity.Org = this;
	}
	
	private void detach_Orders(Order entity)
	{
		this.SendPropertyChanging();
		entity.Org = null;
	}
}

[Table(Name="dbo.Campaign")]
public partial class Campaign : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _ID;
	
	private string _Name;
	
	private System.Nullable<System.DateTime> _Date;
	
	private string _Note;
	
	private string _ContactName;
	
	private string _ContactPhone;
	
	private string _ContactTitle;
	
	private System.Nullable<int> _SourceID;
	
	private Campaign.StatusX _Status;
	
	private System.Nullable<int> _Est;
	
	private System.Nullable<int> _CoopOrgID;
	
	private System.Nullable<int> _HostOrgID;
	
	private string _NameNoDiacritics;
	
	private Campaign.TypeX _Type;
	
	private EntitySet<CampaignStatusHistory> _CampaignStatusHistories;
	
	private EntitySet<Donation> _Donations;
	
	private EntityRef<Org> _CoopOrg;
	
	private EntityRef<Org> _HostOrg;
	
	private EntityRef<TestDef> _Source;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnDateChanging(System.Nullable<System.DateTime> value);
    partial void OnDateChanged();
    partial void OnNoteChanging(string value);
    partial void OnNoteChanged();
    partial void OnContactNameChanging(string value);
    partial void OnContactNameChanged();
    partial void OnContactPhoneChanging(string value);
    partial void OnContactPhoneChanged();
    partial void OnContactTitleChanging(string value);
    partial void OnContactTitleChanged();
    partial void OnSourceIDChanging(System.Nullable<int> value);
    partial void OnSourceIDChanged();
    partial void OnStatusChanging(Campaign.StatusX value);
    partial void OnStatusChanged();
    partial void OnEstChanging(System.Nullable<int> value);
    partial void OnEstChanged();
    partial void OnCoopOrgIDChanging(System.Nullable<int> value);
    partial void OnCoopOrgIDChanged();
    partial void OnHostOrgIDChanging(System.Nullable<int> value);
    partial void OnHostOrgIDChanged();
    partial void OnNameNoDiacriticsChanging(string value);
    partial void OnNameNoDiacriticsChanged();
    partial void OnTypeChanging(Campaign.TypeX value);
    partial void OnTypeChanged();
    #endregion
	
	public Campaign()
	{
		this._CampaignStatusHistories = new EntitySet<CampaignStatusHistory>(new Action<CampaignStatusHistory>(this.attach_CampaignStatusHistories), new Action<CampaignStatusHistory>(this.detach_CampaignStatusHistories));
		this._Donations = new EntitySet<Donation>(new Action<Donation>(this.attach_Donations), new Action<Donation>(this.detach_Donations));
		this._CoopOrg = default(EntityRef<Org>);
		this._HostOrg = default(EntityRef<Org>);
		this._Source = default(EntityRef<TestDef>);
		OnCreated();
	}
	
	[Column(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int ID
	{
		get
		{
			return this._ID;
		}
		set
		{
			if ((this._ID != value))
			{
				this.OnIDChanging(value);
				this.SendPropertyChanging();
				this._ID = value;
				this.SendPropertyChanged("ID");
				this.OnIDChanged();
			}
		}
	}
	
	[Column(Storage="_Name", DbType="NVarChar(MAX)")]
	public string Name
	{
		get
		{
			return this._Name;
		}
		set
		{
			if ((this._Name != value))
			{
				this.OnNameChanging(value);
				this.SendPropertyChanging();
				this._Name = value;
				this.SendPropertyChanged("Name");
				this.OnNameChanged();
			}
		}
	}
	
	[Column(Storage="_Date", DbType="DateTime")]
	public System.Nullable<System.DateTime> Date
	{
		get
		{
			return this._Date;
		}
		set
		{
			if ((this._Date != value))
			{
				this.OnDateChanging(value);
				this.SendPropertyChanging();
				this._Date = value;
				this.SendPropertyChanged("Date");
				this.OnDateChanged();
			}
		}
	}
	
	[Column(Storage="_Note", DbType="NVarChar(MAX)")]
	public string Note
	{
		get
		{
			return this._Note;
		}
		set
		{
			if ((this._Note != value))
			{
				this.OnNoteChanging(value);
				this.SendPropertyChanging();
				this._Note = value;
				this.SendPropertyChanged("Note");
				this.OnNoteChanged();
			}
		}
	}
	
	[Column(Storage="_ContactName", DbType="NVarChar(MAX)")]
	public string ContactName
	{
		get
		{
			return this._ContactName;
		}
		set
		{
			if ((this._ContactName != value))
			{
				this.OnContactNameChanging(value);
				this.SendPropertyChanging();
				this._ContactName = value;
				this.SendPropertyChanged("ContactName");
				this.OnContactNameChanged();
			}
		}
	}
	
	[Column(Storage="_ContactPhone", DbType="NVarChar(MAX)")]
	public string ContactPhone
	{
		get
		{
			return this._ContactPhone;
		}
		set
		{
			if ((this._ContactPhone != value))
			{
				this.OnContactPhoneChanging(value);
				this.SendPropertyChanging();
				this._ContactPhone = value;
				this.SendPropertyChanged("ContactPhone");
				this.OnContactPhoneChanged();
			}
		}
	}
	
	[Column(Storage="_ContactTitle", DbType="NVarChar(MAX)")]
	public string ContactTitle
	{
		get
		{
			return this._ContactTitle;
		}
		set
		{
			if ((this._ContactTitle != value))
			{
				this.OnContactTitleChanging(value);
				this.SendPropertyChanging();
				this._ContactTitle = value;
				this.SendPropertyChanged("ContactTitle");
				this.OnContactTitleChanged();
			}
		}
	}
	
	[Column(Storage="_SourceID", DbType="Int")]
	public System.Nullable<int> SourceID
	{
		get
		{
			return this._SourceID;
		}
		set
		{
			if ((this._SourceID != value))
			{
				if (this._Source.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnSourceIDChanging(value);
				this.SendPropertyChanging();
				this._SourceID = value;
				this.SendPropertyChanged("SourceID");
				this.OnSourceIDChanged();
			}
		}
	}
	
	[Column(Storage="_Status", DbType="Int", CanBeNull=true)]
	public Campaign.StatusX Status
	{
		get
		{
			return this._Status;
		}
		set
		{
			if ((this._Status != value))
			{
				this.OnStatusChanging(value);
				this.SendPropertyChanging();
				this._Status = value;
				this.SendPropertyChanged("Status");
				this.OnStatusChanged();
			}
		}
	}
	
	[Column(Storage="_Est", DbType="Int")]
	public System.Nullable<int> Est
	{
		get
		{
			return this._Est;
		}
		set
		{
			if ((this._Est != value))
			{
				this.OnEstChanging(value);
				this.SendPropertyChanging();
				this._Est = value;
				this.SendPropertyChanged("Est");
				this.OnEstChanged();
			}
		}
	}
	
	[Column(Storage="_CoopOrgID", DbType="Int")]
	public System.Nullable<int> CoopOrgID
	{
		get
		{
			return this._CoopOrgID;
		}
		set
		{
			if ((this._CoopOrgID != value))
			{
				if (this._CoopOrg.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnCoopOrgIDChanging(value);
				this.SendPropertyChanging();
				this._CoopOrgID = value;
				this.SendPropertyChanged("CoopOrgID");
				this.OnCoopOrgIDChanged();
			}
		}
	}
	
	[Column(Storage="_HostOrgID", DbType="Int")]
	public System.Nullable<int> HostOrgID
	{
		get
		{
			return this._HostOrgID;
		}
		set
		{
			if ((this._HostOrgID != value))
			{
				if (this._HostOrg.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnHostOrgIDChanging(value);
				this.SendPropertyChanging();
				this._HostOrgID = value;
				this.SendPropertyChanged("HostOrgID");
				this.OnHostOrgIDChanged();
			}
		}
	}
	
	[Column(Storage="_NameNoDiacritics", DbType="NVarChar(MAX)")]
	public string NameNoDiacritics
	{
		get
		{
			return this._NameNoDiacritics;
		}
		set
		{
			if ((this._NameNoDiacritics != value))
			{
				this.OnNameNoDiacriticsChanging(value);
				this.SendPropertyChanging();
				this._NameNoDiacritics = value;
				this.SendPropertyChanged("NameNoDiacritics");
				this.OnNameNoDiacriticsChanged();
			}
		}
	}
	
	[Column(Storage="_Type", DbType="Int", CanBeNull=true)]
	public Campaign.TypeX Type
	{
		get
		{
			return this._Type;
		}
		set
		{
			if ((this._Type != value))
			{
				this.OnTypeChanging(value);
				this.SendPropertyChanging();
				this._Type = value;
				this.SendPropertyChanged("Type");
				this.OnTypeChanged();
			}
		}
	}
	
	[Association(Name="Campaign_CampaignStatusHistory", Storage="_CampaignStatusHistories", ThisKey="ID", OtherKey="CampaignID")]
	public EntitySet<CampaignStatusHistory> CampaignStatusHistories
	{
		get
		{
			return this._CampaignStatusHistories;
		}
		set
		{
			this._CampaignStatusHistories.Assign(value);
		}
	}
	
	[Association(Name="Campaign_Donation", Storage="_Donations", ThisKey="ID", OtherKey="CampaignID")]
	public EntitySet<Donation> Donations
	{
		get
		{
			return this._Donations;
		}
		set
		{
			this._Donations.Assign(value);
		}
	}
	
	[Association(Name="Org_Campaign", Storage="_CoopOrg", ThisKey="CoopOrgID", OtherKey="ID", IsForeignKey=true)]
	public Org CoopOrg
	{
		get
		{
			return this._CoopOrg.Entity;
		}
		set
		{
			Org previousValue = this._CoopOrg.Entity;
			if (((previousValue != value) 
						|| (this._CoopOrg.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._CoopOrg.Entity = null;
					previousValue.CampaignsByCoopOrg.Remove(this);
				}
				this._CoopOrg.Entity = value;
				if ((value != null))
				{
					value.CampaignsByCoopOrg.Add(this);
					this._CoopOrgID = value.ID;
				}
				else
				{
					this._CoopOrgID = default(Nullable<int>);
				}
				this.SendPropertyChanged("CoopOrg");
			}
		}
	}
	
	[Association(Name="Org_Campaign1", Storage="_HostOrg", ThisKey="HostOrgID", OtherKey="ID", IsForeignKey=true)]
	public Org HostOrg
	{
		get
		{
			return this._HostOrg.Entity;
		}
		set
		{
			Org previousValue = this._HostOrg.Entity;
			if (((previousValue != value) 
						|| (this._HostOrg.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._HostOrg.Entity = null;
					previousValue.CampaignsByHostOrg.Remove(this);
				}
				this._HostOrg.Entity = value;
				if ((value != null))
				{
					value.CampaignsByHostOrg.Add(this);
					this._HostOrgID = value.ID;
				}
				else
				{
					this._HostOrgID = default(Nullable<int>);
				}
				this.SendPropertyChanged("HostOrg");
			}
		}
	}
	
	[Association(Name="TestDef_Campaign", Storage="_Source", ThisKey="SourceID", OtherKey="ID", IsForeignKey=true)]
	public TestDef Source
	{
		get
		{
			return this._Source.Entity;
		}
		set
		{
			TestDef previousValue = this._Source.Entity;
			if (((previousValue != value) 
						|| (this._Source.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Source.Entity = null;
					previousValue.CampaignsBySource.Remove(this);
				}
				this._Source.Entity = value;
				if ((value != null))
				{
					value.CampaignsBySource.Add(this);
					this._SourceID = value.ID;
				}
				else
				{
					this._SourceID = default(Nullable<int>);
				}
				this.SendPropertyChanged("Source");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_CampaignStatusHistories(CampaignStatusHistory entity)
	{
		this.SendPropertyChanging();
		entity.Campaign = this;
	}
	
	private void detach_CampaignStatusHistories(CampaignStatusHistory entity)
	{
		this.SendPropertyChanging();
		entity.Campaign = null;
	}
	
	private void attach_Donations(Donation entity)
	{
		this.SendPropertyChanging();
		entity.Campaign = this;
	}
	
	private void detach_Donations(Donation entity)
	{
		this.SendPropertyChanging();
		entity.Campaign = null;
	}
}

[Table(Name="dbo.CampaignStatusHistory")]
public partial class CampaignStatusHistory : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _ID;
	
	private System.Nullable<int> _CampaignID;
	
	private Campaign.StatusX _FromStatus;
	
	private Campaign.StatusX _ToStatus;
	
	private string _Actor;
	
	private System.Nullable<System.DateTime> _Date;
	
	private string _Note;
	
	private EntityRef<Campaign> _Campaign;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnCampaignIDChanging(System.Nullable<int> value);
    partial void OnCampaignIDChanged();
    partial void OnFromStatusChanging(Campaign.StatusX value);
    partial void OnFromStatusChanged();
    partial void OnToStatusChanging(Campaign.StatusX value);
    partial void OnToStatusChanged();
    partial void OnActorChanging(string value);
    partial void OnActorChanged();
    partial void OnDateChanging(System.Nullable<System.DateTime> value);
    partial void OnDateChanged();
    partial void OnNoteChanging(string value);
    partial void OnNoteChanged();
    #endregion
	
	public CampaignStatusHistory()
	{
		this._Campaign = default(EntityRef<Campaign>);
		OnCreated();
	}
	
	[Column(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int ID
	{
		get
		{
			return this._ID;
		}
		set
		{
			if ((this._ID != value))
			{
				this.OnIDChanging(value);
				this.SendPropertyChanging();
				this._ID = value;
				this.SendPropertyChanged("ID");
				this.OnIDChanged();
			}
		}
	}
	
	[Column(Storage="_CampaignID", DbType="Int")]
	public System.Nullable<int> CampaignID
	{
		get
		{
			return this._CampaignID;
		}
		set
		{
			if ((this._CampaignID != value))
			{
				if (this._Campaign.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnCampaignIDChanging(value);
				this.SendPropertyChanging();
				this._CampaignID = value;
				this.SendPropertyChanged("CampaignID");
				this.OnCampaignIDChanged();
			}
		}
	}
	
	[Column(Storage="_FromStatus", DbType="Int", CanBeNull=true)]
	public Campaign.StatusX FromStatus
	{
		get
		{
			return this._FromStatus;
		}
		set
		{
			if ((this._FromStatus != value))
			{
				this.OnFromStatusChanging(value);
				this.SendPropertyChanging();
				this._FromStatus = value;
				this.SendPropertyChanged("FromStatus");
				this.OnFromStatusChanged();
			}
		}
	}
	
	[Column(Storage="_ToStatus", DbType="Int", CanBeNull=true)]
	public Campaign.StatusX ToStatus
	{
		get
		{
			return this._ToStatus;
		}
		set
		{
			if ((this._ToStatus != value))
			{
				this.OnToStatusChanging(value);
				this.SendPropertyChanging();
				this._ToStatus = value;
				this.SendPropertyChanged("ToStatus");
				this.OnToStatusChanged();
			}
		}
	}
	
	[Column(Storage="_Actor", DbType="NVarChar(MAX)")]
	public string Actor
	{
		get
		{
			return this._Actor;
		}
		set
		{
			if ((this._Actor != value))
			{
				this.OnActorChanging(value);
				this.SendPropertyChanging();
				this._Actor = value;
				this.SendPropertyChanged("Actor");
				this.OnActorChanged();
			}
		}
	}
	
	[Column(Storage="_Date", DbType="DateTime")]
	public System.Nullable<System.DateTime> Date
	{
		get
		{
			return this._Date;
		}
		set
		{
			if ((this._Date != value))
			{
				this.OnDateChanging(value);
				this.SendPropertyChanging();
				this._Date = value;
				this.SendPropertyChanged("Date");
				this.OnDateChanged();
			}
		}
	}
	
	[Column(Storage="_Note", DbType="NVarChar(MAX)")]
	public string Note
	{
		get
		{
			return this._Note;
		}
		set
		{
			if ((this._Note != value))
			{
				this.OnNoteChanging(value);
				this.SendPropertyChanging();
				this._Note = value;
				this.SendPropertyChanged("Note");
				this.OnNoteChanged();
			}
		}
	}
	
	[Association(Name="Campaign_CampaignStatusHistory", Storage="_Campaign", ThisKey="CampaignID", OtherKey="ID", IsForeignKey=true)]
	public Campaign Campaign
	{
		get
		{
			return this._Campaign.Entity;
		}
		set
		{
			Campaign previousValue = this._Campaign.Entity;
			if (((previousValue != value) 
						|| (this._Campaign.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Campaign.Entity = null;
					previousValue.CampaignStatusHistories.Remove(this);
				}
				this._Campaign.Entity = value;
				if ((value != null))
				{
					value.CampaignStatusHistories.Add(this);
					this._CampaignID = value.ID;
				}
				else
				{
					this._CampaignID = default(Nullable<int>);
				}
				this.SendPropertyChanged("Campaign");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}

[Table(Name="dbo.Excel")]
public partial class Excel : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private string _STT;
	
	private string _MSTM;
	
	private string _MSNH;
	
	private string _HoVaTen;
	
	private string _DOB;
	
	private string _ABO;
	
	private string _RH;
	
	private string _HIV;
	
	private string _HBsAg;
	
	private string _HCV;
	
	private string _Syphilis;
	
	private string _Malaria;
	
	private string _Address;
	
	private string _Ward;
	
	private string _District;
	
	private string _Province;
	
	private int _ID;
	
	private System.Nullable<int> _CampaignID;
	
	private System.Nullable<int> _Imported;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnSTTChanging(string value);
    partial void OnSTTChanged();
    partial void OnMSTMChanging(string value);
    partial void OnMSTMChanged();
    partial void OnMSNHChanging(string value);
    partial void OnMSNHChanged();
    partial void OnHoVaTenChanging(string value);
    partial void OnHoVaTenChanged();
    partial void OnDOBChanging(string value);
    partial void OnDOBChanged();
    partial void OnABOChanging(string value);
    partial void OnABOChanged();
    partial void OnRHChanging(string value);
    partial void OnRHChanged();
    partial void OnHIVChanging(string value);
    partial void OnHIVChanged();
    partial void OnHBsAgChanging(string value);
    partial void OnHBsAgChanged();
    partial void OnHCVChanging(string value);
    partial void OnHCVChanged();
    partial void OnSyphilisChanging(string value);
    partial void OnSyphilisChanged();
    partial void OnMalariaChanging(string value);
    partial void OnMalariaChanged();
    partial void OnAddressChanging(string value);
    partial void OnAddressChanged();
    partial void OnWardChanging(string value);
    partial void OnWardChanged();
    partial void OnDistrictChanging(string value);
    partial void OnDistrictChanged();
    partial void OnProvinceChanging(string value);
    partial void OnProvinceChanged();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnCampaignIDChanging(System.Nullable<int> value);
    partial void OnCampaignIDChanged();
    partial void OnImportedChanging(System.Nullable<int> value);
    partial void OnImportedChanged();
    #endregion
	
	public Excel()
	{
		OnCreated();
	}
	
	[Column(Storage="_STT", DbType="NVarChar(MAX)")]
	public string STT
	{
		get
		{
			return this._STT;
		}
		set
		{
			if ((this._STT != value))
			{
				this.OnSTTChanging(value);
				this.SendPropertyChanging();
				this._STT = value;
				this.SendPropertyChanged("STT");
				this.OnSTTChanged();
			}
		}
	}
	
	[Column(Storage="_MSTM", DbType="NVarChar(MAX)")]
	public string MSTM
	{
		get
		{
			return this._MSTM;
		}
		set
		{
			if ((this._MSTM != value))
			{
				this.OnMSTMChanging(value);
				this.SendPropertyChanging();
				this._MSTM = value;
				this.SendPropertyChanged("MSTM");
				this.OnMSTMChanged();
			}
		}
	}
	
	[Column(Storage="_MSNH", DbType="NVarChar(MAX)")]
	public string MSNH
	{
		get
		{
			return this._MSNH;
		}
		set
		{
			if ((this._MSNH != value))
			{
				this.OnMSNHChanging(value);
				this.SendPropertyChanging();
				this._MSNH = value;
				this.SendPropertyChanged("MSNH");
				this.OnMSNHChanged();
			}
		}
	}
	
	[Column(Storage="_HoVaTen", DbType="NVarChar(MAX)")]
	public string HoVaTen
	{
		get
		{
			return this._HoVaTen;
		}
		set
		{
			if ((this._HoVaTen != value))
			{
				this.OnHoVaTenChanging(value);
				this.SendPropertyChanging();
				this._HoVaTen = value;
				this.SendPropertyChanged("HoVaTen");
				this.OnHoVaTenChanged();
			}
		}
	}
	
	[Column(Storage="_DOB", DbType="NVarChar(MAX)")]
	public string DOB
	{
		get
		{
			return this._DOB;
		}
		set
		{
			if ((this._DOB != value))
			{
				this.OnDOBChanging(value);
				this.SendPropertyChanging();
				this._DOB = value;
				this.SendPropertyChanged("DOB");
				this.OnDOBChanged();
			}
		}
	}
	
	[Column(Storage="_ABO", DbType="NVarChar(MAX)")]
	public string ABO
	{
		get
		{
			return this._ABO;
		}
		set
		{
			if ((this._ABO != value))
			{
				this.OnABOChanging(value);
				this.SendPropertyChanging();
				this._ABO = value;
				this.SendPropertyChanged("ABO");
				this.OnABOChanged();
			}
		}
	}
	
	[Column(Storage="_RH", DbType="NVarChar(MAX)")]
	public string RH
	{
		get
		{
			return this._RH;
		}
		set
		{
			if ((this._RH != value))
			{
				this.OnRHChanging(value);
				this.SendPropertyChanging();
				this._RH = value;
				this.SendPropertyChanged("RH");
				this.OnRHChanged();
			}
		}
	}
	
	[Column(Storage="_HIV", DbType="NVarChar(MAX)")]
	public string HIV
	{
		get
		{
			return this._HIV;
		}
		set
		{
			if ((this._HIV != value))
			{
				this.OnHIVChanging(value);
				this.SendPropertyChanging();
				this._HIV = value;
				this.SendPropertyChanged("HIV");
				this.OnHIVChanged();
			}
		}
	}
	
	[Column(Storage="_HBsAg", DbType="NVarChar(MAX)")]
	public string HBsAg
	{
		get
		{
			return this._HBsAg;
		}
		set
		{
			if ((this._HBsAg != value))
			{
				this.OnHBsAgChanging(value);
				this.SendPropertyChanging();
				this._HBsAg = value;
				this.SendPropertyChanged("HBsAg");
				this.OnHBsAgChanged();
			}
		}
	}
	
	[Column(Storage="_HCV", DbType="NVarChar(MAX)")]
	public string HCV
	{
		get
		{
			return this._HCV;
		}
		set
		{
			if ((this._HCV != value))
			{
				this.OnHCVChanging(value);
				this.SendPropertyChanging();
				this._HCV = value;
				this.SendPropertyChanged("HCV");
				this.OnHCVChanged();
			}
		}
	}
	
	[Column(Storage="_Syphilis", DbType="NVarChar(MAX)")]
	public string Syphilis
	{
		get
		{
			return this._Syphilis;
		}
		set
		{
			if ((this._Syphilis != value))
			{
				this.OnSyphilisChanging(value);
				this.SendPropertyChanging();
				this._Syphilis = value;
				this.SendPropertyChanged("Syphilis");
				this.OnSyphilisChanged();
			}
		}
	}
	
	[Column(Storage="_Malaria", DbType="NVarChar(MAX)")]
	public string Malaria
	{
		get
		{
			return this._Malaria;
		}
		set
		{
			if ((this._Malaria != value))
			{
				this.OnMalariaChanging(value);
				this.SendPropertyChanging();
				this._Malaria = value;
				this.SendPropertyChanged("Malaria");
				this.OnMalariaChanged();
			}
		}
	}
	
	[Column(Storage="_Address", DbType="NVarChar(MAX)")]
	public string Address
	{
		get
		{
			return this._Address;
		}
		set
		{
			if ((this._Address != value))
			{
				this.OnAddressChanging(value);
				this.SendPropertyChanging();
				this._Address = value;
				this.SendPropertyChanged("Address");
				this.OnAddressChanged();
			}
		}
	}
	
	[Column(Storage="_Ward", DbType="NVarChar(MAX)")]
	public string Ward
	{
		get
		{
			return this._Ward;
		}
		set
		{
			if ((this._Ward != value))
			{
				this.OnWardChanging(value);
				this.SendPropertyChanging();
				this._Ward = value;
				this.SendPropertyChanged("Ward");
				this.OnWardChanged();
			}
		}
	}
	
	[Column(Storage="_District", DbType="NVarChar(MAX)")]
	public string District
	{
		get
		{
			return this._District;
		}
		set
		{
			if ((this._District != value))
			{
				this.OnDistrictChanging(value);
				this.SendPropertyChanging();
				this._District = value;
				this.SendPropertyChanged("District");
				this.OnDistrictChanged();
			}
		}
	}
	
	[Column(Storage="_Province", DbType="NVarChar(MAX)")]
	public string Province
	{
		get
		{
			return this._Province;
		}
		set
		{
			if ((this._Province != value))
			{
				this.OnProvinceChanging(value);
				this.SendPropertyChanging();
				this._Province = value;
				this.SendPropertyChanged("Province");
				this.OnProvinceChanged();
			}
		}
	}
	
	[Column(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int ID
	{
		get
		{
			return this._ID;
		}
		set
		{
			if ((this._ID != value))
			{
				this.OnIDChanging(value);
				this.SendPropertyChanging();
				this._ID = value;
				this.SendPropertyChanged("ID");
				this.OnIDChanged();
			}
		}
	}
	
	[Column(Storage="_CampaignID", DbType="Int")]
	public System.Nullable<int> CampaignID
	{
		get
		{
			return this._CampaignID;
		}
		set
		{
			if ((this._CampaignID != value))
			{
				this.OnCampaignIDChanging(value);
				this.SendPropertyChanging();
				this._CampaignID = value;
				this.SendPropertyChanged("CampaignID");
				this.OnCampaignIDChanged();
			}
		}
	}
	
	[Column(Storage="_Imported", DbType="Int")]
	public System.Nullable<int> Imported
	{
		get
		{
			return this._Imported;
		}
		set
		{
			if ((this._Imported != value))
			{
				this.OnImportedChanging(value);
				this.SendPropertyChanging();
				this._Imported = value;
				this.SendPropertyChanged("Imported");
				this.OnImportedChanged();
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}

[Table(Name="dbo.SideEffect")]
public partial class SideEffect : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private System.Guid _ID;
	
	private string _Name;
	
	private System.Nullable<System.Guid> _ParentID;
	
	private System.Nullable<int> _Level;
	
	private string _Fullname;
	
	private string _FullnameNoDiacritics;
	
	private EntitySet<SideEffect> _SideEffects;
	
	private EntitySet<PackSideEffect> _PackSideEffects1;
	
	private EntitySet<PackSideEffect> _PackSideEffects2;
	
	private EntitySet<PackSideEffect> _PackSideEffects3;
	
	private EntityRef<SideEffect> _SideEffect1;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(System.Guid value);
    partial void OnIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnParentIDChanging(System.Nullable<System.Guid> value);
    partial void OnParentIDChanged();
    partial void OnLevelChanging(System.Nullable<int> value);
    partial void OnLevelChanged();
    partial void OnFullnameChanging(string value);
    partial void OnFullnameChanged();
    partial void OnFullnameNoDiacriticsChanging(string value);
    partial void OnFullnameNoDiacriticsChanged();
    #endregion
	
	public SideEffect()
	{
		this._SideEffects = new EntitySet<SideEffect>(new Action<SideEffect>(this.attach_SideEffects), new Action<SideEffect>(this.detach_SideEffects));
		this._PackSideEffects1 = new EntitySet<PackSideEffect>(new Action<PackSideEffect>(this.attach_PackSideEffects1), new Action<PackSideEffect>(this.detach_PackSideEffects1));
		this._PackSideEffects2 = new EntitySet<PackSideEffect>(new Action<PackSideEffect>(this.attach_PackSideEffects2), new Action<PackSideEffect>(this.detach_PackSideEffects2));
		this._PackSideEffects3 = new EntitySet<PackSideEffect>(new Action<PackSideEffect>(this.attach_PackSideEffects3), new Action<PackSideEffect>(this.detach_PackSideEffects3));
		this._SideEffect1 = default(EntityRef<SideEffect>);
		OnCreated();
	}
	
	[Column(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true, IsDbGenerated=true)]
	public System.Guid ID
	{
		get
		{
			return this._ID;
		}
		set
		{
			if ((this._ID != value))
			{
				this.OnIDChanging(value);
				this.SendPropertyChanging();
				this._ID = value;
				this.SendPropertyChanged("ID");
				this.OnIDChanged();
			}
		}
	}
	
	[Column(Storage="_Name", DbType="NVarChar(MAX)")]
	public string Name
	{
		get
		{
			return this._Name;
		}
		set
		{
			if ((this._Name != value))
			{
				this.OnNameChanging(value);
				this.SendPropertyChanging();
				this._Name = value;
				this.SendPropertyChanged("Name");
				this.OnNameChanged();
			}
		}
	}
	
	[Column(Storage="_ParentID", DbType="UniqueIdentifier")]
	public System.Nullable<System.Guid> ParentID
	{
		get
		{
			return this._ParentID;
		}
		set
		{
			if ((this._ParentID != value))
			{
				if (this._SideEffect1.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnParentIDChanging(value);
				this.SendPropertyChanging();
				this._ParentID = value;
				this.SendPropertyChanged("ParentID");
				this.OnParentIDChanged();
			}
		}
	}
	
	[Column(Name="[Level]", Storage="_Level", DbType="Int")]
	public System.Nullable<int> Level
	{
		get
		{
			return this._Level;
		}
		set
		{
			if ((this._Level != value))
			{
				this.OnLevelChanging(value);
				this.SendPropertyChanging();
				this._Level = value;
				this.SendPropertyChanged("Level");
				this.OnLevelChanged();
			}
		}
	}
	
	[Column(Storage="_Fullname", DbType="NVarChar(MAX)")]
	public string Fullname
	{
		get
		{
			return this._Fullname;
		}
		set
		{
			if ((this._Fullname != value))
			{
				this.OnFullnameChanging(value);
				this.SendPropertyChanging();
				this._Fullname = value;
				this.SendPropertyChanged("Fullname");
				this.OnFullnameChanged();
			}
		}
	}
	
	[Column(Storage="_FullnameNoDiacritics", DbType="NVarChar(MAX)")]
	public string FullnameNoDiacritics
	{
		get
		{
			return this._FullnameNoDiacritics;
		}
		set
		{
			if ((this._FullnameNoDiacritics != value))
			{
				this.OnFullnameNoDiacriticsChanging(value);
				this.SendPropertyChanging();
				this._FullnameNoDiacritics = value;
				this.SendPropertyChanged("FullnameNoDiacritics");
				this.OnFullnameNoDiacriticsChanged();
			}
		}
	}
	
	[Association(Name="SideEffect_SideEffect", Storage="_SideEffects", ThisKey="ID", OtherKey="ParentID")]
	public EntitySet<SideEffect> ChildSideEffects
	{
		get
		{
			return this._SideEffects;
		}
		set
		{
			this._SideEffects.Assign(value);
		}
	}
	
	[Association(Name="SideEffect_PackSideEffect", Storage="_PackSideEffects1", ThisKey="ID", OtherKey="SideEffectID1")]
	public EntitySet<PackSideEffect> PackSideEffects1
	{
		get
		{
			return this._PackSideEffects1;
		}
		set
		{
			this._PackSideEffects1.Assign(value);
		}
	}
	
	[Association(Name="SideEffect_PackSideEffect1", Storage="_PackSideEffects2", ThisKey="ID", OtherKey="SideEffectID2")]
	public EntitySet<PackSideEffect> PackSideEffects2
	{
		get
		{
			return this._PackSideEffects2;
		}
		set
		{
			this._PackSideEffects2.Assign(value);
		}
	}
	
	[Association(Name="SideEffect_PackSideEffect2", Storage="_PackSideEffects3", ThisKey="ID", OtherKey="SideEffectID3")]
	public EntitySet<PackSideEffect> PackSideEffects3
	{
		get
		{
			return this._PackSideEffects3;
		}
		set
		{
			this._PackSideEffects3.Assign(value);
		}
	}
	
	[Association(Name="SideEffect_SideEffect", Storage="_SideEffect1", ThisKey="ParentID", OtherKey="ID", IsForeignKey=true)]
	public SideEffect ParentSideEffect
	{
		get
		{
			return this._SideEffect1.Entity;
		}
		set
		{
			SideEffect previousValue = this._SideEffect1.Entity;
			if (((previousValue != value) 
						|| (this._SideEffect1.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._SideEffect1.Entity = null;
					previousValue.ChildSideEffects.Remove(this);
				}
				this._SideEffect1.Entity = value;
				if ((value != null))
				{
					value.ChildSideEffects.Add(this);
					this._ParentID = value.ID;
				}
				else
				{
					this._ParentID = default(Nullable<System.Guid>);
				}
				this.SendPropertyChanged("ParentSideEffect");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_SideEffects(SideEffect entity)
	{
		this.SendPropertyChanging();
		entity.ParentSideEffect = this;
	}
	
	private void detach_SideEffects(SideEffect entity)
	{
		this.SendPropertyChanging();
		entity.ParentSideEffect = null;
	}
	
	private void attach_PackSideEffects1(PackSideEffect entity)
	{
		this.SendPropertyChanging();
		entity.SideEffect1 = this;
	}
	
	private void detach_PackSideEffects1(PackSideEffect entity)
	{
		this.SendPropertyChanging();
		entity.SideEffect1 = null;
	}
	
	private void attach_PackSideEffects2(PackSideEffect entity)
	{
		this.SendPropertyChanging();
		entity.SideEffect2 = this;
	}
	
	private void detach_PackSideEffects2(PackSideEffect entity)
	{
		this.SendPropertyChanging();
		entity.SideEffect2 = null;
	}
	
	private void attach_PackSideEffects3(PackSideEffect entity)
	{
		this.SendPropertyChanging();
		entity.SideEffect3 = this;
	}
	
	private void detach_PackSideEffects3(PackSideEffect entity)
	{
		this.SendPropertyChanging();
		entity.SideEffect3 = null;
	}
}

[Table(Name="dbo.PackSideEffect")]
public partial class PackSideEffect : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _ID;
	
	private System.Nullable<System.Guid> _SideEffectID1;
	
	private System.Nullable<System.Guid> _SideEffectID2;
	
	private System.Nullable<System.Guid> _SideEffectID3;
	
	private string _Note;
	
	private System.Nullable<System.Guid> _PackID;
	
	private string _Actor;
	
	private System.Nullable<System.DateTime> _Date;
	
	private EntityRef<SideEffect> _SideEffect1;
	
	private EntityRef<SideEffect> _SideEffect2;
	
	private EntityRef<SideEffect> _SideEffect3;
	
	private EntityRef<Pack> _Pack;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnSideEffectID1Changing(System.Nullable<System.Guid> value);
    partial void OnSideEffectID1Changed();
    partial void OnSideEffectID2Changing(System.Nullable<System.Guid> value);
    partial void OnSideEffectID2Changed();
    partial void OnSideEffectID3Changing(System.Nullable<System.Guid> value);
    partial void OnSideEffectID3Changed();
    partial void OnNoteChanging(string value);
    partial void OnNoteChanged();
    partial void OnPackIDChanging(System.Nullable<System.Guid> value);
    partial void OnPackIDChanged();
    partial void OnActorChanging(string value);
    partial void OnActorChanged();
    partial void OnDateChanging(System.Nullable<System.DateTime> value);
    partial void OnDateChanged();
    #endregion
	
	public PackSideEffect()
	{
		this._SideEffect1 = default(EntityRef<SideEffect>);
		this._SideEffect2 = default(EntityRef<SideEffect>);
		this._SideEffect3 = default(EntityRef<SideEffect>);
		this._Pack = default(EntityRef<Pack>);
		OnCreated();
	}
	
	[Column(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int ID
	{
		get
		{
			return this._ID;
		}
		set
		{
			if ((this._ID != value))
			{
				this.OnIDChanging(value);
				this.SendPropertyChanging();
				this._ID = value;
				this.SendPropertyChanged("ID");
				this.OnIDChanged();
			}
		}
	}
	
	[Column(Storage="_SideEffectID1", DbType="UniqueIdentifier")]
	public System.Nullable<System.Guid> SideEffectID1
	{
		get
		{
			return this._SideEffectID1;
		}
		set
		{
			if ((this._SideEffectID1 != value))
			{
				if (this._SideEffect1.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnSideEffectID1Changing(value);
				this.SendPropertyChanging();
				this._SideEffectID1 = value;
				this.SendPropertyChanged("SideEffectID1");
				this.OnSideEffectID1Changed();
			}
		}
	}
	
	[Column(Storage="_SideEffectID2", DbType="UniqueIdentifier")]
	public System.Nullable<System.Guid> SideEffectID2
	{
		get
		{
			return this._SideEffectID2;
		}
		set
		{
			if ((this._SideEffectID2 != value))
			{
				if (this._SideEffect2.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnSideEffectID2Changing(value);
				this.SendPropertyChanging();
				this._SideEffectID2 = value;
				this.SendPropertyChanged("SideEffectID2");
				this.OnSideEffectID2Changed();
			}
		}
	}
	
	[Column(Storage="_SideEffectID3", DbType="UniqueIdentifier")]
	public System.Nullable<System.Guid> SideEffectID3
	{
		get
		{
			return this._SideEffectID3;
		}
		set
		{
			if ((this._SideEffectID3 != value))
			{
				if (this._SideEffect3.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnSideEffectID3Changing(value);
				this.SendPropertyChanging();
				this._SideEffectID3 = value;
				this.SendPropertyChanged("SideEffectID3");
				this.OnSideEffectID3Changed();
			}
		}
	}
	
	[Column(Storage="_Note", DbType="NVarChar(MAX)")]
	public string Note
	{
		get
		{
			return this._Note;
		}
		set
		{
			if ((this._Note != value))
			{
				this.OnNoteChanging(value);
				this.SendPropertyChanging();
				this._Note = value;
				this.SendPropertyChanged("Note");
				this.OnNoteChanged();
			}
		}
	}
	
	[Column(Storage="_PackID", DbType="UniqueIdentifier")]
	public System.Nullable<System.Guid> PackID
	{
		get
		{
			return this._PackID;
		}
		set
		{
			if ((this._PackID != value))
			{
				if (this._Pack.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnPackIDChanging(value);
				this.SendPropertyChanging();
				this._PackID = value;
				this.SendPropertyChanged("PackID");
				this.OnPackIDChanged();
			}
		}
	}
	
	[Column(Storage="_Actor", DbType="NVarChar(MAX)")]
	public string Actor
	{
		get
		{
			return this._Actor;
		}
		set
		{
			if ((this._Actor != value))
			{
				this.OnActorChanging(value);
				this.SendPropertyChanging();
				this._Actor = value;
				this.SendPropertyChanged("Actor");
				this.OnActorChanged();
			}
		}
	}
	
	[Column(Storage="_Date", DbType="DateTime")]
	public System.Nullable<System.DateTime> Date
	{
		get
		{
			return this._Date;
		}
		set
		{
			if ((this._Date != value))
			{
				this.OnDateChanging(value);
				this.SendPropertyChanging();
				this._Date = value;
				this.SendPropertyChanged("Date");
				this.OnDateChanged();
			}
		}
	}
	
	[Association(Name="SideEffect_PackSideEffect", Storage="_SideEffect1", ThisKey="SideEffectID1", OtherKey="ID", IsForeignKey=true)]
	public SideEffect SideEffect1
	{
		get
		{
			return this._SideEffect1.Entity;
		}
		set
		{
			SideEffect previousValue = this._SideEffect1.Entity;
			if (((previousValue != value) 
						|| (this._SideEffect1.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._SideEffect1.Entity = null;
					previousValue.PackSideEffects1.Remove(this);
				}
				this._SideEffect1.Entity = value;
				if ((value != null))
				{
					value.PackSideEffects1.Add(this);
					this._SideEffectID1 = value.ID;
				}
				else
				{
					this._SideEffectID1 = default(Nullable<System.Guid>);
				}
				this.SendPropertyChanged("SideEffect1");
			}
		}
	}
	
	[Association(Name="SideEffect_PackSideEffect1", Storage="_SideEffect2", ThisKey="SideEffectID2", OtherKey="ID", IsForeignKey=true)]
	public SideEffect SideEffect2
	{
		get
		{
			return this._SideEffect2.Entity;
		}
		set
		{
			SideEffect previousValue = this._SideEffect2.Entity;
			if (((previousValue != value) 
						|| (this._SideEffect2.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._SideEffect2.Entity = null;
					previousValue.PackSideEffects2.Remove(this);
				}
				this._SideEffect2.Entity = value;
				if ((value != null))
				{
					value.PackSideEffects2.Add(this);
					this._SideEffectID2 = value.ID;
				}
				else
				{
					this._SideEffectID2 = default(Nullable<System.Guid>);
				}
				this.SendPropertyChanged("SideEffect2");
			}
		}
	}
	
	[Association(Name="SideEffect_PackSideEffect2", Storage="_SideEffect3", ThisKey="SideEffectID3", OtherKey="ID", IsForeignKey=true)]
	public SideEffect SideEffect3
	{
		get
		{
			return this._SideEffect3.Entity;
		}
		set
		{
			SideEffect previousValue = this._SideEffect3.Entity;
			if (((previousValue != value) 
						|| (this._SideEffect3.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._SideEffect3.Entity = null;
					previousValue.PackSideEffects3.Remove(this);
				}
				this._SideEffect3.Entity = value;
				if ((value != null))
				{
					value.PackSideEffects3.Add(this);
					this._SideEffectID3 = value.ID;
				}
				else
				{
					this._SideEffectID3 = default(Nullable<System.Guid>);
				}
				this.SendPropertyChanged("SideEffect3");
			}
		}
	}
	
	[Association(Name="Pack_PackSideEffect", Storage="_Pack", ThisKey="PackID", OtherKey="ID", IsForeignKey=true)]
	public Pack Pack
	{
		get
		{
			return this._Pack.Entity;
		}
		set
		{
			Pack previousValue = this._Pack.Entity;
			if (((previousValue != value) 
						|| (this._Pack.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Pack.Entity = null;
					previousValue.PackSideEffects.Remove(this);
				}
				this._Pack.Entity = value;
				if ((value != null))
				{
					value.PackSideEffects.Add(this);
					this._PackID = value.ID;
				}
				else
				{
					this._PackID = default(Nullable<System.Guid>);
				}
				this.SendPropertyChanged("Pack");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}

[Table(Name="dbo.Department")]
public partial class Department : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private System.Guid _ID;
	
	private string _Name;
	
	private System.Nullable<System.Guid> _ParentID;
	
	private System.Nullable<int> _Level;
	
	private string _Fullname;
	
	private string _FullnameNoDiacritics;
	
	private System.Nullable<System.Guid> _HospitalID;
	
	private EntitySet<Department> _ChildDepartments;
	
	private EntitySet<Order> _OrdersByDepartment1;
	
	private EntitySet<Order> _OrdersByDepartment2;
	
	private EntitySet<Order> _OrdersByDepartment3;
	
	private EntityRef<Department> _ParentDepartment;
	
	private EntityRef<Hospital> _Hospital;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(System.Guid value);
    partial void OnIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnParentIDChanging(System.Nullable<System.Guid> value);
    partial void OnParentIDChanged();
    partial void OnLevelChanging(System.Nullable<int> value);
    partial void OnLevelChanged();
    partial void OnFullnameChanging(string value);
    partial void OnFullnameChanged();
    partial void OnFullnameNoDiacriticsChanging(string value);
    partial void OnFullnameNoDiacriticsChanged();
    partial void OnHospitalIDChanging(System.Nullable<System.Guid> value);
    partial void OnHospitalIDChanged();
    #endregion
	
	public Department()
	{
		this._ChildDepartments = new EntitySet<Department>(new Action<Department>(this.attach_ChildDepartments), new Action<Department>(this.detach_ChildDepartments));
		this._OrdersByDepartment1 = new EntitySet<Order>(new Action<Order>(this.attach_OrdersByDepartment1), new Action<Order>(this.detach_OrdersByDepartment1));
		this._OrdersByDepartment2 = new EntitySet<Order>(new Action<Order>(this.attach_OrdersByDepartment2), new Action<Order>(this.detach_OrdersByDepartment2));
		this._OrdersByDepartment3 = new EntitySet<Order>(new Action<Order>(this.attach_OrdersByDepartment3), new Action<Order>(this.detach_OrdersByDepartment3));
		this._ParentDepartment = default(EntityRef<Department>);
		this._Hospital = default(EntityRef<Hospital>);
		OnCreated();
	}
	
	[Column(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true, IsDbGenerated=true)]
	public System.Guid ID
	{
		get
		{
			return this._ID;
		}
		set
		{
			if ((this._ID != value))
			{
				this.OnIDChanging(value);
				this.SendPropertyChanging();
				this._ID = value;
				this.SendPropertyChanged("ID");
				this.OnIDChanged();
			}
		}
	}
	
	[Column(Storage="_Name", DbType="NVarChar(MAX)")]
	public string Name
	{
		get
		{
			return this._Name;
		}
		set
		{
			if ((this._Name != value))
			{
				this.OnNameChanging(value);
				this.SendPropertyChanging();
				this._Name = value;
				this.SendPropertyChanged("Name");
				this.OnNameChanged();
			}
		}
	}
	
	[Column(Storage="_ParentID", DbType="UniqueIdentifier")]
	public System.Nullable<System.Guid> ParentID
	{
		get
		{
			return this._ParentID;
		}
		set
		{
			if ((this._ParentID != value))
			{
				if (this._ParentDepartment.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnParentIDChanging(value);
				this.SendPropertyChanging();
				this._ParentID = value;
				this.SendPropertyChanged("ParentID");
				this.OnParentIDChanged();
			}
		}
	}
	
	[Column(Name="[Level]", Storage="_Level", DbType="Int")]
	public System.Nullable<int> Level
	{
		get
		{
			return this._Level;
		}
		set
		{
			if ((this._Level != value))
			{
				this.OnLevelChanging(value);
				this.SendPropertyChanging();
				this._Level = value;
				this.SendPropertyChanged("Level");
				this.OnLevelChanged();
			}
		}
	}
	
	[Column(Storage="_Fullname", DbType="NVarChar(MAX)")]
	public string Fullname
	{
		get
		{
			return this._Fullname;
		}
		set
		{
			if ((this._Fullname != value))
			{
				this.OnFullnameChanging(value);
				this.SendPropertyChanging();
				this._Fullname = value;
				this.SendPropertyChanged("Fullname");
				this.OnFullnameChanged();
			}
		}
	}
	
	[Column(Storage="_FullnameNoDiacritics", DbType="NVarChar(MAX)")]
	public string FullnameNoDiacritics
	{
		get
		{
			return this._FullnameNoDiacritics;
		}
		set
		{
			if ((this._FullnameNoDiacritics != value))
			{
				this.OnFullnameNoDiacriticsChanging(value);
				this.SendPropertyChanging();
				this._FullnameNoDiacritics = value;
				this.SendPropertyChanged("FullnameNoDiacritics");
				this.OnFullnameNoDiacriticsChanged();
			}
		}
	}
	
	[Column(Storage="_HospitalID", DbType="UniqueIdentifier")]
	public System.Nullable<System.Guid> HospitalID
	{
		get
		{
			return this._HospitalID;
		}
		set
		{
			if ((this._HospitalID != value))
			{
				if (this._Hospital.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnHospitalIDChanging(value);
				this.SendPropertyChanging();
				this._HospitalID = value;
				this.SendPropertyChanged("HospitalID");
				this.OnHospitalIDChanged();
			}
		}
	}
	
	[Association(Name="Department_Department", Storage="_ChildDepartments", ThisKey="ID", OtherKey="ParentID")]
	public EntitySet<Department> ChildDepartments
	{
		get
		{
			return this._ChildDepartments;
		}
		set
		{
			this._ChildDepartments.Assign(value);
		}
	}
	
	[Association(Name="Department_Order", Storage="_OrdersByDepartment1", ThisKey="ID", OtherKey="DepartmentID1")]
	public EntitySet<Order> OrdersByDepartment1
	{
		get
		{
			return this._OrdersByDepartment1;
		}
		set
		{
			this._OrdersByDepartment1.Assign(value);
		}
	}
	
	[Association(Name="Department_Order1", Storage="_OrdersByDepartment2", ThisKey="ID", OtherKey="DepartmentID2")]
	public EntitySet<Order> OrdersByDepartment2
	{
		get
		{
			return this._OrdersByDepartment2;
		}
		set
		{
			this._OrdersByDepartment2.Assign(value);
		}
	}
	
	[Association(Name="Department_Order2", Storage="_OrdersByDepartment3", ThisKey="ID", OtherKey="DepartmentID3")]
	public EntitySet<Order> OrdersByDepartment3
	{
		get
		{
			return this._OrdersByDepartment3;
		}
		set
		{
			this._OrdersByDepartment3.Assign(value);
		}
	}
	
	[Association(Name="Department_Department", Storage="_ParentDepartment", ThisKey="ParentID", OtherKey="ID", IsForeignKey=true)]
	public Department ParentDepartment
	{
		get
		{
			return this._ParentDepartment.Entity;
		}
		set
		{
			Department previousValue = this._ParentDepartment.Entity;
			if (((previousValue != value) 
						|| (this._ParentDepartment.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._ParentDepartment.Entity = null;
					previousValue.ChildDepartments.Remove(this);
				}
				this._ParentDepartment.Entity = value;
				if ((value != null))
				{
					value.ChildDepartments.Add(this);
					this._ParentID = value.ID;
				}
				else
				{
					this._ParentID = default(Nullable<System.Guid>);
				}
				this.SendPropertyChanged("ParentDepartment");
			}
		}
	}
	
	[Association(Name="Hospital_Department", Storage="_Hospital", ThisKey="HospitalID", OtherKey="ID", IsForeignKey=true)]
	public Hospital Hospital
	{
		get
		{
			return this._Hospital.Entity;
		}
		set
		{
			Hospital previousValue = this._Hospital.Entity;
			if (((previousValue != value) 
						|| (this._Hospital.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Hospital.Entity = null;
					previousValue.Departments.Remove(this);
				}
				this._Hospital.Entity = value;
				if ((value != null))
				{
					value.Departments.Add(this);
					this._HospitalID = value.ID;
				}
				else
				{
					this._HospitalID = default(Nullable<System.Guid>);
				}
				this.SendPropertyChanged("Hospital");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_ChildDepartments(Department entity)
	{
		this.SendPropertyChanging();
		entity.ParentDepartment = this;
	}
	
	private void detach_ChildDepartments(Department entity)
	{
		this.SendPropertyChanging();
		entity.ParentDepartment = null;
	}
	
	private void attach_OrdersByDepartment1(Order entity)
	{
		this.SendPropertyChanging();
		entity.Department1 = this;
	}
	
	private void detach_OrdersByDepartment1(Order entity)
	{
		this.SendPropertyChanging();
		entity.Department1 = null;
	}
	
	private void attach_OrdersByDepartment2(Order entity)
	{
		this.SendPropertyChanging();
		entity.Department2 = this;
	}
	
	private void detach_OrdersByDepartment2(Order entity)
	{
		this.SendPropertyChanging();
		entity.Department2 = null;
	}
	
	private void attach_OrdersByDepartment3(Order entity)
	{
		this.SendPropertyChanging();
		entity.Department3 = this;
	}
	
	private void detach_OrdersByDepartment3(Order entity)
	{
		this.SendPropertyChanging();
		entity.Department3 = null;
	}
}

[Table(Name="dbo.Facility")]
public partial class Facility : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private string _FIN;
	
	private string _Name;
	
	private string _City;
	
	private string _Province;
	
	private string _Country;
	
	private string _PostalCode;
	
	private string _Website;
	
	private string _Phone;
	
	private string _Fax;
	
	private string _CountingYY;
	
	private System.Nullable<int> _CountingNumber;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnFINChanging(string value);
    partial void OnFINChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnCityChanging(string value);
    partial void OnCityChanged();
    partial void OnProvinceChanging(string value);
    partial void OnProvinceChanged();
    partial void OnCountryChanging(string value);
    partial void OnCountryChanged();
    partial void OnPostalCodeChanging(string value);
    partial void OnPostalCodeChanged();
    partial void OnWebsiteChanging(string value);
    partial void OnWebsiteChanged();
    partial void OnPhoneChanging(string value);
    partial void OnPhoneChanged();
    partial void OnFaxChanging(string value);
    partial void OnFaxChanged();
    partial void OnCountingYYChanging(string value);
    partial void OnCountingYYChanged();
    partial void OnCountingNumberChanging(System.Nullable<int> value);
    partial void OnCountingNumberChanged();
    #endregion
	
	public Facility()
	{
		OnCreated();
	}
	
	[Column(Storage="_FIN", DbType="NVarChar(5) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
	public string FIN
	{
		get
		{
			return this._FIN;
		}
		set
		{
			if ((this._FIN != value))
			{
				this.OnFINChanging(value);
				this.SendPropertyChanging();
				this._FIN = value;
				this.SendPropertyChanged("FIN");
				this.OnFINChanged();
			}
		}
	}
	
	[Column(Storage="_Name", DbType="NVarChar(MAX)")]
	public string Name
	{
		get
		{
			return this._Name;
		}
		set
		{
			if ((this._Name != value))
			{
				this.OnNameChanging(value);
				this.SendPropertyChanging();
				this._Name = value;
				this.SendPropertyChanged("Name");
				this.OnNameChanged();
			}
		}
	}
	
	[Column(Storage="_City", DbType="NVarChar(MAX)")]
	public string City
	{
		get
		{
			return this._City;
		}
		set
		{
			if ((this._City != value))
			{
				this.OnCityChanging(value);
				this.SendPropertyChanging();
				this._City = value;
				this.SendPropertyChanged("City");
				this.OnCityChanged();
			}
		}
	}
	
	[Column(Storage="_Province", DbType="NVarChar(MAX)")]
	public string Province
	{
		get
		{
			return this._Province;
		}
		set
		{
			if ((this._Province != value))
			{
				this.OnProvinceChanging(value);
				this.SendPropertyChanging();
				this._Province = value;
				this.SendPropertyChanged("Province");
				this.OnProvinceChanged();
			}
		}
	}
	
	[Column(Storage="_Country", DbType="NVarChar(MAX)")]
	public string Country
	{
		get
		{
			return this._Country;
		}
		set
		{
			if ((this._Country != value))
			{
				this.OnCountryChanging(value);
				this.SendPropertyChanging();
				this._Country = value;
				this.SendPropertyChanged("Country");
				this.OnCountryChanged();
			}
		}
	}
	
	[Column(Storage="_PostalCode", DbType="NVarChar(MAX)")]
	public string PostalCode
	{
		get
		{
			return this._PostalCode;
		}
		set
		{
			if ((this._PostalCode != value))
			{
				this.OnPostalCodeChanging(value);
				this.SendPropertyChanging();
				this._PostalCode = value;
				this.SendPropertyChanged("PostalCode");
				this.OnPostalCodeChanged();
			}
		}
	}
	
	[Column(Storage="_Website", DbType="NVarChar(MAX)")]
	public string Website
	{
		get
		{
			return this._Website;
		}
		set
		{
			if ((this._Website != value))
			{
				this.OnWebsiteChanging(value);
				this.SendPropertyChanging();
				this._Website = value;
				this.SendPropertyChanged("Website");
				this.OnWebsiteChanged();
			}
		}
	}
	
	[Column(Storage="_Phone", DbType="NVarChar(MAX)")]
	public string Phone
	{
		get
		{
			return this._Phone;
		}
		set
		{
			if ((this._Phone != value))
			{
				this.OnPhoneChanging(value);
				this.SendPropertyChanging();
				this._Phone = value;
				this.SendPropertyChanged("Phone");
				this.OnPhoneChanged();
			}
		}
	}
	
	[Column(Storage="_Fax", DbType="NVarChar(MAX)")]
	public string Fax
	{
		get
		{
			return this._Fax;
		}
		set
		{
			if ((this._Fax != value))
			{
				this.OnFaxChanging(value);
				this.SendPropertyChanging();
				this._Fax = value;
				this.SendPropertyChanged("Fax");
				this.OnFaxChanged();
			}
		}
	}
	
	[Column(Storage="_CountingYY", DbType="NVarChar(MAX)")]
	public string CountingYY
	{
		get
		{
			return this._CountingYY;
		}
		set
		{
			if ((this._CountingYY != value))
			{
				this.OnCountingYYChanging(value);
				this.SendPropertyChanging();
				this._CountingYY = value;
				this.SendPropertyChanged("CountingYY");
				this.OnCountingYYChanged();
			}
		}
	}
	
	[Column(Storage="_CountingNumber", DbType="Int")]
	public System.Nullable<int> CountingNumber
	{
		get
		{
			return this._CountingNumber;
		}
		set
		{
			if ((this._CountingNumber != value))
			{
				this.OnCountingNumberChanging(value);
				this.SendPropertyChanging();
				this._CountingNumber = value;
				this.SendPropertyChanged("CountingNumber");
				this.OnCountingNumberChanged();
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}

[Table(Name="dbo.ST_General")]
public partial class ST_General : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private string _Code;
	
	private string _Note;
	
	private System.Nullable<System.DateTime> _RetiredDate;
	
	private EntitySet<Donation> _Donations;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCodeChanging(string value);
    partial void OnCodeChanged();
    partial void OnNoteChanging(string value);
    partial void OnNoteChanged();
    partial void OnRetiredDateChanging(System.Nullable<System.DateTime> value);
    partial void OnRetiredDateChanged();
    #endregion
	
	public ST_General()
	{
		this._Donations = new EntitySet<Donation>(new Action<Donation>(this.attach_Donations), new Action<Donation>(this.detach_Donations));
		OnCreated();
	}
	
	[Column(Storage="_Code", DbType="NVarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
	public string Code
	{
		get
		{
			return this._Code;
		}
		set
		{
			if ((this._Code != value))
			{
				this.OnCodeChanging(value);
				this.SendPropertyChanging();
				this._Code = value;
				this.SendPropertyChanged("Code");
				this.OnCodeChanged();
			}
		}
	}
	
	[Column(Storage="_Note", DbType="NVarChar(MAX)")]
	public string Note
	{
		get
		{
			return this._Note;
		}
		set
		{
			if ((this._Note != value))
			{
				this.OnNoteChanging(value);
				this.SendPropertyChanging();
				this._Note = value;
				this.SendPropertyChanged("Note");
				this.OnNoteChanged();
			}
		}
	}
	
	[Column(Storage="_RetiredDate", DbType="DateTime")]
	public System.Nullable<System.DateTime> RetiredDate
	{
		get
		{
			return this._RetiredDate;
		}
		set
		{
			if ((this._RetiredDate != value))
			{
				this.OnRetiredDateChanging(value);
				this.SendPropertyChanging();
				this._RetiredDate = value;
				this.SendPropertyChanged("RetiredDate");
				this.OnRetiredDateChanged();
			}
		}
	}
	
	[Association(Name="ST_General_Donation", Storage="_Donations", ThisKey="Code", OtherKey="ST010Code")]
	public EntitySet<Donation> Donations
	{
		get
		{
			return this._Donations;
		}
		set
		{
			this._Donations.Assign(value);
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_Donations(Donation entity)
	{
		this.SendPropertyChanging();
		entity.ST_General = this;
	}
	
	private void detach_Donations(Donation entity)
	{
		this.SendPropertyChanging();
		entity.ST_General = null;
	}
}

[Table(Name="dbo.DonationStatusLog")]
public partial class DonationStatusLog : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _ID;
	
	private string _DIN;
	
	private Donation.StatusX _FromStatus;
	
	private Donation.StatusX _ToStatus;
	
	private string _Actor;
	
	private System.Nullable<System.DateTime> _Date;
	
	private string _Note;
	
	private EntityRef<Donation> _Donation;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnDINChanging(string value);
    partial void OnDINChanged();
    partial void OnFromStatusChanging(Donation.StatusX value);
    partial void OnFromStatusChanged();
    partial void OnToStatusChanging(Donation.StatusX value);
    partial void OnToStatusChanged();
    partial void OnActorChanging(string value);
    partial void OnActorChanged();
    partial void OnDateChanging(System.Nullable<System.DateTime> value);
    partial void OnDateChanged();
    partial void OnNoteChanging(string value);
    partial void OnNoteChanged();
    #endregion
	
	public DonationStatusLog()
	{
		this._Donation = default(EntityRef<Donation>);
		OnCreated();
	}
	
	[Column(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int ID
	{
		get
		{
			return this._ID;
		}
		set
		{
			if ((this._ID != value))
			{
				this.OnIDChanging(value);
				this.SendPropertyChanging();
				this._ID = value;
				this.SendPropertyChanged("ID");
				this.OnIDChanged();
			}
		}
	}
	
	[Column(Storage="_DIN", DbType="NVarChar(50)")]
	public string DIN
	{
		get
		{
			return this._DIN;
		}
		set
		{
			if ((this._DIN != value))
			{
				if (this._Donation.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnDINChanging(value);
				this.SendPropertyChanging();
				this._DIN = value;
				this.SendPropertyChanged("DIN");
				this.OnDINChanged();
			}
		}
	}
	
	[Column(Storage="_FromStatus", DbType="Int", CanBeNull=true)]
	public Donation.StatusX FromStatus
	{
		get
		{
			return this._FromStatus;
		}
		set
		{
			if ((this._FromStatus != value))
			{
				this.OnFromStatusChanging(value);
				this.SendPropertyChanging();
				this._FromStatus = value;
				this.SendPropertyChanged("FromStatus");
				this.OnFromStatusChanged();
			}
		}
	}
	
	[Column(Storage="_ToStatus", DbType="Int", CanBeNull=true)]
	public Donation.StatusX ToStatus
	{
		get
		{
			return this._ToStatus;
		}
		set
		{
			if ((this._ToStatus != value))
			{
				this.OnToStatusChanging(value);
				this.SendPropertyChanging();
				this._ToStatus = value;
				this.SendPropertyChanged("ToStatus");
				this.OnToStatusChanged();
			}
		}
	}
	
	[Column(Storage="_Actor", DbType="NVarChar(MAX)")]
	public string Actor
	{
		get
		{
			return this._Actor;
		}
		set
		{
			if ((this._Actor != value))
			{
				this.OnActorChanging(value);
				this.SendPropertyChanging();
				this._Actor = value;
				this.SendPropertyChanged("Actor");
				this.OnActorChanged();
			}
		}
	}
	
	[Column(Storage="_Date", DbType="DateTime")]
	public System.Nullable<System.DateTime> Date
	{
		get
		{
			return this._Date;
		}
		set
		{
			if ((this._Date != value))
			{
				this.OnDateChanging(value);
				this.SendPropertyChanging();
				this._Date = value;
				this.SendPropertyChanged("Date");
				this.OnDateChanged();
			}
		}
	}
	
	[Column(Storage="_Note", DbType="NVarChar(MAX)")]
	public string Note
	{
		get
		{
			return this._Note;
		}
		set
		{
			if ((this._Note != value))
			{
				this.OnNoteChanging(value);
				this.SendPropertyChanging();
				this._Note = value;
				this.SendPropertyChanged("Note");
				this.OnNoteChanged();
			}
		}
	}
	
	[Association(Name="Donation_DonationStatusLog", Storage="_Donation", ThisKey="DIN", OtherKey="DIN", IsForeignKey=true)]
	public Donation Donation
	{
		get
		{
			return this._Donation.Entity;
		}
		set
		{
			Donation previousValue = this._Donation.Entity;
			if (((previousValue != value) 
						|| (this._Donation.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Donation.Entity = null;
					previousValue.DonationStatusLogs.Remove(this);
				}
				this._Donation.Entity = value;
				if ((value != null))
				{
					value.DonationStatusLogs.Add(this);
					this._DIN = value.DIN;
				}
				else
				{
					this._DIN = default(string);
				}
				this.SendPropertyChanged("Donation");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}

[Table(Name="dbo.Pack")]
public partial class Pack : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private System.Guid _ID;
	
	private string _DIN;
	
	private string _ProductCode;
	
	private System.Nullable<System.DateTime> _Date;
	
	private string _Note;
	
	private string _Actor;
	
	private System.Nullable<System.DateTime> _ExpirationDate;
	
	private System.Nullable<int> _Volume;
	
	private Pack.StatusX _Status;
	
	private EntitySet<PackSideEffect> _PackSideEffects;
	
	private EntitySet<Donation> _Donations;
	
	private EntitySet<PackOrder> _PackOrders;
	
	private EntitySet<PackRemainDaily> _PackRemainDailies;
	
	private EntitySet<PackTransaction> _PackTransactions;
	
	private EntityRef<Donation> _Donation;
	
	private EntityRef<Product> _Product;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(System.Guid value);
    partial void OnIDChanged();
    partial void OnDINChanging(string value);
    partial void OnDINChanged();
    partial void OnProductCodeChanging(string value);
    partial void OnProductCodeChanged();
    partial void OnDateChanging(System.Nullable<System.DateTime> value);
    partial void OnDateChanged();
    partial void OnNoteChanging(string value);
    partial void OnNoteChanged();
    partial void OnActorChanging(string value);
    partial void OnActorChanged();
    partial void OnExpirationDateChanging(System.Nullable<System.DateTime> value);
    partial void OnExpirationDateChanged();
    partial void OnVolumeChanging(System.Nullable<int> value);
    partial void OnVolumeChanged();
    partial void OnStatusChanging(Pack.StatusX value);
    partial void OnStatusChanged();
    #endregion
	
	public Pack()
	{
		this._PackSideEffects = new EntitySet<PackSideEffect>(new Action<PackSideEffect>(this.attach_PackSideEffects), new Action<PackSideEffect>(this.detach_PackSideEffects));
		this._Donations = new EntitySet<Donation>(new Action<Donation>(this.attach_Donations), new Action<Donation>(this.detach_Donations));
		this._PackOrders = new EntitySet<PackOrder>(new Action<PackOrder>(this.attach_PackOrders), new Action<PackOrder>(this.detach_PackOrders));
		this._PackRemainDailies = new EntitySet<PackRemainDaily>(new Action<PackRemainDaily>(this.attach_PackRemainDailies), new Action<PackRemainDaily>(this.detach_PackRemainDailies));
		this._PackTransactions = new EntitySet<PackTransaction>(new Action<PackTransaction>(this.attach_PackTransactions), new Action<PackTransaction>(this.detach_PackTransactions));
		this._Donation = default(EntityRef<Donation>);
		this._Product = default(EntityRef<Product>);
		OnCreated();
	}
	
	[Column(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true, IsDbGenerated=true)]
	public System.Guid ID
	{
		get
		{
			return this._ID;
		}
		set
		{
			if ((this._ID != value))
			{
				this.OnIDChanging(value);
				this.SendPropertyChanging();
				this._ID = value;
				this.SendPropertyChanged("ID");
				this.OnIDChanged();
			}
		}
	}
	
	[Column(Storage="_DIN", DbType="NVarChar(50)")]
	public string DIN
	{
		get
		{
			return this._DIN;
		}
		set
		{
			if ((this._DIN != value))
			{
				if (this._Donation.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnDINChanging(value);
				this.SendPropertyChanging();
				this._DIN = value;
				this.SendPropertyChanged("DIN");
				this.OnDINChanged();
			}
		}
	}
	
	[Column(Storage="_ProductCode", DbType="NVarChar(50)")]
	public string ProductCode
	{
		get
		{
			return this._ProductCode;
		}
		set
		{
			if ((this._ProductCode != value))
			{
				if (this._Product.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnProductCodeChanging(value);
				this.SendPropertyChanging();
				this._ProductCode = value;
				this.SendPropertyChanged("ProductCode");
				this.OnProductCodeChanged();
			}
		}
	}
	
	[Column(Storage="_Date", AutoSync=AutoSync.OnInsert, DbType="DateTime", IsDbGenerated=true)]
	public System.Nullable<System.DateTime> Date
	{
		get
		{
			return this._Date;
		}
		set
		{
			if ((this._Date != value))
			{
				this.OnDateChanging(value);
				this.SendPropertyChanging();
				this._Date = value;
				this.SendPropertyChanged("Date");
				this.OnDateChanged();
			}
		}
	}
	
	[Column(Storage="_Note", DbType="NVarChar(MAX)")]
	public string Note
	{
		get
		{
			return this._Note;
		}
		set
		{
			if ((this._Note != value))
			{
				this.OnNoteChanging(value);
				this.SendPropertyChanging();
				this._Note = value;
				this.SendPropertyChanged("Note");
				this.OnNoteChanged();
			}
		}
	}
	
	[Column(Storage="_Actor", DbType="NVarChar(MAX)")]
	public string Actor
	{
		get
		{
			return this._Actor;
		}
		set
		{
			if ((this._Actor != value))
			{
				this.OnActorChanging(value);
				this.SendPropertyChanging();
				this._Actor = value;
				this.SendPropertyChanged("Actor");
				this.OnActorChanged();
			}
		}
	}
	
	[Column(Storage="_ExpirationDate", DbType="DateTime")]
	public System.Nullable<System.DateTime> ExpirationDate
	{
		get
		{
			return this._ExpirationDate;
		}
		set
		{
			if ((this._ExpirationDate != value))
			{
				this.OnExpirationDateChanging(value);
				this.SendPropertyChanging();
				this._ExpirationDate = value;
				this.SendPropertyChanged("ExpirationDate");
				this.OnExpirationDateChanged();
			}
		}
	}
	
	[Column(Storage="_Volume", DbType="Int")]
	public System.Nullable<int> Volume
	{
		get
		{
			return this._Volume;
		}
		set
		{
			if ((this._Volume != value))
			{
				this.OnVolumeChanging(value);
				this.SendPropertyChanging();
				this._Volume = value;
				this.SendPropertyChanged("Volume");
				this.OnVolumeChanged();
			}
		}
	}
	
	[Column(Storage="_Status", DbType="Int", CanBeNull=true)]
	public Pack.StatusX Status
	{
		get
		{
			return this._Status;
		}
		set
		{
			if ((this._Status != value))
			{
				this.OnStatusChanging(value);
				this.SendPropertyChanging();
				this._Status = value;
				this.SendPropertyChanged("Status");
				this.OnStatusChanged();
			}
		}
	}
	
	[Association(Name="Pack_PackSideEffect", Storage="_PackSideEffects", ThisKey="ID", OtherKey="PackID")]
	public EntitySet<PackSideEffect> PackSideEffects
	{
		get
		{
			return this._PackSideEffects;
		}
		set
		{
			this._PackSideEffects.Assign(value);
		}
	}
	
	[Association(Name="Pack_Donation", Storage="_Donations", ThisKey="ID", OtherKey="OrgPackID")]
	public EntitySet<Donation> Donations
	{
		get
		{
			return this._Donations;
		}
		set
		{
			this._Donations.Assign(value);
		}
	}
	
	[Association(Name="Pack_PackOrder", Storage="_PackOrders", ThisKey="ID", OtherKey="PackID")]
	public EntitySet<PackOrder> PackOrders
	{
		get
		{
			return this._PackOrders;
		}
		set
		{
			this._PackOrders.Assign(value);
		}
	}
	
	[Association(Name="Pack_PackRemainDaily", Storage="_PackRemainDailies", ThisKey="ID", OtherKey="PackID")]
	public EntitySet<PackRemainDaily> PackRemainDailies
	{
		get
		{
			return this._PackRemainDailies;
		}
		set
		{
			this._PackRemainDailies.Assign(value);
		}
	}
	
	[Association(Name="Pack_PackTransaction", Storage="_PackTransactions", ThisKey="ID", OtherKey="PackID")]
	public EntitySet<PackTransaction> PackTransactions
	{
		get
		{
			return this._PackTransactions;
		}
		set
		{
			this._PackTransactions.Assign(value);
		}
	}
	
	[Association(Name="Donation_Pack", Storage="_Donation", ThisKey="DIN", OtherKey="DIN", IsForeignKey=true)]
	public Donation Donation
	{
		get
		{
			return this._Donation.Entity;
		}
		set
		{
			Donation previousValue = this._Donation.Entity;
			if (((previousValue != value) 
						|| (this._Donation.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Donation.Entity = null;
					previousValue.Packs.Remove(this);
				}
				this._Donation.Entity = value;
				if ((value != null))
				{
					value.Packs.Add(this);
					this._DIN = value.DIN;
				}
				else
				{
					this._DIN = default(string);
				}
				this.SendPropertyChanged("Donation");
			}
		}
	}
	
	[Association(Name="Product_Pack", Storage="_Product", ThisKey="ProductCode", OtherKey="Code", IsForeignKey=true)]
	public Product Product
	{
		get
		{
			return this._Product.Entity;
		}
		set
		{
			Product previousValue = this._Product.Entity;
			if (((previousValue != value) 
						|| (this._Product.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Product.Entity = null;
					previousValue.Packs.Remove(this);
				}
				this._Product.Entity = value;
				if ((value != null))
				{
					value.Packs.Add(this);
					this._ProductCode = value.Code;
				}
				else
				{
					this._ProductCode = default(string);
				}
				this.SendPropertyChanged("Product");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_PackSideEffects(PackSideEffect entity)
	{
		this.SendPropertyChanging();
		entity.Pack = this;
	}
	
	private void detach_PackSideEffects(PackSideEffect entity)
	{
		this.SendPropertyChanging();
		entity.Pack = null;
	}
	
	private void attach_Donations(Donation entity)
	{
		this.SendPropertyChanging();
		entity.Pack = this;
	}
	
	private void detach_Donations(Donation entity)
	{
		this.SendPropertyChanging();
		entity.Pack = null;
	}
	
	private void attach_PackOrders(PackOrder entity)
	{
		this.SendPropertyChanging();
		entity.Pack = this;
	}
	
	private void detach_PackOrders(PackOrder entity)
	{
		this.SendPropertyChanging();
		entity.Pack = null;
	}
	
	private void attach_PackRemainDailies(PackRemainDaily entity)
	{
		this.SendPropertyChanging();
		entity.Pack = this;
	}
	
	private void detach_PackRemainDailies(PackRemainDaily entity)
	{
		this.SendPropertyChanging();
		entity.Pack = null;
	}
	
	private void attach_PackTransactions(PackTransaction entity)
	{
		this.SendPropertyChanging();
		entity.Pack = this;
	}
	
	private void detach_PackTransactions(PackTransaction entity)
	{
		this.SendPropertyChanging();
		entity.Pack = null;
	}
}

[Table(Name="dbo.Donation")]
public partial class Donation : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private string _DIN;
	
	private string _CheckChar;
	
	private System.Nullable<System.DateTime> _CollectedDate;
	
	private Donation.StatusX _Status;
	
	private System.Nullable<System.Guid> _PeopleID;
	
	private string _Note;
	
	private string _Actor;
	
	private System.Nullable<int> _CampaignID;
	
	private string _MSTM;
	
	private string _MSNH;
	
	private string _ABORhD;
	
	private string _ST010Code;
	
	private string _ST011;
	
	private string _ST012;
	
	private string _ST013;
	
	private string _ST014;
	
	private string _ST015;
	
	private string _ST016;
	
	private string _InfectiousMarkers;
	
	private System.Nullable<System.Guid> _OrgPackID;
	
	private Donation.TestResultStatusX _TestResultStatus;
	
	private string _Collector;
	
	private EntitySet<DonationStatusLog> _DonationStatusLogs;
	
	private EntitySet<Pack> _Packs;
	
	private EntitySet<DonationTestLog> _DonationTestLogs;
	
	private EntityRef<Pack> _Pack;
	
	private EntityRef<People> _People;
	
	private EntityRef<ST_General> _ST_General;
	
	private EntityRef<Campaign> _Campaign;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnDINChanging(string value);
    partial void OnDINChanged();
    partial void OnCheckCharChanging(string value);
    partial void OnCheckCharChanged();
    partial void OnCollectedDateChanging(System.Nullable<System.DateTime> value);
    partial void OnCollectedDateChanged();
    partial void OnStatusChanging(Donation.StatusX value);
    partial void OnStatusChanged();
    partial void OnPeopleIDChanging(System.Nullable<System.Guid> value);
    partial void OnPeopleIDChanged();
    partial void OnNoteChanging(string value);
    partial void OnNoteChanged();
    partial void OnActorChanging(string value);
    partial void OnActorChanged();
    partial void OnCampaignIDChanging(System.Nullable<int> value);
    partial void OnCampaignIDChanged();
    partial void OnMSTMChanging(string value);
    partial void OnMSTMChanged();
    partial void OnMSNHChanging(string value);
    partial void OnMSNHChanged();
    partial void OnBloodGroupChanging(string value);
    partial void OnBloodGroupChanged();
    partial void OnST010CodeChanging(string value);
    partial void OnST010CodeChanged();
    partial void OnST011Changing(string value);
    partial void OnST011Changed();
    partial void OnST012Changing(string value);
    partial void OnST012Changed();
    partial void OnST013Changing(string value);
    partial void OnST013Changed();
    partial void OnST014Changing(string value);
    partial void OnST014Changed();
    partial void OnST015Changing(string value);
    partial void OnST015Changed();
    partial void OnST016Changing(string value);
    partial void OnST016Changed();
    partial void OnInfectiousMarkersChanging(string value);
    partial void OnInfectiousMarkersChanged();
    partial void OnOrgPackIDChanging(System.Nullable<System.Guid> value);
    partial void OnOrgPackIDChanged();
    partial void OnTestResultStatusChanging(Donation.TestResultStatusX value);
    partial void OnTestResultStatusChanged();
    partial void OnCollectorChanging(string value);
    partial void OnCollectorChanged();
    #endregion
	
	public Donation()
	{
		this._DonationStatusLogs = new EntitySet<DonationStatusLog>(new Action<DonationStatusLog>(this.attach_DonationStatusLogs), new Action<DonationStatusLog>(this.detach_DonationStatusLogs));
		this._Packs = new EntitySet<Pack>(new Action<Pack>(this.attach_Packs), new Action<Pack>(this.detach_Packs));
		this._DonationTestLogs = new EntitySet<DonationTestLog>(new Action<DonationTestLog>(this.attach_DonationTestLogs), new Action<DonationTestLog>(this.detach_DonationTestLogs));
		this._Pack = default(EntityRef<Pack>);
		this._People = default(EntityRef<People>);
		this._ST_General = default(EntityRef<ST_General>);
		this._Campaign = default(EntityRef<Campaign>);
		OnCreated();
	}
	
	[Column(Storage="_DIN", DbType="NVarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
	public string DIN
	{
		get
		{
			return this._DIN;
		}
		set
		{
			if ((this._DIN != value))
			{
				this.OnDINChanging(value);
				this.SendPropertyChanging();
				this._DIN = value;
				this.SendPropertyChanged("DIN");
				this.OnDINChanged();
			}
		}
	}
	
	[Column(Storage="_CheckChar", DbType="NVarChar(MAX)")]
	public string CheckChar
	{
		get
		{
			return this._CheckChar;
		}
		set
		{
			if ((this._CheckChar != value))
			{
				this.OnCheckCharChanging(value);
				this.SendPropertyChanging();
				this._CheckChar = value;
				this.SendPropertyChanged("CheckChar");
				this.OnCheckCharChanged();
			}
		}
	}
	
	[Column(Storage="_CollectedDate", DbType="DateTime")]
	public System.Nullable<System.DateTime> CollectedDate
	{
		get
		{
			return this._CollectedDate;
		}
		set
		{
			if ((this._CollectedDate != value))
			{
				this.OnCollectedDateChanging(value);
				this.SendPropertyChanging();
				this._CollectedDate = value;
				this.SendPropertyChanged("CollectedDate");
				this.OnCollectedDateChanged();
			}
		}
	}
	
	[Column(Storage="_Status", DbType="Int", CanBeNull=true)]
	public Donation.StatusX Status
	{
		get
		{
			return this._Status;
		}
		set
		{
			if ((this._Status != value))
			{
				this.OnStatusChanging(value);
				this.SendPropertyChanging();
				this._Status = value;
				this.SendPropertyChanged("Status");
				this.OnStatusChanged();
			}
		}
	}
	
	[Column(Storage="_PeopleID", DbType="UniqueIdentifier")]
	public System.Nullable<System.Guid> PeopleID
	{
		get
		{
			return this._PeopleID;
		}
		set
		{
			if ((this._PeopleID != value))
			{
				if (this._People.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnPeopleIDChanging(value);
				this.SendPropertyChanging();
				this._PeopleID = value;
				this.SendPropertyChanged("PeopleID");
				this.OnPeopleIDChanged();
			}
		}
	}
	
	[Column(Storage="_Note", DbType="NVarChar(MAX)")]
	public string Note
	{
		get
		{
			return this._Note;
		}
		set
		{
			if ((this._Note != value))
			{
				this.OnNoteChanging(value);
				this.SendPropertyChanging();
				this._Note = value;
				this.SendPropertyChanged("Note");
				this.OnNoteChanged();
			}
		}
	}
	
	[Column(Storage="_Actor", DbType="NVarChar(MAX)")]
	public string Actor
	{
		get
		{
			return this._Actor;
		}
		set
		{
			if ((this._Actor != value))
			{
				this.OnActorChanging(value);
				this.SendPropertyChanging();
				this._Actor = value;
				this.SendPropertyChanged("Actor");
				this.OnActorChanged();
			}
		}
	}
	
	[Column(Storage="_CampaignID", DbType="Int")]
	public System.Nullable<int> CampaignID
	{
		get
		{
			return this._CampaignID;
		}
		set
		{
			if ((this._CampaignID != value))
			{
				if (this._Campaign.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnCampaignIDChanging(value);
				this.SendPropertyChanging();
				this._CampaignID = value;
				this.SendPropertyChanged("CampaignID");
				this.OnCampaignIDChanged();
			}
		}
	}
	
	[Column(Storage="_MSTM", DbType="NVarChar(MAX)")]
	public string MSTM
	{
		get
		{
			return this._MSTM;
		}
		set
		{
			if ((this._MSTM != value))
			{
				this.OnMSTMChanging(value);
				this.SendPropertyChanging();
				this._MSTM = value;
				this.SendPropertyChanged("MSTM");
				this.OnMSTMChanged();
			}
		}
	}
	
	[Column(Storage="_MSNH", DbType="NVarChar(MAX)")]
	public string MSNH
	{
		get
		{
			return this._MSNH;
		}
		set
		{
			if ((this._MSNH != value))
			{
				this.OnMSNHChanging(value);
				this.SendPropertyChanging();
				this._MSNH = value;
				this.SendPropertyChanged("MSNH");
				this.OnMSNHChanged();
			}
		}
	}
	
	[Column(Storage="_ABORhD", DbType="NVarChar(MAX)")]
	public string BloodGroup
	{
		get
		{
			return this._ABORhD;
		}
		set
		{
			if ((this._ABORhD != value))
			{
				this.OnBloodGroupChanging(value);
				this.SendPropertyChanging();
				this._ABORhD = value;
				this.SendPropertyChanged("BloodGroup");
				this.OnBloodGroupChanged();
			}
		}
	}
	
	[Column(Storage="_ST010Code", DbType="NVarChar(50)")]
	public string ST010Code
	{
		get
		{
			return this._ST010Code;
		}
		set
		{
			if ((this._ST010Code != value))
			{
				if (this._ST_General.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnST010CodeChanging(value);
				this.SendPropertyChanging();
				this._ST010Code = value;
				this.SendPropertyChanged("ST010Code");
				this.OnST010CodeChanged();
			}
		}
	}
	
	[Column(Storage="_ST011", DbType="NVarChar(MAX)")]
	public string ST011
	{
		get
		{
			return this._ST011;
		}
		set
		{
			if ((this._ST011 != value))
			{
				this.OnST011Changing(value);
				this.SendPropertyChanging();
				this._ST011 = value;
				this.SendPropertyChanged("ST011");
				this.OnST011Changed();
			}
		}
	}
	
	[Column(Storage="_ST012", DbType="NVarChar(MAX)")]
	public string ST012
	{
		get
		{
			return this._ST012;
		}
		set
		{
			if ((this._ST012 != value))
			{
				this.OnST012Changing(value);
				this.SendPropertyChanging();
				this._ST012 = value;
				this.SendPropertyChanged("ST012");
				this.OnST012Changed();
			}
		}
	}
	
	[Column(Storage="_ST013", DbType="NVarChar(MAX)")]
	public string ST013
	{
		get
		{
			return this._ST013;
		}
		set
		{
			if ((this._ST013 != value))
			{
				this.OnST013Changing(value);
				this.SendPropertyChanging();
				this._ST013 = value;
				this.SendPropertyChanged("ST013");
				this.OnST013Changed();
			}
		}
	}
	
	[Column(Storage="_ST014", DbType="NVarChar(MAX)")]
	public string ST014
	{
		get
		{
			return this._ST014;
		}
		set
		{
			if ((this._ST014 != value))
			{
				this.OnST014Changing(value);
				this.SendPropertyChanging();
				this._ST014 = value;
				this.SendPropertyChanged("ST014");
				this.OnST014Changed();
			}
		}
	}
	
	[Column(Storage="_ST015", DbType="NVarChar(MAX)")]
	public string ST015
	{
		get
		{
			return this._ST015;
		}
		set
		{
			if ((this._ST015 != value))
			{
				this.OnST015Changing(value);
				this.SendPropertyChanging();
				this._ST015 = value;
				this.SendPropertyChanged("ST015");
				this.OnST015Changed();
			}
		}
	}
	
	[Column(Storage="_ST016", DbType="NVarChar(MAX)")]
	public string ST016
	{
		get
		{
			return this._ST016;
		}
		set
		{
			if ((this._ST016 != value))
			{
				this.OnST016Changing(value);
				this.SendPropertyChanging();
				this._ST016 = value;
				this.SendPropertyChanged("ST016");
				this.OnST016Changed();
			}
		}
	}
	
	[Column(Storage="_InfectiousMarkers", DbType="NVarChar(MAX)")]
	public string InfectiousMarkers
	{
		get
		{
			return this._InfectiousMarkers;
		}
		set
		{
			if ((this._InfectiousMarkers != value))
			{
				this.OnInfectiousMarkersChanging(value);
				this.SendPropertyChanging();
				this._InfectiousMarkers = value;
				this.SendPropertyChanged("InfectiousMarkers");
				this.OnInfectiousMarkersChanged();
			}
		}
	}
	
	[Column(Storage="_OrgPackID", DbType="UniqueIdentifier")]
	public System.Nullable<System.Guid> OrgPackID
	{
		get
		{
			return this._OrgPackID;
		}
		set
		{
			if ((this._OrgPackID != value))
			{
				if (this._Pack.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnOrgPackIDChanging(value);
				this.SendPropertyChanging();
				this._OrgPackID = value;
				this.SendPropertyChanged("OrgPackID");
				this.OnOrgPackIDChanged();
			}
		}
	}
	
	[Column(Storage="_TestResultStatus", DbType="Int", CanBeNull=true)]
	public Donation.TestResultStatusX TestResultStatus
	{
		get
		{
			return this._TestResultStatus;
		}
		set
		{
			if ((this._TestResultStatus != value))
			{
				this.OnTestResultStatusChanging(value);
				this.SendPropertyChanging();
				this._TestResultStatus = value;
				this.SendPropertyChanged("TestResultStatus");
				this.OnTestResultStatusChanged();
			}
		}
	}
	
	[Column(Storage="_Collector", DbType="NVarChar(MAX)")]
	public string Collector
	{
		get
		{
			return this._Collector;
		}
		set
		{
			if ((this._Collector != value))
			{
				this.OnCollectorChanging(value);
				this.SendPropertyChanging();
				this._Collector = value;
				this.SendPropertyChanged("Collector");
				this.OnCollectorChanged();
			}
		}
	}
	
	[Association(Name="Donation_DonationStatusLog", Storage="_DonationStatusLogs", ThisKey="DIN", OtherKey="DIN")]
	public EntitySet<DonationStatusLog> DonationStatusLogs
	{
		get
		{
			return this._DonationStatusLogs;
		}
		set
		{
			this._DonationStatusLogs.Assign(value);
		}
	}
	
	[Association(Name="Donation_Pack", Storage="_Packs", ThisKey="DIN", OtherKey="DIN")]
	public EntitySet<Pack> Packs
	{
		get
		{
			return this._Packs;
		}
		set
		{
			this._Packs.Assign(value);
		}
	}
	
	[Association(Name="Donation_DonationTestLog", Storage="_DonationTestLogs", ThisKey="DIN", OtherKey="DIN")]
	public EntitySet<DonationTestLog> DonationTestLogs
	{
		get
		{
			return this._DonationTestLogs;
		}
		set
		{
			this._DonationTestLogs.Assign(value);
		}
	}
	
	[Association(Name="Pack_Donation", Storage="_Pack", ThisKey="OrgPackID", OtherKey="ID", IsForeignKey=true)]
	public Pack Pack
	{
		get
		{
			return this._Pack.Entity;
		}
		set
		{
			Pack previousValue = this._Pack.Entity;
			if (((previousValue != value) 
						|| (this._Pack.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Pack.Entity = null;
					previousValue.Donations.Remove(this);
				}
				this._Pack.Entity = value;
				if ((value != null))
				{
					value.Donations.Add(this);
					this._OrgPackID = value.ID;
				}
				else
				{
					this._OrgPackID = default(Nullable<System.Guid>);
				}
				this.SendPropertyChanged("Pack");
			}
		}
	}
	
	[Association(Name="People_Donation", Storage="_People", ThisKey="PeopleID", OtherKey="ID", IsForeignKey=true)]
	public People People
	{
		get
		{
			return this._People.Entity;
		}
		set
		{
			People previousValue = this._People.Entity;
			if (((previousValue != value) 
						|| (this._People.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._People.Entity = null;
					previousValue.Donations.Remove(this);
				}
				this._People.Entity = value;
				if ((value != null))
				{
					value.Donations.Add(this);
					this._PeopleID = value.ID;
				}
				else
				{
					this._PeopleID = default(Nullable<System.Guid>);
				}
				this.SendPropertyChanged("People");
			}
		}
	}
	
	[Association(Name="ST_General_Donation", Storage="_ST_General", ThisKey="ST010Code", OtherKey="Code", IsForeignKey=true)]
	public ST_General ST_General
	{
		get
		{
			return this._ST_General.Entity;
		}
		set
		{
			ST_General previousValue = this._ST_General.Entity;
			if (((previousValue != value) 
						|| (this._ST_General.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._ST_General.Entity = null;
					previousValue.Donations.Remove(this);
				}
				this._ST_General.Entity = value;
				if ((value != null))
				{
					value.Donations.Add(this);
					this._ST010Code = value.Code;
				}
				else
				{
					this._ST010Code = default(string);
				}
				this.SendPropertyChanged("ST_General");
			}
		}
	}
	
	[Association(Name="Campaign_Donation", Storage="_Campaign", ThisKey="CampaignID", OtherKey="ID", IsForeignKey=true)]
	public Campaign Campaign
	{
		get
		{
			return this._Campaign.Entity;
		}
		set
		{
			Campaign previousValue = this._Campaign.Entity;
			if (((previousValue != value) 
						|| (this._Campaign.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Campaign.Entity = null;
					previousValue.Donations.Remove(this);
				}
				this._Campaign.Entity = value;
				if ((value != null))
				{
					value.Donations.Add(this);
					this._CampaignID = value.ID;
				}
				else
				{
					this._CampaignID = default(Nullable<int>);
				}
				this.SendPropertyChanged("Campaign");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_DonationStatusLogs(DonationStatusLog entity)
	{
		this.SendPropertyChanging();
		entity.Donation = this;
	}
	
	private void detach_DonationStatusLogs(DonationStatusLog entity)
	{
		this.SendPropertyChanging();
		entity.Donation = null;
	}
	
	private void attach_Packs(Pack entity)
	{
		this.SendPropertyChanging();
		entity.Donation = this;
	}
	
	private void detach_Packs(Pack entity)
	{
		this.SendPropertyChanging();
		entity.Donation = null;
	}
	
	private void attach_DonationTestLogs(DonationTestLog entity)
	{
		this.SendPropertyChanging();
		entity.Donation = this;
	}
	
	private void detach_DonationTestLogs(DonationTestLog entity)
	{
		this.SendPropertyChanging();
		entity.Donation = null;
	}
}

[Table(Name="dbo.DonationTestLog")]
public partial class DonationTestLog : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _ID;
	
	private string _DIN;
	
	private string _Type;
	
	private string _Result;
	
	private System.Nullable<System.DateTime> _Date;
	
	private string _Actor;
	
	private string _Note;
	
	private EntityRef<Donation> _Donation;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnDINChanging(string value);
    partial void OnDINChanged();
    partial void OnTypeChanging(string value);
    partial void OnTypeChanged();
    partial void OnResultChanging(string value);
    partial void OnResultChanged();
    partial void OnDateChanging(System.Nullable<System.DateTime> value);
    partial void OnDateChanged();
    partial void OnActorChanging(string value);
    partial void OnActorChanged();
    partial void OnNoteChanging(string value);
    partial void OnNoteChanged();
    #endregion
	
	public DonationTestLog()
	{
		this._Donation = default(EntityRef<Donation>);
		OnCreated();
	}
	
	[Column(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int ID
	{
		get
		{
			return this._ID;
		}
		set
		{
			if ((this._ID != value))
			{
				this.OnIDChanging(value);
				this.SendPropertyChanging();
				this._ID = value;
				this.SendPropertyChanged("ID");
				this.OnIDChanged();
			}
		}
	}
	
	[Column(Storage="_DIN", DbType="NVarChar(50)")]
	public string DIN
	{
		get
		{
			return this._DIN;
		}
		set
		{
			if ((this._DIN != value))
			{
				if (this._Donation.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnDINChanging(value);
				this.SendPropertyChanging();
				this._DIN = value;
				this.SendPropertyChanged("DIN");
				this.OnDINChanged();
			}
		}
	}
	
	[Column(Storage="_Type", DbType="NVarChar(MAX)")]
	public string Type
	{
		get
		{
			return this._Type;
		}
		set
		{
			if ((this._Type != value))
			{
				this.OnTypeChanging(value);
				this.SendPropertyChanging();
				this._Type = value;
				this.SendPropertyChanged("Type");
				this.OnTypeChanged();
			}
		}
	}
	
	[Column(Storage="_Result", DbType="NVarChar(MAX)")]
	public string Result
	{
		get
		{
			return this._Result;
		}
		set
		{
			if ((this._Result != value))
			{
				this.OnResultChanging(value);
				this.SendPropertyChanging();
				this._Result = value;
				this.SendPropertyChanged("Result");
				this.OnResultChanged();
			}
		}
	}
	
	[Column(Storage="_Date", DbType="DateTime")]
	public System.Nullable<System.DateTime> Date
	{
		get
		{
			return this._Date;
		}
		set
		{
			if ((this._Date != value))
			{
				this.OnDateChanging(value);
				this.SendPropertyChanging();
				this._Date = value;
				this.SendPropertyChanged("Date");
				this.OnDateChanged();
			}
		}
	}
	
	[Column(Storage="_Actor", DbType="NVarChar(MAX)")]
	public string Actor
	{
		get
		{
			return this._Actor;
		}
		set
		{
			if ((this._Actor != value))
			{
				this.OnActorChanging(value);
				this.SendPropertyChanging();
				this._Actor = value;
				this.SendPropertyChanged("Actor");
				this.OnActorChanged();
			}
		}
	}
	
	[Column(Storage="_Note", DbType="NVarChar(MAX)")]
	public string Note
	{
		get
		{
			return this._Note;
		}
		set
		{
			if ((this._Note != value))
			{
				this.OnNoteChanging(value);
				this.SendPropertyChanging();
				this._Note = value;
				this.SendPropertyChanged("Note");
				this.OnNoteChanged();
			}
		}
	}
	
	[Association(Name="Donation_DonationTestLog", Storage="_Donation", ThisKey="DIN", OtherKey="DIN", IsForeignKey=true)]
	public Donation Donation
	{
		get
		{
			return this._Donation.Entity;
		}
		set
		{
			Donation previousValue = this._Donation.Entity;
			if (((previousValue != value) 
						|| (this._Donation.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Donation.Entity = null;
					previousValue.DonationTestLogs.Remove(this);
				}
				this._Donation.Entity = value;
				if ((value != null))
				{
					value.DonationTestLogs.Add(this);
					this._DIN = value.DIN;
				}
				else
				{
					this._DIN = default(string);
				}
				this.SendPropertyChanged("Donation");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}

[Table(Name="dbo.[Order]")]
public partial class Order : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _ID;
	
	private string _Name;
	
	private System.Nullable<int> _OrgID;
	
	private System.Nullable<System.Guid> _PeopleID;
	
	private string _Note;
	
	private string _Actor;
	
	private System.Nullable<System.DateTime> _Date;
	
	private Order.TypeX _Type;
	
	private Order.StatusX _Status;
	
	private System.Nullable<System.Guid> _DepartmentID1;
	
	private System.Nullable<System.Guid> _DepartmentID2;
	
	private System.Nullable<System.Guid> _DepartmentID3;
	
	private string _Room;
	
	private string _Bed;
	
	private string _Diagnosis;
	
	private string _PatientCode;
	
	private string _TransfusionNote;
	
	private EntitySet<PackOrder> _PackOrders;
	
	private EntityRef<Department> _Department1;
	
	private EntityRef<Department> _Department2;
	
	private EntityRef<Department> _Department3;
	
	private EntityRef<Org> _Org;
	
	private EntityRef<People> _People;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnOrgIDChanging(System.Nullable<int> value);
    partial void OnOrgIDChanged();
    partial void OnPeopleIDChanging(System.Nullable<System.Guid> value);
    partial void OnPeopleIDChanged();
    partial void OnNoteChanging(string value);
    partial void OnNoteChanged();
    partial void OnActorChanging(string value);
    partial void OnActorChanged();
    partial void OnDateChanging(System.Nullable<System.DateTime> value);
    partial void OnDateChanged();
    partial void OnTypeChanging(Order.TypeX value);
    partial void OnTypeChanged();
    partial void OnStatusChanging(Order.StatusX value);
    partial void OnStatusChanged();
    partial void OnDepartmentID1Changing(System.Nullable<System.Guid> value);
    partial void OnDepartmentID1Changed();
    partial void OnDepartmentID2Changing(System.Nullable<System.Guid> value);
    partial void OnDepartmentID2Changed();
    partial void OnDepartmentID3Changing(System.Nullable<System.Guid> value);
    partial void OnDepartmentID3Changed();
    partial void OnRoomChanging(string value);
    partial void OnRoomChanged();
    partial void OnBedChanging(string value);
    partial void OnBedChanged();
    partial void OnDiagnosisChanging(string value);
    partial void OnDiagnosisChanged();
    partial void OnPatientCodeChanging(string value);
    partial void OnPatientCodeChanged();
    partial void OnTransfusionNoteChanging(string value);
    partial void OnTransfusionNoteChanged();
    #endregion
	
	public Order()
	{
		this._PackOrders = new EntitySet<PackOrder>(new Action<PackOrder>(this.attach_PackOrders), new Action<PackOrder>(this.detach_PackOrders));
		this._Department1 = default(EntityRef<Department>);
		this._Department2 = default(EntityRef<Department>);
		this._Department3 = default(EntityRef<Department>);
		this._Org = default(EntityRef<Org>);
		this._People = default(EntityRef<People>);
		OnCreated();
	}
	
	[Column(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int ID
	{
		get
		{
			return this._ID;
		}
		set
		{
			if ((this._ID != value))
			{
				this.OnIDChanging(value);
				this.SendPropertyChanging();
				this._ID = value;
				this.SendPropertyChanged("ID");
				this.OnIDChanged();
			}
		}
	}
	
	[Column(Storage="_Name", DbType="NVarChar(MAX)")]
	public string Name
	{
		get
		{
			return this._Name;
		}
		set
		{
			if ((this._Name != value))
			{
				this.OnNameChanging(value);
				this.SendPropertyChanging();
				this._Name = value;
				this.SendPropertyChanged("Name");
				this.OnNameChanged();
			}
		}
	}
	
	[Column(Storage="_OrgID", DbType="Int")]
	public System.Nullable<int> OrgID
	{
		get
		{
			return this._OrgID;
		}
		set
		{
			if ((this._OrgID != value))
			{
				if (this._Org.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnOrgIDChanging(value);
				this.SendPropertyChanging();
				this._OrgID = value;
				this.SendPropertyChanged("OrgID");
				this.OnOrgIDChanged();
			}
		}
	}
	
	[Column(Storage="_PeopleID", DbType="UniqueIdentifier")]
	public System.Nullable<System.Guid> PeopleID
	{
		get
		{
			return this._PeopleID;
		}
		set
		{
			if ((this._PeopleID != value))
			{
				if (this._People.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnPeopleIDChanging(value);
				this.SendPropertyChanging();
				this._PeopleID = value;
				this.SendPropertyChanged("PeopleID");
				this.OnPeopleIDChanged();
			}
		}
	}
	
	[Column(Storage="_Note", DbType="NVarChar(MAX)")]
	public string Note
	{
		get
		{
			return this._Note;
		}
		set
		{
			if ((this._Note != value))
			{
				this.OnNoteChanging(value);
				this.SendPropertyChanging();
				this._Note = value;
				this.SendPropertyChanged("Note");
				this.OnNoteChanged();
			}
		}
	}
	
	[Column(Storage="_Actor", DbType="NVarChar(MAX)")]
	public string Actor
	{
		get
		{
			return this._Actor;
		}
		set
		{
			if ((this._Actor != value))
			{
				this.OnActorChanging(value);
				this.SendPropertyChanging();
				this._Actor = value;
				this.SendPropertyChanged("Actor");
				this.OnActorChanged();
			}
		}
	}
	
	[Column(Storage="_Date", DbType="DateTime")]
	public System.Nullable<System.DateTime> Date
	{
		get
		{
			return this._Date;
		}
		set
		{
			if ((this._Date != value))
			{
				this.OnDateChanging(value);
				this.SendPropertyChanging();
				this._Date = value;
				this.SendPropertyChanged("Date");
				this.OnDateChanged();
			}
		}
	}
	
	[Column(Storage="_Type", DbType="Int", CanBeNull=true)]
	public Order.TypeX Type
	{
		get
		{
			return this._Type;
		}
		set
		{
			if ((this._Type != value))
			{
				this.OnTypeChanging(value);
				this.SendPropertyChanging();
				this._Type = value;
				this.SendPropertyChanged("Type");
				this.OnTypeChanged();
			}
		}
	}
	
	[Column(Storage="_Status", DbType="Int", CanBeNull=true)]
	public Order.StatusX Status
	{
		get
		{
			return this._Status;
		}
		set
		{
			if ((this._Status != value))
			{
				this.OnStatusChanging(value);
				this.SendPropertyChanging();
				this._Status = value;
				this.SendPropertyChanged("Status");
				this.OnStatusChanged();
			}
		}
	}
	
	[Column(Storage="_DepartmentID1", DbType="UniqueIdentifier")]
	public System.Nullable<System.Guid> DepartmentID1
	{
		get
		{
			return this._DepartmentID1;
		}
		set
		{
			if ((this._DepartmentID1 != value))
			{
				if (this._Department1.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnDepartmentID1Changing(value);
				this.SendPropertyChanging();
				this._DepartmentID1 = value;
				this.SendPropertyChanged("DepartmentID1");
				this.OnDepartmentID1Changed();
			}
		}
	}
	
	[Column(Storage="_DepartmentID2", DbType="UniqueIdentifier")]
	public System.Nullable<System.Guid> DepartmentID2
	{
		get
		{
			return this._DepartmentID2;
		}
		set
		{
			if ((this._DepartmentID2 != value))
			{
				if (this._Department2.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnDepartmentID2Changing(value);
				this.SendPropertyChanging();
				this._DepartmentID2 = value;
				this.SendPropertyChanged("DepartmentID2");
				this.OnDepartmentID2Changed();
			}
		}
	}
	
	[Column(Storage="_DepartmentID3", DbType="UniqueIdentifier")]
	public System.Nullable<System.Guid> DepartmentID3
	{
		get
		{
			return this._DepartmentID3;
		}
		set
		{
			if ((this._DepartmentID3 != value))
			{
				if (this._Department3.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnDepartmentID3Changing(value);
				this.SendPropertyChanging();
				this._DepartmentID3 = value;
				this.SendPropertyChanged("DepartmentID3");
				this.OnDepartmentID3Changed();
			}
		}
	}
	
	[Column(Storage="_Room", DbType="NVarChar(MAX)")]
	public string Room
	{
		get
		{
			return this._Room;
		}
		set
		{
			if ((this._Room != value))
			{
				this.OnRoomChanging(value);
				this.SendPropertyChanging();
				this._Room = value;
				this.SendPropertyChanged("Room");
				this.OnRoomChanged();
			}
		}
	}
	
	[Column(Storage="_Bed", DbType="NVarChar(MAX)")]
	public string Bed
	{
		get
		{
			return this._Bed;
		}
		set
		{
			if ((this._Bed != value))
			{
				this.OnBedChanging(value);
				this.SendPropertyChanging();
				this._Bed = value;
				this.SendPropertyChanged("Bed");
				this.OnBedChanged();
			}
		}
	}
	
	[Column(Storage="_Diagnosis", DbType="NVarChar(MAX)")]
	public string Diagnosis
	{
		get
		{
			return this._Diagnosis;
		}
		set
		{
			if ((this._Diagnosis != value))
			{
				this.OnDiagnosisChanging(value);
				this.SendPropertyChanging();
				this._Diagnosis = value;
				this.SendPropertyChanged("Diagnosis");
				this.OnDiagnosisChanged();
			}
		}
	}
	
	[Column(Storage="_PatientCode", DbType="NVarChar(MAX)")]
	public string PatientCode
	{
		get
		{
			return this._PatientCode;
		}
		set
		{
			if ((this._PatientCode != value))
			{
				this.OnPatientCodeChanging(value);
				this.SendPropertyChanging();
				this._PatientCode = value;
				this.SendPropertyChanged("PatientCode");
				this.OnPatientCodeChanged();
			}
		}
	}
	
	[Column(Storage="_TransfusionNote", DbType="NVarChar(MAX)")]
	public string TransfusionNote
	{
		get
		{
			return this._TransfusionNote;
		}
		set
		{
			if ((this._TransfusionNote != value))
			{
				this.OnTransfusionNoteChanging(value);
				this.SendPropertyChanging();
				this._TransfusionNote = value;
				this.SendPropertyChanged("TransfusionNote");
				this.OnTransfusionNoteChanged();
			}
		}
	}
	
	[Association(Name="Order_PackOrder", Storage="_PackOrders", ThisKey="ID", OtherKey="OrderID")]
	public EntitySet<PackOrder> PackOrders
	{
		get
		{
			return this._PackOrders;
		}
		set
		{
			this._PackOrders.Assign(value);
		}
	}
	
	[Association(Name="Department_Order", Storage="_Department1", ThisKey="DepartmentID1", OtherKey="ID", IsForeignKey=true)]
	public Department Department1
	{
		get
		{
			return this._Department1.Entity;
		}
		set
		{
			Department previousValue = this._Department1.Entity;
			if (((previousValue != value) 
						|| (this._Department1.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Department1.Entity = null;
					previousValue.OrdersByDepartment1.Remove(this);
				}
				this._Department1.Entity = value;
				if ((value != null))
				{
					value.OrdersByDepartment1.Add(this);
					this._DepartmentID1 = value.ID;
				}
				else
				{
					this._DepartmentID1 = default(Nullable<System.Guid>);
				}
				this.SendPropertyChanged("Department1");
			}
		}
	}
	
	[Association(Name="Department_Order1", Storage="_Department2", ThisKey="DepartmentID2", OtherKey="ID", IsForeignKey=true)]
	public Department Department2
	{
		get
		{
			return this._Department2.Entity;
		}
		set
		{
			Department previousValue = this._Department2.Entity;
			if (((previousValue != value) 
						|| (this._Department2.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Department2.Entity = null;
					previousValue.OrdersByDepartment2.Remove(this);
				}
				this._Department2.Entity = value;
				if ((value != null))
				{
					value.OrdersByDepartment2.Add(this);
					this._DepartmentID2 = value.ID;
				}
				else
				{
					this._DepartmentID2 = default(Nullable<System.Guid>);
				}
				this.SendPropertyChanged("Department2");
			}
		}
	}
	
	[Association(Name="Department_Order2", Storage="_Department3", ThisKey="DepartmentID3", OtherKey="ID", IsForeignKey=true)]
	public Department Department3
	{
		get
		{
			return this._Department3.Entity;
		}
		set
		{
			Department previousValue = this._Department3.Entity;
			if (((previousValue != value) 
						|| (this._Department3.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Department3.Entity = null;
					previousValue.OrdersByDepartment3.Remove(this);
				}
				this._Department3.Entity = value;
				if ((value != null))
				{
					value.OrdersByDepartment3.Add(this);
					this._DepartmentID3 = value.ID;
				}
				else
				{
					this._DepartmentID3 = default(Nullable<System.Guid>);
				}
				this.SendPropertyChanged("Department3");
			}
		}
	}
	
	[Association(Name="Org_Order", Storage="_Org", ThisKey="OrgID", OtherKey="ID", IsForeignKey=true)]
	public Org Org
	{
		get
		{
			return this._Org.Entity;
		}
		set
		{
			Org previousValue = this._Org.Entity;
			if (((previousValue != value) 
						|| (this._Org.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Org.Entity = null;
					previousValue.Orders.Remove(this);
				}
				this._Org.Entity = value;
				if ((value != null))
				{
					value.Orders.Add(this);
					this._OrgID = value.ID;
				}
				else
				{
					this._OrgID = default(Nullable<int>);
				}
				this.SendPropertyChanged("Org");
			}
		}
	}
	
	[Association(Name="People_Order", Storage="_People", ThisKey="PeopleID", OtherKey="ID", IsForeignKey=true)]
	public People People
	{
		get
		{
			return this._People.Entity;
		}
		set
		{
			People previousValue = this._People.Entity;
			if (((previousValue != value) 
						|| (this._People.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._People.Entity = null;
					previousValue.Orders.Remove(this);
				}
				this._People.Entity = value;
				if ((value != null))
				{
					value.Orders.Add(this);
					this._PeopleID = value.ID;
				}
				else
				{
					this._PeopleID = default(Nullable<System.Guid>);
				}
				this.SendPropertyChanged("People");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_PackOrders(PackOrder entity)
	{
		this.SendPropertyChanging();
		entity.Order = this;
	}
	
	private void detach_PackOrders(PackOrder entity)
	{
		this.SendPropertyChanging();
		entity.Order = null;
	}
}

[Table(Name="dbo.PackOrder")]
public partial class PackOrder : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _ID;
	
	private System.Nullable<System.Guid> _PackID;
	
	private System.Nullable<int> _OrderID;
	
	private PackOrder.StatusX _Status;
	
	private string _Actor;
	
	private string _Note;
	
	private System.Nullable<System.DateTime> _ReturnDate;
	
	private EntitySet<ReturnPackOrder> _ReturnPackOrders;
	
	private EntityRef<Order> _Order;
	
	private EntityRef<Pack> _Pack;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnPackIDChanging(System.Nullable<System.Guid> value);
    partial void OnPackIDChanged();
    partial void OnOrderIDChanging(System.Nullable<int> value);
    partial void OnOrderIDChanged();
    partial void OnStatusChanging(PackOrder.StatusX value);
    partial void OnStatusChanged();
    partial void OnActorChanging(string value);
    partial void OnActorChanged();
    partial void OnNoteChanging(string value);
    partial void OnNoteChanged();
    partial void OnReturnDateChanging(System.Nullable<System.DateTime> value);
    partial void OnReturnDateChanged();
    #endregion
	
	public PackOrder()
	{
		this._ReturnPackOrders = new EntitySet<ReturnPackOrder>(new Action<ReturnPackOrder>(this.attach_ReturnPackOrders), new Action<ReturnPackOrder>(this.detach_ReturnPackOrders));
		this._Order = default(EntityRef<Order>);
		this._Pack = default(EntityRef<Pack>);
		OnCreated();
	}
	
	[Column(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int ID
	{
		get
		{
			return this._ID;
		}
		set
		{
			if ((this._ID != value))
			{
				this.OnIDChanging(value);
				this.SendPropertyChanging();
				this._ID = value;
				this.SendPropertyChanged("ID");
				this.OnIDChanged();
			}
		}
	}
	
	[Column(Storage="_PackID", DbType="UniqueIdentifier")]
	public System.Nullable<System.Guid> PackID
	{
		get
		{
			return this._PackID;
		}
		set
		{
			if ((this._PackID != value))
			{
				if (this._Pack.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnPackIDChanging(value);
				this.SendPropertyChanging();
				this._PackID = value;
				this.SendPropertyChanged("PackID");
				this.OnPackIDChanged();
			}
		}
	}
	
	[Column(Storage="_OrderID", DbType="Int")]
	public System.Nullable<int> OrderID
	{
		get
		{
			return this._OrderID;
		}
		set
		{
			if ((this._OrderID != value))
			{
				if (this._Order.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnOrderIDChanging(value);
				this.SendPropertyChanging();
				this._OrderID = value;
				this.SendPropertyChanged("OrderID");
				this.OnOrderIDChanged();
			}
		}
	}
	
	[Column(Storage="_Status", DbType="Int", CanBeNull=true)]
	public PackOrder.StatusX Status
	{
		get
		{
			return this._Status;
		}
		set
		{
			if ((this._Status != value))
			{
				this.OnStatusChanging(value);
				this.SendPropertyChanging();
				this._Status = value;
				this.SendPropertyChanged("Status");
				this.OnStatusChanged();
			}
		}
	}
	
	[Column(Storage="_Actor", DbType="NVarChar(MAX)")]
	public string Actor
	{
		get
		{
			return this._Actor;
		}
		set
		{
			if ((this._Actor != value))
			{
				this.OnActorChanging(value);
				this.SendPropertyChanging();
				this._Actor = value;
				this.SendPropertyChanged("Actor");
				this.OnActorChanged();
			}
		}
	}
	
	[Column(Storage="_Note", DbType="NVarChar(MAX)")]
	public string Note
	{
		get
		{
			return this._Note;
		}
		set
		{
			if ((this._Note != value))
			{
				this.OnNoteChanging(value);
				this.SendPropertyChanging();
				this._Note = value;
				this.SendPropertyChanged("Note");
				this.OnNoteChanged();
			}
		}
	}
	
	[Column(Storage="_ReturnDate", DbType="DateTime")]
	public System.Nullable<System.DateTime> ReturnDate
	{
		get
		{
			return this._ReturnDate;
		}
		set
		{
			if ((this._ReturnDate != value))
			{
				this.OnReturnDateChanging(value);
				this.SendPropertyChanging();
				this._ReturnDate = value;
				this.SendPropertyChanged("ReturnDate");
				this.OnReturnDateChanged();
			}
		}
	}
	
	[Association(Name="PackOrder_ReturnPackOrder", Storage="_ReturnPackOrders", ThisKey="ID", OtherKey="PackOrderID")]
	public EntitySet<ReturnPackOrder> ReturnPackOrders
	{
		get
		{
			return this._ReturnPackOrders;
		}
		set
		{
			this._ReturnPackOrders.Assign(value);
		}
	}
	
	[Association(Name="Order_PackOrder", Storage="_Order", ThisKey="OrderID", OtherKey="ID", IsForeignKey=true)]
	public Order Order
	{
		get
		{
			return this._Order.Entity;
		}
		set
		{
			Order previousValue = this._Order.Entity;
			if (((previousValue != value) 
						|| (this._Order.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Order.Entity = null;
					previousValue.PackOrders.Remove(this);
				}
				this._Order.Entity = value;
				if ((value != null))
				{
					value.PackOrders.Add(this);
					this._OrderID = value.ID;
				}
				else
				{
					this._OrderID = default(Nullable<int>);
				}
				this.SendPropertyChanged("Order");
			}
		}
	}
	
	[Association(Name="Pack_PackOrder", Storage="_Pack", ThisKey="PackID", OtherKey="ID", IsForeignKey=true)]
	public Pack Pack
	{
		get
		{
			return this._Pack.Entity;
		}
		set
		{
			Pack previousValue = this._Pack.Entity;
			if (((previousValue != value) 
						|| (this._Pack.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Pack.Entity = null;
					previousValue.PackOrders.Remove(this);
				}
				this._Pack.Entity = value;
				if ((value != null))
				{
					value.PackOrders.Add(this);
					this._PackID = value.ID;
				}
				else
				{
					this._PackID = default(Nullable<System.Guid>);
				}
				this.SendPropertyChanged("Pack");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_ReturnPackOrders(ReturnPackOrder entity)
	{
		this.SendPropertyChanging();
		entity.PackOrder = this;
	}
	
	private void detach_ReturnPackOrders(ReturnPackOrder entity)
	{
		this.SendPropertyChanging();
		entity.PackOrder = null;
	}
}

[Table(Name="dbo.StoreFinalize")]
public partial class StoreFinalize : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _ID;
	
	private System.Nullable<System.DateTime> _Date;
	
	private PackTransaction.TypeX _Type;
	
	private System.Nullable<int> _Count;
	
	private string _Note;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnDateChanging(System.Nullable<System.DateTime> value);
    partial void OnDateChanged();
    partial void OnTypeChanging(PackTransaction.TypeX value);
    partial void OnTypeChanged();
    partial void OnCountChanging(System.Nullable<int> value);
    partial void OnCountChanged();
    partial void OnNoteChanging(string value);
    partial void OnNoteChanged();
    #endregion
	
	public StoreFinalize()
	{
		OnCreated();
	}
	
	[Column(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int ID
	{
		get
		{
			return this._ID;
		}
		set
		{
			if ((this._ID != value))
			{
				this.OnIDChanging(value);
				this.SendPropertyChanging();
				this._ID = value;
				this.SendPropertyChanged("ID");
				this.OnIDChanged();
			}
		}
	}
	
	[Column(Storage="_Date", DbType="DateTime")]
	public System.Nullable<System.DateTime> Date
	{
		get
		{
			return this._Date;
		}
		set
		{
			if ((this._Date != value))
			{
				this.OnDateChanging(value);
				this.SendPropertyChanging();
				this._Date = value;
				this.SendPropertyChanged("Date");
				this.OnDateChanged();
			}
		}
	}
	
	[Column(Storage="_Type", DbType="Int", CanBeNull=true)]
	public PackTransaction.TypeX Type
	{
		get
		{
			return this._Type;
		}
		set
		{
			if ((this._Type != value))
			{
				this.OnTypeChanging(value);
				this.SendPropertyChanging();
				this._Type = value;
				this.SendPropertyChanged("Type");
				this.OnTypeChanged();
			}
		}
	}
	
	[Column(Storage="_Count", DbType="Int")]
	public System.Nullable<int> Count
	{
		get
		{
			return this._Count;
		}
		set
		{
			if ((this._Count != value))
			{
				this.OnCountChanging(value);
				this.SendPropertyChanging();
				this._Count = value;
				this.SendPropertyChanged("Count");
				this.OnCountChanged();
			}
		}
	}
	
	[Column(Storage="_Note", DbType="NVarChar(MAX)")]
	public string Note
	{
		get
		{
			return this._Note;
		}
		set
		{
			if ((this._Note != value))
			{
				this.OnNoteChanging(value);
				this.SendPropertyChanging();
				this._Note = value;
				this.SendPropertyChanged("Note");
				this.OnNoteChanged();
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}

[Table(Name="dbo.PackRemainDaily")]
public partial class PackRemainDaily : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _ID;
	
	private System.Nullable<System.Guid> _PackID;
	
	private System.Nullable<System.DateTime> _Date;
	
	private Pack.StatusX _Status;
	
	private string _Note;
	
	private EntityRef<Pack> _Pack;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnPackIDChanging(System.Nullable<System.Guid> value);
    partial void OnPackIDChanged();
    partial void OnDateChanging(System.Nullable<System.DateTime> value);
    partial void OnDateChanged();
    partial void OnStatusChanging(Pack.StatusX value);
    partial void OnStatusChanged();
    partial void OnNoteChanging(string value);
    partial void OnNoteChanged();
    #endregion
	
	public PackRemainDaily()
	{
		this._Pack = default(EntityRef<Pack>);
		OnCreated();
	}
	
	[Column(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int ID
	{
		get
		{
			return this._ID;
		}
		set
		{
			if ((this._ID != value))
			{
				this.OnIDChanging(value);
				this.SendPropertyChanging();
				this._ID = value;
				this.SendPropertyChanged("ID");
				this.OnIDChanged();
			}
		}
	}
	
	[Column(Storage="_PackID", DbType="UniqueIdentifier")]
	public System.Nullable<System.Guid> PackID
	{
		get
		{
			return this._PackID;
		}
		set
		{
			if ((this._PackID != value))
			{
				if (this._Pack.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnPackIDChanging(value);
				this.SendPropertyChanging();
				this._PackID = value;
				this.SendPropertyChanged("PackID");
				this.OnPackIDChanged();
			}
		}
	}
	
	[Column(Storage="_Date", DbType="DateTime")]
	public System.Nullable<System.DateTime> Date
	{
		get
		{
			return this._Date;
		}
		set
		{
			if ((this._Date != value))
			{
				this.OnDateChanging(value);
				this.SendPropertyChanging();
				this._Date = value;
				this.SendPropertyChanged("Date");
				this.OnDateChanged();
			}
		}
	}
	
	[Column(Storage="_Status", DbType="Int", CanBeNull=true)]
	public Pack.StatusX Status
	{
		get
		{
			return this._Status;
		}
		set
		{
			if ((this._Status != value))
			{
				this.OnStatusChanging(value);
				this.SendPropertyChanging();
				this._Status = value;
				this.SendPropertyChanged("Status");
				this.OnStatusChanged();
			}
		}
	}
	
	[Column(Storage="_Note", DbType="NVarChar(MAX)")]
	public string Note
	{
		get
		{
			return this._Note;
		}
		set
		{
			if ((this._Note != value))
			{
				this.OnNoteChanging(value);
				this.SendPropertyChanging();
				this._Note = value;
				this.SendPropertyChanged("Note");
				this.OnNoteChanged();
			}
		}
	}
	
	[Association(Name="Pack_PackRemainDaily", Storage="_Pack", ThisKey="PackID", OtherKey="ID", IsForeignKey=true)]
	public Pack Pack
	{
		get
		{
			return this._Pack.Entity;
		}
		set
		{
			Pack previousValue = this._Pack.Entity;
			if (((previousValue != value) 
						|| (this._Pack.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Pack.Entity = null;
					previousValue.PackRemainDailies.Remove(this);
				}
				this._Pack.Entity = value;
				if ((value != null))
				{
					value.PackRemainDailies.Add(this);
					this._PackID = value.ID;
				}
				else
				{
					this._PackID = default(Nullable<System.Guid>);
				}
				this.SendPropertyChanged("Pack");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}

[Table(Name="dbo.PrintSetting")]
public partial class PrintSetting : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _ID;
	
	private string _Name;
	
	private string _Top;
	
	private string _Left;
	
	private string _Font;
	
	private string _Size;
	
	private string _Note;
	
	private PrintSetting.TypeX _Type;
	
	private string _Width;
	
	private string _Height;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnTopChanging(string value);
    partial void OnTopChanged();
    partial void OnLeftChanging(string value);
    partial void OnLeftChanged();
    partial void OnFontChanging(string value);
    partial void OnFontChanged();
    partial void OnSizeChanging(string value);
    partial void OnSizeChanged();
    partial void OnNoteChanging(string value);
    partial void OnNoteChanged();
    partial void OnTypeChanging(PrintSetting.TypeX value);
    partial void OnTypeChanged();
    partial void OnWidthChanging(string value);
    partial void OnWidthChanged();
    partial void OnHeightChanging(string value);
    partial void OnHeightChanged();
    #endregion
	
	public PrintSetting()
	{
		OnCreated();
	}
	
	[Column(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int ID
	{
		get
		{
			return this._ID;
		}
		set
		{
			if ((this._ID != value))
			{
				this.OnIDChanging(value);
				this.SendPropertyChanging();
				this._ID = value;
				this.SendPropertyChanged("ID");
				this.OnIDChanged();
			}
		}
	}
	
	[Column(Storage="_Name", DbType="NVarChar(MAX)")]
	public string Name
	{
		get
		{
			return this._Name;
		}
		set
		{
			if ((this._Name != value))
			{
				this.OnNameChanging(value);
				this.SendPropertyChanging();
				this._Name = value;
				this.SendPropertyChanged("Name");
				this.OnNameChanged();
			}
		}
	}
	
	[Column(Name="[Top]", Storage="_Top", DbType="NVarChar(MAX)")]
	public string Top
	{
		get
		{
			return this._Top;
		}
		set
		{
			if ((this._Top != value))
			{
				this.OnTopChanging(value);
				this.SendPropertyChanging();
				this._Top = value;
				this.SendPropertyChanged("Top");
				this.OnTopChanged();
			}
		}
	}
	
	[Column(Name="[Left]", Storage="_Left", DbType="NVarChar(MAX)")]
	public string Left
	{
		get
		{
			return this._Left;
		}
		set
		{
			if ((this._Left != value))
			{
				this.OnLeftChanging(value);
				this.SendPropertyChanging();
				this._Left = value;
				this.SendPropertyChanged("Left");
				this.OnLeftChanged();
			}
		}
	}
	
	[Column(Storage="_Font", DbType="NVarChar(MAX)")]
	public string Font
	{
		get
		{
			return this._Font;
		}
		set
		{
			if ((this._Font != value))
			{
				this.OnFontChanging(value);
				this.SendPropertyChanging();
				this._Font = value;
				this.SendPropertyChanged("Font");
				this.OnFontChanged();
			}
		}
	}
	
	[Column(Storage="_Size", DbType="NVarChar(MAX)")]
	public string Size
	{
		get
		{
			return this._Size;
		}
		set
		{
			if ((this._Size != value))
			{
				this.OnSizeChanging(value);
				this.SendPropertyChanging();
				this._Size = value;
				this.SendPropertyChanged("Size");
				this.OnSizeChanged();
			}
		}
	}
	
	[Column(Storage="_Note", DbType="NVarChar(MAX)")]
	public string Note
	{
		get
		{
			return this._Note;
		}
		set
		{
			if ((this._Note != value))
			{
				this.OnNoteChanging(value);
				this.SendPropertyChanging();
				this._Note = value;
				this.SendPropertyChanged("Note");
				this.OnNoteChanged();
			}
		}
	}
	
	[Column(Storage="_Type", DbType="Int", CanBeNull=true)]
	public PrintSetting.TypeX Type
	{
		get
		{
			return this._Type;
		}
		set
		{
			if ((this._Type != value))
			{
				this.OnTypeChanging(value);
				this.SendPropertyChanging();
				this._Type = value;
				this.SendPropertyChanged("Type");
				this.OnTypeChanged();
			}
		}
	}
	
	[Column(Storage="_Width", DbType="NVarChar(MAX)")]
	public string Width
	{
		get
		{
			return this._Width;
		}
		set
		{
			if ((this._Width != value))
			{
				this.OnWidthChanging(value);
				this.SendPropertyChanging();
				this._Width = value;
				this.SendPropertyChanged("Width");
				this.OnWidthChanged();
			}
		}
	}
	
	[Column(Storage="_Height", DbType="NVarChar(MAX)")]
	public string Height
	{
		get
		{
			return this._Height;
		}
		set
		{
			if ((this._Height != value))
			{
				this.OnHeightChanging(value);
				this.SendPropertyChanging();
				this._Height = value;
				this.SendPropertyChanged("Height");
				this.OnHeightChanged();
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}

[Table(Name="dbo.Product")]
public partial class Product : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private string _Code;
	
	private string _Description;
	
	private System.Nullable<System.DateTime> _Date;
	
	private System.Nullable<System.DateTime> _RetiredDate;
	
	private System.Nullable<System.DateTime> _Duration;
	
	private System.Nullable<int> _OriginalVolume;
	
	private string _StoredTemperature;
	
	private string _AdditiveSolution;
	
	private string _LabelDesc;
	
	private EntitySet<Pack> _Packs;
	
	private EntitySet<ReceiptProduct> _ReceiptProducts;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCodeChanging(string value);
    partial void OnCodeChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnDateChanging(System.Nullable<System.DateTime> value);
    partial void OnDateChanged();
    partial void OnRetiredDateChanging(System.Nullable<System.DateTime> value);
    partial void OnRetiredDateChanged();
    partial void OnDurationChanging(System.Nullable<System.DateTime> value);
    partial void OnDurationChanged();
    partial void OnOriginalVolumeChanging(System.Nullable<int> value);
    partial void OnOriginalVolumeChanged();
    partial void OnStoredTemperatureChanging(string value);
    partial void OnStoredTemperatureChanged();
    partial void OnAdditiveSolutionChanging(string value);
    partial void OnAdditiveSolutionChanged();
    partial void OnLabelDescChanging(string value);
    partial void OnLabelDescChanged();
    #endregion
	
	public Product()
	{
		this._Packs = new EntitySet<Pack>(new Action<Pack>(this.attach_Packs), new Action<Pack>(this.detach_Packs));
		this._ReceiptProducts = new EntitySet<ReceiptProduct>(new Action<ReceiptProduct>(this.attach_ReceiptProducts), new Action<ReceiptProduct>(this.detach_ReceiptProducts));
		OnCreated();
	}
	
	[Column(Storage="_Code", DbType="NVarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
	public string Code
	{
		get
		{
			return this._Code;
		}
		set
		{
			if ((this._Code != value))
			{
				this.OnCodeChanging(value);
				this.SendPropertyChanging();
				this._Code = value;
				this.SendPropertyChanged("Code");
				this.OnCodeChanged();
			}
		}
	}
	
	[Column(Storage="_Description", DbType="NVarChar(MAX)")]
	public string Description
	{
		get
		{
			return this._Description;
		}
		set
		{
			if ((this._Description != value))
			{
				this.OnDescriptionChanging(value);
				this.SendPropertyChanging();
				this._Description = value;
				this.SendPropertyChanged("Description");
				this.OnDescriptionChanged();
			}
		}
	}
	
	[Column(Storage="_Date", DbType="DateTime")]
	public System.Nullable<System.DateTime> Date
	{
		get
		{
			return this._Date;
		}
		set
		{
			if ((this._Date != value))
			{
				this.OnDateChanging(value);
				this.SendPropertyChanging();
				this._Date = value;
				this.SendPropertyChanged("Date");
				this.OnDateChanged();
			}
		}
	}
	
	[Column(Storage="_RetiredDate", DbType="DateTime")]
	public System.Nullable<System.DateTime> RetiredDate
	{
		get
		{
			return this._RetiredDate;
		}
		set
		{
			if ((this._RetiredDate != value))
			{
				this.OnRetiredDateChanging(value);
				this.SendPropertyChanging();
				this._RetiredDate = value;
				this.SendPropertyChanged("RetiredDate");
				this.OnRetiredDateChanged();
			}
		}
	}
	
	[Column(Storage="_Duration", DbType="DateTime")]
	public System.Nullable<System.DateTime> Duration
	{
		get
		{
			return this._Duration;
		}
		set
		{
			if ((this._Duration != value))
			{
				this.OnDurationChanging(value);
				this.SendPropertyChanging();
				this._Duration = value;
				this.SendPropertyChanged("Duration");
				this.OnDurationChanged();
			}
		}
	}
	
	[Column(Storage="_OriginalVolume", DbType="Int")]
	public System.Nullable<int> OriginalVolume
	{
		get
		{
			return this._OriginalVolume;
		}
		set
		{
			if ((this._OriginalVolume != value))
			{
				this.OnOriginalVolumeChanging(value);
				this.SendPropertyChanging();
				this._OriginalVolume = value;
				this.SendPropertyChanged("OriginalVolume");
				this.OnOriginalVolumeChanged();
			}
		}
	}
	
	[Column(Storage="_StoredTemperature", DbType="NVarChar(MAX)")]
	public string StoredTemperature
	{
		get
		{
			return this._StoredTemperature;
		}
		set
		{
			if ((this._StoredTemperature != value))
			{
				this.OnStoredTemperatureChanging(value);
				this.SendPropertyChanging();
				this._StoredTemperature = value;
				this.SendPropertyChanged("StoredTemperature");
				this.OnStoredTemperatureChanged();
			}
		}
	}
	
	[Column(Storage="_AdditiveSolution", DbType="NVarChar(MAX)")]
	public string AdditiveSolution
	{
		get
		{
			return this._AdditiveSolution;
		}
		set
		{
			if ((this._AdditiveSolution != value))
			{
				this.OnAdditiveSolutionChanging(value);
				this.SendPropertyChanging();
				this._AdditiveSolution = value;
				this.SendPropertyChanged("AdditiveSolution");
				this.OnAdditiveSolutionChanged();
			}
		}
	}
	
	[Column(Storage="_LabelDesc", DbType="NVarChar(MAX)")]
	public string LabelDesc
	{
		get
		{
			return this._LabelDesc;
		}
		set
		{
			if ((this._LabelDesc != value))
			{
				this.OnLabelDescChanging(value);
				this.SendPropertyChanging();
				this._LabelDesc = value;
				this.SendPropertyChanged("LabelDesc");
				this.OnLabelDescChanged();
			}
		}
	}
	
	[Association(Name="Product_Pack", Storage="_Packs", ThisKey="Code", OtherKey="ProductCode")]
	public EntitySet<Pack> Packs
	{
		get
		{
			return this._Packs;
		}
		set
		{
			this._Packs.Assign(value);
		}
	}
	
	[Association(Name="Product_ReceiptProduct", Storage="_ReceiptProducts", ThisKey="Code", OtherKey="ProductCode")]
	public EntitySet<ReceiptProduct> ReceiptProducts
	{
		get
		{
			return this._ReceiptProducts;
		}
		set
		{
			this._ReceiptProducts.Assign(value);
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_Packs(Pack entity)
	{
		this.SendPropertyChanging();
		entity.Product = this;
	}
	
	private void detach_Packs(Pack entity)
	{
		this.SendPropertyChanging();
		entity.Product = null;
	}
	
	private void attach_ReceiptProducts(ReceiptProduct entity)
	{
		this.SendPropertyChanging();
		entity.Product = this;
	}
	
	private void detach_ReceiptProducts(ReceiptProduct entity)
	{
		this.SendPropertyChanging();
		entity.Product = null;
	}
}

[Table(Name="dbo.Receipt")]
public partial class Receipt : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private System.Guid _ID;
	
	private string _Name;
	
	private string _Note;
	
	private EntitySet<ReceiptProduct> _ReceiptProducts;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(System.Guid value);
    partial void OnIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnNoteChanging(string value);
    partial void OnNoteChanged();
    #endregion
	
	public Receipt()
	{
		this._ReceiptProducts = new EntitySet<ReceiptProduct>(new Action<ReceiptProduct>(this.attach_ReceiptProducts), new Action<ReceiptProduct>(this.detach_ReceiptProducts));
		OnCreated();
	}
	
	[Column(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true, IsDbGenerated=true)]
	public System.Guid ID
	{
		get
		{
			return this._ID;
		}
		set
		{
			if ((this._ID != value))
			{
				this.OnIDChanging(value);
				this.SendPropertyChanging();
				this._ID = value;
				this.SendPropertyChanged("ID");
				this.OnIDChanged();
			}
		}
	}
	
	[Column(Storage="_Name", DbType="NVarChar(MAX)")]
	public string Name
	{
		get
		{
			return this._Name;
		}
		set
		{
			if ((this._Name != value))
			{
				this.OnNameChanging(value);
				this.SendPropertyChanging();
				this._Name = value;
				this.SendPropertyChanged("Name");
				this.OnNameChanged();
			}
		}
	}
	
	[Column(Storage="_Note", DbType="NVarChar(MAX)")]
	public string Note
	{
		get
		{
			return this._Note;
		}
		set
		{
			if ((this._Note != value))
			{
				this.OnNoteChanging(value);
				this.SendPropertyChanging();
				this._Note = value;
				this.SendPropertyChanged("Note");
				this.OnNoteChanged();
			}
		}
	}
	
	[Association(Name="Receipt_ReceiptProduct", Storage="_ReceiptProducts", ThisKey="ID", OtherKey="ReceiptID")]
	public EntitySet<ReceiptProduct> ReceiptProducts
	{
		get
		{
			return this._ReceiptProducts;
		}
		set
		{
			this._ReceiptProducts.Assign(value);
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_ReceiptProducts(ReceiptProduct entity)
	{
		this.SendPropertyChanging();
		entity.Receipt = this;
	}
	
	private void detach_ReceiptProducts(ReceiptProduct entity)
	{
		this.SendPropertyChanging();
		entity.Receipt = null;
	}
}

[Table(Name="dbo.ReceiptProduct")]
public partial class ReceiptProduct : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private System.Guid _ID;
	
	private System.Nullable<System.Guid> _ReceiptID;
	
	private string _ProductCode;
	
	private ReceiptProduct.TypeX _Type;
	
	private EntityRef<Product> _Product;
	
	private EntityRef<Receipt> _Receipt;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(System.Guid value);
    partial void OnIDChanged();
    partial void OnReceiptIDChanging(System.Nullable<System.Guid> value);
    partial void OnReceiptIDChanged();
    partial void OnProductCodeChanging(string value);
    partial void OnProductCodeChanged();
    partial void OnTypeChanging(ReceiptProduct.TypeX value);
    partial void OnTypeChanged();
    #endregion
	
	public ReceiptProduct()
	{
		this._Product = default(EntityRef<Product>);
		this._Receipt = default(EntityRef<Receipt>);
		OnCreated();
	}
	
	[Column(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true, IsDbGenerated=true)]
	public System.Guid ID
	{
		get
		{
			return this._ID;
		}
		set
		{
			if ((this._ID != value))
			{
				this.OnIDChanging(value);
				this.SendPropertyChanging();
				this._ID = value;
				this.SendPropertyChanged("ID");
				this.OnIDChanged();
			}
		}
	}
	
	[Column(Storage="_ReceiptID", DbType="UniqueIdentifier")]
	public System.Nullable<System.Guid> ReceiptID
	{
		get
		{
			return this._ReceiptID;
		}
		set
		{
			if ((this._ReceiptID != value))
			{
				if (this._Receipt.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnReceiptIDChanging(value);
				this.SendPropertyChanging();
				this._ReceiptID = value;
				this.SendPropertyChanged("ReceiptID");
				this.OnReceiptIDChanged();
			}
		}
	}
	
	[Column(Storage="_ProductCode", DbType="NVarChar(50)")]
	public string ProductCode
	{
		get
		{
			return this._ProductCode;
		}
		set
		{
			if ((this._ProductCode != value))
			{
				if (this._Product.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnProductCodeChanging(value);
				this.SendPropertyChanging();
				this._ProductCode = value;
				this.SendPropertyChanged("ProductCode");
				this.OnProductCodeChanged();
			}
		}
	}
	
	[Column(Storage="_Type", DbType="Int", CanBeNull=true)]
	public ReceiptProduct.TypeX Type
	{
		get
		{
			return this._Type;
		}
		set
		{
			if ((this._Type != value))
			{
				this.OnTypeChanging(value);
				this.SendPropertyChanging();
				this._Type = value;
				this.SendPropertyChanged("Type");
				this.OnTypeChanged();
			}
		}
	}
	
	[Association(Name="Product_ReceiptProduct", Storage="_Product", ThisKey="ProductCode", OtherKey="Code", IsForeignKey=true)]
	public Product Product
	{
		get
		{
			return this._Product.Entity;
		}
		set
		{
			Product previousValue = this._Product.Entity;
			if (((previousValue != value) 
						|| (this._Product.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Product.Entity = null;
					previousValue.ReceiptProducts.Remove(this);
				}
				this._Product.Entity = value;
				if ((value != null))
				{
					value.ReceiptProducts.Add(this);
					this._ProductCode = value.Code;
				}
				else
				{
					this._ProductCode = default(string);
				}
				this.SendPropertyChanged("Product");
			}
		}
	}
	
	[Association(Name="Receipt_ReceiptProduct", Storage="_Receipt", ThisKey="ReceiptID", OtherKey="ID", IsForeignKey=true)]
	public Receipt Receipt
	{
		get
		{
			return this._Receipt.Entity;
		}
		set
		{
			Receipt previousValue = this._Receipt.Entity;
			if (((previousValue != value) 
						|| (this._Receipt.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Receipt.Entity = null;
					previousValue.ReceiptProducts.Remove(this);
				}
				this._Receipt.Entity = value;
				if ((value != null))
				{
					value.ReceiptProducts.Add(this);
					this._ReceiptID = value.ID;
				}
				else
				{
					this._ReceiptID = default(Nullable<System.Guid>);
				}
				this.SendPropertyChanged("Receipt");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}

[Table(Name="dbo.[Log]")]
public partial class Log : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _ID;
	
	private string _Method;
	
	private string _Actor;
	
	private System.Nullable<System.DateTime> _Date;
	
	private string _Note;
	
	private Log.StatusX _Status;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnMethodChanging(string value);
    partial void OnMethodChanged();
    partial void OnActorChanging(string value);
    partial void OnActorChanged();
    partial void OnDateChanging(System.Nullable<System.DateTime> value);
    partial void OnDateChanged();
    partial void OnNoteChanging(string value);
    partial void OnNoteChanged();
    partial void OnStatusChanging(Log.StatusX value);
    partial void OnStatusChanged();
    #endregion
	
	public Log()
	{
		OnCreated();
	}
	
	[Column(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int ID
	{
		get
		{
			return this._ID;
		}
		set
		{
			if ((this._ID != value))
			{
				this.OnIDChanging(value);
				this.SendPropertyChanging();
				this._ID = value;
				this.SendPropertyChanged("ID");
				this.OnIDChanged();
			}
		}
	}
	
	[Column(Storage="_Method", DbType="NVarChar(MAX)")]
	public string Method
	{
		get
		{
			return this._Method;
		}
		set
		{
			if ((this._Method != value))
			{
				this.OnMethodChanging(value);
				this.SendPropertyChanging();
				this._Method = value;
				this.SendPropertyChanged("Method");
				this.OnMethodChanged();
			}
		}
	}
	
	[Column(Storage="_Actor", DbType="NVarChar(MAX)")]
	public string Actor
	{
		get
		{
			return this._Actor;
		}
		set
		{
			if ((this._Actor != value))
			{
				this.OnActorChanging(value);
				this.SendPropertyChanging();
				this._Actor = value;
				this.SendPropertyChanged("Actor");
				this.OnActorChanged();
			}
		}
	}
	
	[Column(Storage="_Date", AutoSync=AutoSync.OnInsert, DbType="DateTime", IsDbGenerated=true)]
	public System.Nullable<System.DateTime> Date
	{
		get
		{
			return this._Date;
		}
		set
		{
			if ((this._Date != value))
			{
				this.OnDateChanging(value);
				this.SendPropertyChanging();
				this._Date = value;
				this.SendPropertyChanged("Date");
				this.OnDateChanged();
			}
		}
	}
	
	[Column(Storage="_Note", DbType="NVarChar(MAX)")]
	public string Note
	{
		get
		{
			return this._Note;
		}
		set
		{
			if ((this._Note != value))
			{
				this.OnNoteChanging(value);
				this.SendPropertyChanging();
				this._Note = value;
				this.SendPropertyChanged("Note");
				this.OnNoteChanged();
			}
		}
	}
	
	[Column(Storage="_Status", DbType="Int", CanBeNull=true)]
	public Log.StatusX Status
	{
		get
		{
			return this._Status;
		}
		set
		{
			if ((this._Status != value))
			{
				this.OnStatusChanging(value);
				this.SendPropertyChanging();
				this._Status = value;
				this.SendPropertyChanged("Status");
				this.OnStatusChanged();
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}

[Table(Name="dbo.vw_ProductCount")]
public partial class vw_ProductCount
{
	
	private string _ProductCode;
	
	private string _ProductDesc;
	
	private Pack.StatusX _Status;
	
	private string _BloodGroup;
	
	private Donation.TestResultStatusX _TestResultStatus;
	
	private System.Nullable<int> _Count;
	
	private System.Nullable<int> _Volume;
	
	private System.Nullable<System.DateTime> _ExpirationDate;
	
	public vw_ProductCount()
	{
	}
	
	[Column(Storage="_ProductCode", DbType="NVarChar(50)")]
	public string ProductCode
	{
		get
		{
			return this._ProductCode;
		}
		set
		{
			if ((this._ProductCode != value))
			{
				this._ProductCode = value;
			}
		}
	}
	
	[Column(Storage="_ProductDesc", DbType="NVarChar(MAX)")]
	public string ProductDesc
	{
		get
		{
			return this._ProductDesc;
		}
		set
		{
			if ((this._ProductDesc != value))
			{
				this._ProductDesc = value;
			}
		}
	}
	
	[Column(Storage="_Status", DbType="Int", CanBeNull=true)]
	public Pack.StatusX Status
	{
		get
		{
			return this._Status;
		}
		set
		{
			if ((this._Status != value))
			{
				this._Status = value;
			}
		}
	}
	
	[Column(Storage="_BloodGroup", DbType="NVarChar(MAX)")]
	public string BloodGroup
	{
		get
		{
			return this._BloodGroup;
		}
		set
		{
			if ((this._BloodGroup != value))
			{
				this._BloodGroup = value;
			}
		}
	}
	
	[Column(Storage="_TestResultStatus", DbType="Int", CanBeNull=true)]
	public Donation.TestResultStatusX TestResultStatus
	{
		get
		{
			return this._TestResultStatus;
		}
		set
		{
			if ((this._TestResultStatus != value))
			{
				this._TestResultStatus = value;
			}
		}
	}
	
	[Column(Storage="_Count", DbType="Int")]
	public System.Nullable<int> Count
	{
		get
		{
			return this._Count;
		}
		set
		{
			if ((this._Count != value))
			{
				this._Count = value;
			}
		}
	}
	
	[Column(Storage="_Volume", DbType="Int")]
	public System.Nullable<int> Volume
	{
		get
		{
			return this._Volume;
		}
		set
		{
			if ((this._Volume != value))
			{
				this._Volume = value;
			}
		}
	}
	
	[Column(Storage="_ExpirationDate", DbType="DateTime")]
	public System.Nullable<System.DateTime> ExpirationDate
	{
		get
		{
			return this._ExpirationDate;
		}
		set
		{
			if ((this._ExpirationDate != value))
			{
				this._ExpirationDate = value;
			}
		}
	}
}

[Table(Name="dbo.vw_PackRemainDaily")]
public partial class vw_PackRemainDaily
{
	
	private string _ProductCode;
	
	private string _ProductDesc;
	
	private string _BloodGroup;
	
	private System.Nullable<int> _Count;
	
	private System.Nullable<System.DateTime> _Date;
	
	private System.Nullable<int> _Volume;
	
	public vw_PackRemainDaily()
	{
	}
	
	[Column(Storage="_ProductCode", DbType="NVarChar(50)")]
	public string ProductCode
	{
		get
		{
			return this._ProductCode;
		}
		set
		{
			if ((this._ProductCode != value))
			{
				this._ProductCode = value;
			}
		}
	}
	
	[Column(Storage="_ProductDesc", DbType="NVarChar(MAX)")]
	public string ProductDesc
	{
		get
		{
			return this._ProductDesc;
		}
		set
		{
			if ((this._ProductDesc != value))
			{
				this._ProductDesc = value;
			}
		}
	}
	
	[Column(Storage="_BloodGroup", DbType="NVarChar(MAX)")]
	public string BloodGroup
	{
		get
		{
			return this._BloodGroup;
		}
		set
		{
			if ((this._BloodGroup != value))
			{
				this._BloodGroup = value;
			}
		}
	}
	
	[Column(Storage="_Count", DbType="Int")]
	public System.Nullable<int> Count
	{
		get
		{
			return this._Count;
		}
		set
		{
			if ((this._Count != value))
			{
				this._Count = value;
			}
		}
	}
	
	[Column(Storage="_Date", DbType="DateTime")]
	public System.Nullable<System.DateTime> Date
	{
		get
		{
			return this._Date;
		}
		set
		{
			if ((this._Date != value))
			{
				this._Date = value;
			}
		}
	}
	
	[Column(Storage="_Volume", DbType="Int")]
	public System.Nullable<int> Volume
	{
		get
		{
			return this._Volume;
		}
		set
		{
			if ((this._Volume != value))
			{
				this._Volume = value;
			}
		}
	}
}

[Table(Name="dbo.vw_PackTrans")]
public partial class vw_PackTran
{
	
	private string _ProductCode;
	
	private string _ProductDesc;
	
	private string _BloodGroup;
	
	private PackTransaction.TypeX _Type;
	
	private System.Nullable<System.DateTime> _Date;
	
	private System.Nullable<int> _Volume;
	
	private System.Nullable<int> _Count;
	
	public vw_PackTran()
	{
	}
	
	[Column(Storage="_ProductCode", DbType="NVarChar(50)")]
	public string ProductCode
	{
		get
		{
			return this._ProductCode;
		}
		set
		{
			if ((this._ProductCode != value))
			{
				this._ProductCode = value;
			}
		}
	}
	
	[Column(Storage="_ProductDesc", DbType="NVarChar(MAX)")]
	public string ProductDesc
	{
		get
		{
			return this._ProductDesc;
		}
		set
		{
			if ((this._ProductDesc != value))
			{
				this._ProductDesc = value;
			}
		}
	}
	
	[Column(Storage="_BloodGroup", DbType="NVarChar(MAX)")]
	public string BloodGroup
	{
		get
		{
			return this._BloodGroup;
		}
		set
		{
			if ((this._BloodGroup != value))
			{
				this._BloodGroup = value;
			}
		}
	}
	
	[Column(Storage="_Type", DbType="Int", CanBeNull=true)]
	public PackTransaction.TypeX Type
	{
		get
		{
			return this._Type;
		}
		set
		{
			if ((this._Type != value))
			{
				this._Type = value;
			}
		}
	}
	
	[Column(Storage="_Date", DbType="DateTime")]
	public System.Nullable<System.DateTime> Date
	{
		get
		{
			return this._Date;
		}
		set
		{
			if ((this._Date != value))
			{
				this._Date = value;
			}
		}
	}
	
	[Column(Storage="_Volume", DbType="Int")]
	public System.Nullable<int> Volume
	{
		get
		{
			return this._Volume;
		}
		set
		{
			if ((this._Volume != value))
			{
				this._Volume = value;
			}
		}
	}
	
	[Column(Storage="_Count", DbType="Int")]
	public System.Nullable<int> Count
	{
		get
		{
			return this._Count;
		}
		set
		{
			if ((this._Count != value))
			{
				this._Count = value;
			}
		}
	}
}

[Table(Name="dbo.[Return]")]
public partial class Return : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _ID;
	
	private System.Nullable<System.DateTime> _Date;
	
	private string _Actor;
	
	private string _Note;
	
	private EntitySet<ReturnPackOrder> _ReturnPackOrders;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnDateChanging(System.Nullable<System.DateTime> value);
    partial void OnDateChanged();
    partial void OnActorChanging(string value);
    partial void OnActorChanged();
    partial void OnNoteChanging(string value);
    partial void OnNoteChanged();
    #endregion
	
	public Return()
	{
		this._ReturnPackOrders = new EntitySet<ReturnPackOrder>(new Action<ReturnPackOrder>(this.attach_ReturnPackOrders), new Action<ReturnPackOrder>(this.detach_ReturnPackOrders));
		OnCreated();
	}
	
	[Column(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int ID
	{
		get
		{
			return this._ID;
		}
		set
		{
			if ((this._ID != value))
			{
				this.OnIDChanging(value);
				this.SendPropertyChanging();
				this._ID = value;
				this.SendPropertyChanged("ID");
				this.OnIDChanged();
			}
		}
	}
	
	[Column(Storage="_Date", AutoSync=AutoSync.OnInsert, DbType="DateTime", IsDbGenerated=true)]
	public System.Nullable<System.DateTime> Date
	{
		get
		{
			return this._Date;
		}
		set
		{
			if ((this._Date != value))
			{
				this.OnDateChanging(value);
				this.SendPropertyChanging();
				this._Date = value;
				this.SendPropertyChanged("Date");
				this.OnDateChanged();
			}
		}
	}
	
	[Column(Storage="_Actor", DbType="NVarChar(MAX)")]
	public string Actor
	{
		get
		{
			return this._Actor;
		}
		set
		{
			if ((this._Actor != value))
			{
				this.OnActorChanging(value);
				this.SendPropertyChanging();
				this._Actor = value;
				this.SendPropertyChanged("Actor");
				this.OnActorChanged();
			}
		}
	}
	
	[Column(Storage="_Note", DbType="NVarChar(MAX)")]
	public string Note
	{
		get
		{
			return this._Note;
		}
		set
		{
			if ((this._Note != value))
			{
				this.OnNoteChanging(value);
				this.SendPropertyChanging();
				this._Note = value;
				this.SendPropertyChanged("Note");
				this.OnNoteChanged();
			}
		}
	}
	
	[Association(Name="Return_ReturnPackOrder", Storage="_ReturnPackOrders", ThisKey="ID", OtherKey="ReturnID")]
	public EntitySet<ReturnPackOrder> ReturnPackOrders
	{
		get
		{
			return this._ReturnPackOrders;
		}
		set
		{
			this._ReturnPackOrders.Assign(value);
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_ReturnPackOrders(ReturnPackOrder entity)
	{
		this.SendPropertyChanging();
		entity.Return = this;
	}
	
	private void detach_ReturnPackOrders(ReturnPackOrder entity)
	{
		this.SendPropertyChanging();
		entity.Return = null;
	}
}

[Table(Name="dbo.ReturnPackOrder")]
public partial class ReturnPackOrder : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _ID;
	
	private System.Nullable<int> _ReturnID;
	
	private System.Nullable<int> _PackOrderID;
	
	private EntityRef<PackOrder> _PackOrder;
	
	private EntityRef<Return> _Return;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnReturnIDChanging(System.Nullable<int> value);
    partial void OnReturnIDChanged();
    partial void OnPackOrderIDChanging(System.Nullable<int> value);
    partial void OnPackOrderIDChanged();
    #endregion
	
	public ReturnPackOrder()
	{
		this._PackOrder = default(EntityRef<PackOrder>);
		this._Return = default(EntityRef<Return>);
		OnCreated();
	}
	
	[Column(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int ID
	{
		get
		{
			return this._ID;
		}
		set
		{
			if ((this._ID != value))
			{
				this.OnIDChanging(value);
				this.SendPropertyChanging();
				this._ID = value;
				this.SendPropertyChanged("ID");
				this.OnIDChanged();
			}
		}
	}
	
	[Column(Storage="_ReturnID", DbType="Int")]
	public System.Nullable<int> ReturnID
	{
		get
		{
			return this._ReturnID;
		}
		set
		{
			if ((this._ReturnID != value))
			{
				if (this._Return.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnReturnIDChanging(value);
				this.SendPropertyChanging();
				this._ReturnID = value;
				this.SendPropertyChanged("ReturnID");
				this.OnReturnIDChanged();
			}
		}
	}
	
	[Column(Storage="_PackOrderID", DbType="Int")]
	public System.Nullable<int> PackOrderID
	{
		get
		{
			return this._PackOrderID;
		}
		set
		{
			if ((this._PackOrderID != value))
			{
				if (this._PackOrder.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnPackOrderIDChanging(value);
				this.SendPropertyChanging();
				this._PackOrderID = value;
				this.SendPropertyChanged("PackOrderID");
				this.OnPackOrderIDChanged();
			}
		}
	}
	
	[Association(Name="PackOrder_ReturnPackOrder", Storage="_PackOrder", ThisKey="PackOrderID", OtherKey="ID", IsForeignKey=true)]
	public PackOrder PackOrder
	{
		get
		{
			return this._PackOrder.Entity;
		}
		set
		{
			PackOrder previousValue = this._PackOrder.Entity;
			if (((previousValue != value) 
						|| (this._PackOrder.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._PackOrder.Entity = null;
					previousValue.ReturnPackOrders.Remove(this);
				}
				this._PackOrder.Entity = value;
				if ((value != null))
				{
					value.ReturnPackOrders.Add(this);
					this._PackOrderID = value.ID;
				}
				else
				{
					this._PackOrderID = default(Nullable<int>);
				}
				this.SendPropertyChanged("PackOrder");
			}
		}
	}
	
	[Association(Name="Return_ReturnPackOrder", Storage="_Return", ThisKey="ReturnID", OtherKey="ID", IsForeignKey=true)]
	public Return Return
	{
		get
		{
			return this._Return.Entity;
		}
		set
		{
			Return previousValue = this._Return.Entity;
			if (((previousValue != value) 
						|| (this._Return.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Return.Entity = null;
					previousValue.ReturnPackOrders.Remove(this);
				}
				this._Return.Entity = value;
				if ((value != null))
				{
					value.ReturnPackOrders.Add(this);
					this._ReturnID = value.ID;
				}
				else
				{
					this._ReturnID = default(Nullable<int>);
				}
				this.SendPropertyChanged("Return");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}

[Table(Name="dbo.PackTransaction")]
public partial class PackTransaction : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _ID;
	
	private System.Nullable<System.Guid> _PackID;
	
	private PackTransaction.TypeX _Type;
	
	private System.Nullable<System.DateTime> _Date;
	
	private string _Note;
	
	private Pack.StatusX _FromStatus;
	
	private Pack.StatusX _ToStatus;
	
	private string _Actor;
	
	private EntityRef<Pack> _Pack;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnPackIDChanging(System.Nullable<System.Guid> value);
    partial void OnPackIDChanged();
    partial void OnTypeChanging(PackTransaction.TypeX value);
    partial void OnTypeChanged();
    partial void OnDateChanging(System.Nullable<System.DateTime> value);
    partial void OnDateChanged();
    partial void OnNoteChanging(string value);
    partial void OnNoteChanged();
    partial void OnFromStatusChanging(Pack.StatusX value);
    partial void OnFromStatusChanged();
    partial void OnToStatusChanging(Pack.StatusX value);
    partial void OnToStatusChanged();
    partial void OnActorChanging(string value);
    partial void OnActorChanged();
    #endregion
	
	public PackTransaction()
	{
		this._Pack = default(EntityRef<Pack>);
		OnCreated();
	}
	
	[Column(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int ID
	{
		get
		{
			return this._ID;
		}
		set
		{
			if ((this._ID != value))
			{
				this.OnIDChanging(value);
				this.SendPropertyChanging();
				this._ID = value;
				this.SendPropertyChanged("ID");
				this.OnIDChanged();
			}
		}
	}
	
	[Column(Storage="_PackID", DbType="UniqueIdentifier")]
	public System.Nullable<System.Guid> PackID
	{
		get
		{
			return this._PackID;
		}
		set
		{
			if ((this._PackID != value))
			{
				if (this._Pack.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnPackIDChanging(value);
				this.SendPropertyChanging();
				this._PackID = value;
				this.SendPropertyChanged("PackID");
				this.OnPackIDChanged();
			}
		}
	}
	
	[Column(Storage="_Type", DbType="Int", CanBeNull=true)]
	public PackTransaction.TypeX Type
	{
		get
		{
			return this._Type;
		}
		set
		{
			if ((this._Type != value))
			{
				this.OnTypeChanging(value);
				this.SendPropertyChanging();
				this._Type = value;
				this.SendPropertyChanged("Type");
				this.OnTypeChanged();
			}
		}
	}
	
	[Column(Storage="_Date", AutoSync=AutoSync.OnInsert, DbType="DateTime", IsDbGenerated=true)]
	public System.Nullable<System.DateTime> Date
	{
		get
		{
			return this._Date;
		}
		set
		{
			if ((this._Date != value))
			{
				this.OnDateChanging(value);
				this.SendPropertyChanging();
				this._Date = value;
				this.SendPropertyChanged("Date");
				this.OnDateChanged();
			}
		}
	}
	
	[Column(Storage="_Note", DbType="NVarChar(MAX)")]
	public string Note
	{
		get
		{
			return this._Note;
		}
		set
		{
			if ((this._Note != value))
			{
				this.OnNoteChanging(value);
				this.SendPropertyChanging();
				this._Note = value;
				this.SendPropertyChanged("Note");
				this.OnNoteChanged();
			}
		}
	}
	
	[Column(Storage="_FromStatus", DbType="Int", CanBeNull=true)]
	public Pack.StatusX FromStatus
	{
		get
		{
			return this._FromStatus;
		}
		set
		{
			if ((this._FromStatus != value))
			{
				this.OnFromStatusChanging(value);
				this.SendPropertyChanging();
				this._FromStatus = value;
				this.SendPropertyChanged("FromStatus");
				this.OnFromStatusChanged();
			}
		}
	}
	
	[Column(Storage="_ToStatus", DbType="Int", CanBeNull=true)]
	public Pack.StatusX ToStatus
	{
		get
		{
			return this._ToStatus;
		}
		set
		{
			if ((this._ToStatus != value))
			{
				this.OnToStatusChanging(value);
				this.SendPropertyChanging();
				this._ToStatus = value;
				this.SendPropertyChanged("ToStatus");
				this.OnToStatusChanged();
			}
		}
	}
	
	[Column(Storage="_Actor", DbType="NVarChar(MAX)")]
	public string Actor
	{
		get
		{
			return this._Actor;
		}
		set
		{
			if ((this._Actor != value))
			{
				this.OnActorChanging(value);
				this.SendPropertyChanging();
				this._Actor = value;
				this.SendPropertyChanged("Actor");
				this.OnActorChanged();
			}
		}
	}
	
	[Association(Name="Pack_PackTransaction", Storage="_Pack", ThisKey="PackID", OtherKey="ID", IsForeignKey=true)]
	public Pack Pack
	{
		get
		{
			return this._Pack.Entity;
		}
		set
		{
			Pack previousValue = this._Pack.Entity;
			if (((previousValue != value) 
						|| (this._Pack.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Pack.Entity = null;
					previousValue.PackTransactions.Remove(this);
				}
				this._Pack.Entity = value;
				if ((value != null))
				{
					value.PackTransactions.Add(this);
					this._PackID = value.ID;
				}
				else
				{
					this._PackID = default(Nullable<System.Guid>);
				}
				this.SendPropertyChanged("Pack");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}
#pragma warning restore 1591
