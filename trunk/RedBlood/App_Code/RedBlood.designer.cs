#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.3053
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Data.Linq;
using System.Data.Linq.Mapping;
using System.Linq;
using System.Linq.Expressions;
using System.Reflection;



[System.Data.Linq.Mapping.DatabaseAttribute(Name="RedBlood_DB")]
public partial class RedBloodDataContext : System.Data.Linq.DataContext
{
	
	private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
	
  #region Extensibility Method Definitions
  partial void OnCreated();
  partial void Insertaspnet_UserProfile(aspnet_UserProfile instance);
  partial void Updateaspnet_UserProfile(aspnet_UserProfile instance);
  partial void Deleteaspnet_UserProfile(aspnet_UserProfile instance);
  partial void Insertaspnet_User(aspnet_User instance);
  partial void Updateaspnet_User(aspnet_User instance);
  partial void Deleteaspnet_User(aspnet_User instance);
  partial void Insertaspnet_Membership(aspnet_Membership instance);
  partial void Updateaspnet_Membership(aspnet_Membership instance);
  partial void Deleteaspnet_Membership(aspnet_Membership instance);
  partial void InsertCompany(Company instance);
  partial void UpdateCompany(Company instance);
  partial void DeleteCompany(Company instance);
  partial void InsertCompanyBankAccount(CompanyBankAccount instance);
  partial void UpdateCompanyBankAccount(CompanyBankAccount instance);
  partial void DeleteCompanyBankAccount(CompanyBankAccount instance);
  partial void InsertSupplierContactPerson(SupplierContactPerson instance);
  partial void UpdateSupplierContactPerson(SupplierContactPerson instance);
  partial void DeleteSupplierContactPerson(SupplierContactPerson instance);
  partial void InsertSupplierBankAccount(SupplierBankAccount instance);
  partial void UpdateSupplierBankAccount(SupplierBankAccount instance);
  partial void DeleteSupplierBankAccount(SupplierBankAccount instance);
  partial void InsertBank(Bank instance);
  partial void UpdateBank(Bank instance);
  partial void DeleteBank(Bank instance);
  partial void InsertSupplierLocation(SupplierLocation instance);
  partial void UpdateSupplierLocation(SupplierLocation instance);
  partial void DeleteSupplierLocation(SupplierLocation instance);
  partial void InsertCompanyContactPerson(CompanyContactPerson instance);
  partial void UpdateCompanyContactPerson(CompanyContactPerson instance);
  partial void DeleteCompanyContactPerson(CompanyContactPerson instance);
  partial void InsertCompanyLocation(CompanyLocation instance);
  partial void UpdateCompanyLocation(CompanyLocation instance);
  partial void DeleteCompanyLocation(CompanyLocation instance);
  partial void InsertCustomerBankAccount(CustomerBankAccount instance);
  partial void UpdateCustomerBankAccount(CustomerBankAccount instance);
  partial void DeleteCustomerBankAccount(CustomerBankAccount instance);
  partial void InsertCustomerContactPerson(CustomerContactPerson instance);
  partial void UpdateCustomerContactPerson(CustomerContactPerson instance);
  partial void DeleteCustomerContactPerson(CustomerContactPerson instance);
  partial void InsertCustomerLocation(CustomerLocation instance);
  partial void UpdateCustomerLocation(CustomerLocation instance);
  partial void DeleteCustomerLocation(CustomerLocation instance);
  partial void InsertSupplier(Supplier instance);
  partial void UpdateSupplier(Supplier instance);
  partial void DeleteSupplier(Supplier instance);
  partial void InsertWarehouse(Warehouse instance);
  partial void UpdateWarehouse(Warehouse instance);
  partial void DeleteWarehouse(Warehouse instance);
  partial void InsertWarehouseDivision(WarehouseDivision instance);
  partial void UpdateWarehouseDivision(WarehouseDivision instance);
  partial void DeleteWarehouseDivision(WarehouseDivision instance);
  partial void InsertWarehouseKeeper(WarehouseKeeper instance);
  partial void UpdateWarehouseKeeper(WarehouseKeeper instance);
  partial void DeleteWarehouseKeeper(WarehouseKeeper instance);
  partial void InsertCat(Cat instance);
  partial void UpdateCat(Cat instance);
  partial void DeleteCat(Cat instance);
  partial void InsertFurniture(Furniture instance);
  partial void UpdateFurniture(Furniture instance);
  partial void DeleteFurniture(Furniture instance);
  partial void InsertItemImg(ItemImg instance);
  partial void UpdateItemImg(ItemImg instance);
  partial void DeleteItemImg(ItemImg instance);
  partial void InsertItemCat(ItemCat instance);
  partial void UpdateItemCat(ItemCat instance);
  partial void DeleteItemCat(ItemCat instance);
  partial void InsertCustomer(Customer instance);
  partial void UpdateCustomer(Customer instance);
  partial void DeleteCustomer(Customer instance);
  partial void InsertPointDef(PointDef instance);
  partial void UpdatePointDef(PointDef instance);
  partial void DeletePointDef(PointDef instance);
  partial void InsertCustomerPoint(CustomerPoint instance);
  partial void UpdateCustomerPoint(CustomerPoint instance);
  partial void DeleteCustomerPoint(CustomerPoint instance);
  partial void InsertPeopleStayIn(PeopleStayIn instance);
  partial void UpdatePeopleStayIn(PeopleStayIn instance);
  partial void DeletePeopleStayIn(PeopleStayIn instance);
  partial void InsertSex(Sex instance);
  partial void UpdateSex(Sex instance);
  partial void DeleteSex(Sex instance);
  partial void InsertGeo(Geo instance);
  partial void UpdateGeo(Geo instance);
  partial void DeleteGeo(Geo instance);
  partial void InsertHospital(Hospital instance);
  partial void UpdateHospital(Hospital instance);
  partial void DeleteHospital(Hospital instance);
  partial void InsertTestDef(TestDef instance);
  partial void UpdateTestDef(TestDef instance);
  partial void DeleteTestDef(TestDef instance);
  partial void InsertPeople(People instance);
  partial void UpdatePeople(People instance);
  partial void DeletePeople(People instance);
  partial void InsertPack(Pack instance);
  partial void UpdatePack(Pack instance);
  partial void DeletePack(Pack instance);
  partial void InsertTestResult(TestResult instance);
  partial void UpdateTestResult(TestResult instance);
  partial void DeleteTestResult(TestResult instance);
  partial void InsertBloodType(BloodType instance);
  partial void UpdateBloodType(BloodType instance);
  partial void DeleteBloodType(BloodType instance);
  partial void InsertPackStatusHistory(PackStatusHistory instance);
  partial void UpdatePackStatusHistory(PackStatusHistory instance);
  partial void DeletePackStatusHistory(PackStatusHistory instance);
  partial void InsertOrg(Org instance);
  partial void UpdateOrg(Org instance);
  partial void DeleteOrg(Org instance);
  partial void InsertCampaign(Campaign instance);
  partial void UpdateCampaign(Campaign instance);
  partial void DeleteCampaign(Campaign instance);
  partial void InsertCampaignStatusHistory(CampaignStatusHistory instance);
  partial void UpdateCampaignStatusHistory(CampaignStatusHistory instance);
  partial void DeleteCampaignStatusHistory(CampaignStatusHistory instance);
  partial void InsertLog(Log instance);
  partial void UpdateLog(Log instance);
  partial void DeleteLog(Log instance);
  partial void InsertPackResultHistory(PackResultHistory instance);
  partial void UpdatePackResultHistory(PackResultHistory instance);
  partial void DeletePackResultHistory(PackResultHistory instance);
  partial void InsertPackOrder(PackOrder instance);
  partial void UpdatePackOrder(PackOrder instance);
  partial void DeletePackOrder(PackOrder instance);
  partial void InsertOrder(Order instance);
  partial void UpdateOrder(Order instance);
  partial void DeleteOrder(Order instance);
  partial void InsertPackExtract(PackExtract instance);
  partial void UpdatePackExtract(PackExtract instance);
  partial void DeletePackExtract(PackExtract instance);
  #endregion
	
	public RedBloodDataContext() : 
			base(global::System.Configuration.ConfigurationManager.ConnectionStrings["RedBlood_DBConnectionString"].ConnectionString, mappingSource)
	{
		OnCreated();
	}
	
	public RedBloodDataContext(string connection) : 
			base(connection, mappingSource)
	{
		OnCreated();
	}
	
	public RedBloodDataContext(System.Data.IDbConnection connection) : 
			base(connection, mappingSource)
	{
		OnCreated();
	}
	
	public RedBloodDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
			base(connection, mappingSource)
	{
		OnCreated();
	}
	
	public RedBloodDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
			base(connection, mappingSource)
	{
		OnCreated();
	}
	
	public System.Data.Linq.Table<aspnet_UserProfile> aspnet_UserProfiles
	{
		get
		{
			return this.GetTable<aspnet_UserProfile>();
		}
	}
	
	public System.Data.Linq.Table<aspnet_User> aspnet_Users
	{
		get
		{
			return this.GetTable<aspnet_User>();
		}
	}
	
	public System.Data.Linq.Table<aspnet_Membership> aspnet_Memberships
	{
		get
		{
			return this.GetTable<aspnet_Membership>();
		}
	}
	
	public System.Data.Linq.Table<Company> Companies
	{
		get
		{
			return this.GetTable<Company>();
		}
	}
	
	public System.Data.Linq.Table<CompanyBankAccount> CompanyBankAccounts
	{
		get
		{
			return this.GetTable<CompanyBankAccount>();
		}
	}
	
	public System.Data.Linq.Table<SupplierContactPerson> SupplierContactPersons
	{
		get
		{
			return this.GetTable<SupplierContactPerson>();
		}
	}
	
	public System.Data.Linq.Table<SupplierBankAccount> SupplierBankAccounts
	{
		get
		{
			return this.GetTable<SupplierBankAccount>();
		}
	}
	
	public System.Data.Linq.Table<Bank> Banks
	{
		get
		{
			return this.GetTable<Bank>();
		}
	}
	
	public System.Data.Linq.Table<SupplierLocation> SupplierLocations
	{
		get
		{
			return this.GetTable<SupplierLocation>();
		}
	}
	
	public System.Data.Linq.Table<CompanyContactPerson> CompanyContactPersons
	{
		get
		{
			return this.GetTable<CompanyContactPerson>();
		}
	}
	
	public System.Data.Linq.Table<CompanyLocation> CompanyLocations
	{
		get
		{
			return this.GetTable<CompanyLocation>();
		}
	}
	
	public System.Data.Linq.Table<CustomerBankAccount> CustomerBankAccounts
	{
		get
		{
			return this.GetTable<CustomerBankAccount>();
		}
	}
	
	public System.Data.Linq.Table<CustomerContactPerson> CustomerContactPersons
	{
		get
		{
			return this.GetTable<CustomerContactPerson>();
		}
	}
	
	public System.Data.Linq.Table<CustomerLocation> CustomerLocations
	{
		get
		{
			return this.GetTable<CustomerLocation>();
		}
	}
	
	public System.Data.Linq.Table<Supplier> Suppliers
	{
		get
		{
			return this.GetTable<Supplier>();
		}
	}
	
	public System.Data.Linq.Table<Warehouse> Warehouses
	{
		get
		{
			return this.GetTable<Warehouse>();
		}
	}
	
	public System.Data.Linq.Table<WarehouseDivision> WarehouseDivisions
	{
		get
		{
			return this.GetTable<WarehouseDivision>();
		}
	}
	
	public System.Data.Linq.Table<WarehouseKeeper> WarehouseKeepers
	{
		get
		{
			return this.GetTable<WarehouseKeeper>();
		}
	}
	
	public System.Data.Linq.Table<Cat> Cats
	{
		get
		{
			return this.GetTable<Cat>();
		}
	}
	
	public System.Data.Linq.Table<Furniture> Furnitures
	{
		get
		{
			return this.GetTable<Furniture>();
		}
	}
	
	public System.Data.Linq.Table<ItemImg> ItemImgs
	{
		get
		{
			return this.GetTable<ItemImg>();
		}
	}
	
	public System.Data.Linq.Table<ItemCat> ItemCats
	{
		get
		{
			return this.GetTable<ItemCat>();
		}
	}
	
	public System.Data.Linq.Table<Customer> Customers
	{
		get
		{
			return this.GetTable<Customer>();
		}
	}
	
	public System.Data.Linq.Table<PointDef> PointDefs
	{
		get
		{
			return this.GetTable<PointDef>();
		}
	}
	
	public System.Data.Linq.Table<CustomerPoint> CustomerPoints
	{
		get
		{
			return this.GetTable<CustomerPoint>();
		}
	}
	
	public System.Data.Linq.Table<PeopleStayIn> PeopleStayIns
	{
		get
		{
			return this.GetTable<PeopleStayIn>();
		}
	}
	
	public System.Data.Linq.Table<Sex> Sexes
	{
		get
		{
			return this.GetTable<Sex>();
		}
	}
	
	public System.Data.Linq.Table<Geo> Geos
	{
		get
		{
			return this.GetTable<Geo>();
		}
	}
	
	public System.Data.Linq.Table<Hospital> Hospitals
	{
		get
		{
			return this.GetTable<Hospital>();
		}
	}
	
	public System.Data.Linq.Table<TestDef> TestDefs
	{
		get
		{
			return this.GetTable<TestDef>();
		}
	}
	
	public System.Data.Linq.Table<People> Peoples
	{
		get
		{
			return this.GetTable<People>();
		}
	}
	
	public System.Data.Linq.Table<Pack> Packs
	{
		get
		{
			return this.GetTable<Pack>();
		}
	}
	
	public System.Data.Linq.Table<TestResult> TestResults
	{
		get
		{
			return this.GetTable<TestResult>();
		}
	}
	
	public System.Data.Linq.Table<BloodType> BloodTypes
	{
		get
		{
			return this.GetTable<BloodType>();
		}
	}
	
	public System.Data.Linq.Table<PackStatusHistory> PackStatusHistories
	{
		get
		{
			return this.GetTable<PackStatusHistory>();
		}
	}
	
	public System.Data.Linq.Table<Org> Orgs
	{
		get
		{
			return this.GetTable<Org>();
		}
	}
	
	public System.Data.Linq.Table<Campaign> Campaigns
	{
		get
		{
			return this.GetTable<Campaign>();
		}
	}
	
	public System.Data.Linq.Table<CampaignStatusHistory> CampaignStatusHistories
	{
		get
		{
			return this.GetTable<CampaignStatusHistory>();
		}
	}
	
	public System.Data.Linq.Table<Log> Logs
	{
		get
		{
			return this.GetTable<Log>();
		}
	}
	
	public System.Data.Linq.Table<PackResultHistory> PackResultHistories
	{
		get
		{
			return this.GetTable<PackResultHistory>();
		}
	}
	
	public System.Data.Linq.Table<PackOrder> PackOrders
	{
		get
		{
			return this.GetTable<PackOrder>();
		}
	}
	
	public System.Data.Linq.Table<Order> Orders
	{
		get
		{
			return this.GetTable<Order>();
		}
	}
	
	public System.Data.Linq.Table<PackExtract> PackExtracts
	{
		get
		{
			return this.GetTable<PackExtract>();
		}
	}
}

[Table(Name="dbo.aspnet_UserProfiles")]
public partial class aspnet_UserProfile : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private System.Guid _UserID;
	
	private string _Fullname;
	
	private string _Phone;
	
	private EntityRef<aspnet_User> _aspnet_User;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUserIDChanging(System.Guid value);
    partial void OnUserIDChanged();
    partial void OnFullnameChanging(string value);
    partial void OnFullnameChanged();
    partial void OnPhoneChanging(string value);
    partial void OnPhoneChanged();
    #endregion
	
	public aspnet_UserProfile()
	{
		this._aspnet_User = default(EntityRef<aspnet_User>);
		OnCreated();
	}
	
	[Column(Storage="_UserID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
	public System.Guid UserID
	{
		get
		{
			return this._UserID;
		}
		set
		{
			if ((this._UserID != value))
			{
				if (this._aspnet_User.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnUserIDChanging(value);
				this.SendPropertyChanging();
				this._UserID = value;
				this.SendPropertyChanged("UserID");
				this.OnUserIDChanged();
			}
		}
	}
	
	[Column(Storage="_Fullname", DbType="NVarChar(MAX)")]
	public string Fullname
	{
		get
		{
			return this._Fullname;
		}
		set
		{
			if ((this._Fullname != value))
			{
				this.OnFullnameChanging(value);
				this.SendPropertyChanging();
				this._Fullname = value;
				this.SendPropertyChanged("Fullname");
				this.OnFullnameChanged();
			}
		}
	}
	
	[Column(Storage="_Phone", DbType="NVarChar(MAX)")]
	public string Phone
	{
		get
		{
			return this._Phone;
		}
		set
		{
			if ((this._Phone != value))
			{
				this.OnPhoneChanging(value);
				this.SendPropertyChanging();
				this._Phone = value;
				this.SendPropertyChanged("Phone");
				this.OnPhoneChanged();
			}
		}
	}
	
	[Association(Name="aspnet_User_aspnet_UserProfile", Storage="_aspnet_User", ThisKey="UserID", OtherKey="UserId", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
	public aspnet_User aspnet_User
	{
		get
		{
			return this._aspnet_User.Entity;
		}
		set
		{
			aspnet_User previousValue = this._aspnet_User.Entity;
			if (((previousValue != value) 
						|| (this._aspnet_User.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._aspnet_User.Entity = null;
					previousValue.aspnet_UserProfile = null;
				}
				this._aspnet_User.Entity = value;
				if ((value != null))
				{
					value.aspnet_UserProfile = this;
					this._UserID = value.UserId;
				}
				else
				{
					this._UserID = default(System.Guid);
				}
				this.SendPropertyChanged("aspnet_User");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}

[Table(Name="dbo.aspnet_Users")]
public partial class aspnet_User : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private System.Guid _ApplicationId;
	
	private System.Guid _UserId;
	
	private string _UserName;
	
	private string _LoweredUserName;
	
	private string _MobileAlias;
	
	private bool _IsAnonymous;
	
	private System.DateTime _LastActivityDate;
	
	private EntityRef<aspnet_UserProfile> _aspnet_UserProfile;
	
	private EntityRef<aspnet_Membership> _aspnet_Membership;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnApplicationIdChanging(System.Guid value);
    partial void OnApplicationIdChanged();
    partial void OnUserIdChanging(System.Guid value);
    partial void OnUserIdChanged();
    partial void OnUserNameChanging(string value);
    partial void OnUserNameChanged();
    partial void OnLoweredUserNameChanging(string value);
    partial void OnLoweredUserNameChanged();
    partial void OnMobileAliasChanging(string value);
    partial void OnMobileAliasChanged();
    partial void OnIsAnonymousChanging(bool value);
    partial void OnIsAnonymousChanged();
    partial void OnLastActivityDateChanging(System.DateTime value);
    partial void OnLastActivityDateChanged();
    #endregion
	
	public aspnet_User()
	{
		this._aspnet_UserProfile = default(EntityRef<aspnet_UserProfile>);
		this._aspnet_Membership = default(EntityRef<aspnet_Membership>);
		OnCreated();
	}
	
	[Column(Storage="_ApplicationId", DbType="UniqueIdentifier NOT NULL")]
	public System.Guid ApplicationId
	{
		get
		{
			return this._ApplicationId;
		}
		set
		{
			if ((this._ApplicationId != value))
			{
				this.OnApplicationIdChanging(value);
				this.SendPropertyChanging();
				this._ApplicationId = value;
				this.SendPropertyChanged("ApplicationId");
				this.OnApplicationIdChanged();
			}
		}
	}
	
	[Column(Storage="_UserId", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
	public System.Guid UserId
	{
		get
		{
			return this._UserId;
		}
		set
		{
			if ((this._UserId != value))
			{
				this.OnUserIdChanging(value);
				this.SendPropertyChanging();
				this._UserId = value;
				this.SendPropertyChanged("UserId");
				this.OnUserIdChanged();
			}
		}
	}
	
	[Column(Storage="_UserName", DbType="NVarChar(256) NOT NULL", CanBeNull=false)]
	public string UserName
	{
		get
		{
			return this._UserName;
		}
		set
		{
			if ((this._UserName != value))
			{
				this.OnUserNameChanging(value);
				this.SendPropertyChanging();
				this._UserName = value;
				this.SendPropertyChanged("UserName");
				this.OnUserNameChanged();
			}
		}
	}
	
	[Column(Storage="_LoweredUserName", DbType="NVarChar(256) NOT NULL", CanBeNull=false)]
	public string LoweredUserName
	{
		get
		{
			return this._LoweredUserName;
		}
		set
		{
			if ((this._LoweredUserName != value))
			{
				this.OnLoweredUserNameChanging(value);
				this.SendPropertyChanging();
				this._LoweredUserName = value;
				this.SendPropertyChanged("LoweredUserName");
				this.OnLoweredUserNameChanged();
			}
		}
	}
	
	[Column(Storage="_MobileAlias", DbType="NVarChar(16)")]
	public string MobileAlias
	{
		get
		{
			return this._MobileAlias;
		}
		set
		{
			if ((this._MobileAlias != value))
			{
				this.OnMobileAliasChanging(value);
				this.SendPropertyChanging();
				this._MobileAlias = value;
				this.SendPropertyChanged("MobileAlias");
				this.OnMobileAliasChanged();
			}
		}
	}
	
	[Column(Storage="_IsAnonymous", DbType="Bit NOT NULL")]
	public bool IsAnonymous
	{
		get
		{
			return this._IsAnonymous;
		}
		set
		{
			if ((this._IsAnonymous != value))
			{
				this.OnIsAnonymousChanging(value);
				this.SendPropertyChanging();
				this._IsAnonymous = value;
				this.SendPropertyChanged("IsAnonymous");
				this.OnIsAnonymousChanged();
			}
		}
	}
	
	[Column(Storage="_LastActivityDate", DbType="DateTime NOT NULL")]
	public System.DateTime LastActivityDate
	{
		get
		{
			return this._LastActivityDate;
		}
		set
		{
			if ((this._LastActivityDate != value))
			{
				this.OnLastActivityDateChanging(value);
				this.SendPropertyChanging();
				this._LastActivityDate = value;
				this.SendPropertyChanged("LastActivityDate");
				this.OnLastActivityDateChanged();
			}
		}
	}
	
	[Association(Name="aspnet_User_aspnet_UserProfile", Storage="_aspnet_UserProfile", ThisKey="UserId", OtherKey="UserID", IsUnique=true, IsForeignKey=false)]
	public aspnet_UserProfile aspnet_UserProfile
	{
		get
		{
			return this._aspnet_UserProfile.Entity;
		}
		set
		{
			aspnet_UserProfile previousValue = this._aspnet_UserProfile.Entity;
			if (((previousValue != value) 
						|| (this._aspnet_UserProfile.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._aspnet_UserProfile.Entity = null;
					previousValue.aspnet_User = null;
				}
				this._aspnet_UserProfile.Entity = value;
				if ((value != null))
				{
					value.aspnet_User = this;
				}
				this.SendPropertyChanged("aspnet_UserProfile");
			}
		}
	}
	
	[Association(Name="aspnet_User_aspnet_Membership", Storage="_aspnet_Membership", ThisKey="UserId", OtherKey="UserId", IsUnique=true, IsForeignKey=false)]
	public aspnet_Membership aspnet_Membership
	{
		get
		{
			return this._aspnet_Membership.Entity;
		}
		set
		{
			aspnet_Membership previousValue = this._aspnet_Membership.Entity;
			if (((previousValue != value) 
						|| (this._aspnet_Membership.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._aspnet_Membership.Entity = null;
					previousValue.aspnet_User = null;
				}
				this._aspnet_Membership.Entity = value;
				if ((value != null))
				{
					value.aspnet_User = this;
				}
				this.SendPropertyChanged("aspnet_Membership");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}

[Table(Name="dbo.aspnet_Membership")]
public partial class aspnet_Membership : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private System.Guid _ApplicationId;
	
	private System.Guid _UserId;
	
	private string _Password;
	
	private int _PasswordFormat;
	
	private string _PasswordSalt;
	
	private string _MobilePIN;
	
	private string _Email;
	
	private string _LoweredEmail;
	
	private string _PasswordQuestion;
	
	private string _PasswordAnswer;
	
	private bool _IsApproved;
	
	private bool _IsLockedOut;
	
	private System.DateTime _CreateDate;
	
	private System.DateTime _LastLoginDate;
	
	private System.DateTime _LastPasswordChangedDate;
	
	private System.DateTime _LastLockoutDate;
	
	private int _FailedPasswordAttemptCount;
	
	private System.DateTime _FailedPasswordAttemptWindowStart;
	
	private int _FailedPasswordAnswerAttemptCount;
	
	private System.DateTime _FailedPasswordAnswerAttemptWindowStart;
	
	private string _Comment;
	
	private EntityRef<aspnet_User> _aspnet_User;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnApplicationIdChanging(System.Guid value);
    partial void OnApplicationIdChanged();
    partial void OnUserIdChanging(System.Guid value);
    partial void OnUserIdChanged();
    partial void OnPasswordChanging(string value);
    partial void OnPasswordChanged();
    partial void OnPasswordFormatChanging(int value);
    partial void OnPasswordFormatChanged();
    partial void OnPasswordSaltChanging(string value);
    partial void OnPasswordSaltChanged();
    partial void OnMobilePINChanging(string value);
    partial void OnMobilePINChanged();
    partial void OnEmailChanging(string value);
    partial void OnEmailChanged();
    partial void OnLoweredEmailChanging(string value);
    partial void OnLoweredEmailChanged();
    partial void OnPasswordQuestionChanging(string value);
    partial void OnPasswordQuestionChanged();
    partial void OnPasswordAnswerChanging(string value);
    partial void OnPasswordAnswerChanged();
    partial void OnIsApprovedChanging(bool value);
    partial void OnIsApprovedChanged();
    partial void OnIsLockedOutChanging(bool value);
    partial void OnIsLockedOutChanged();
    partial void OnCreateDateChanging(System.DateTime value);
    partial void OnCreateDateChanged();
    partial void OnLastLoginDateChanging(System.DateTime value);
    partial void OnLastLoginDateChanged();
    partial void OnLastPasswordChangedDateChanging(System.DateTime value);
    partial void OnLastPasswordChangedDateChanged();
    partial void OnLastLockoutDateChanging(System.DateTime value);
    partial void OnLastLockoutDateChanged();
    partial void OnFailedPasswordAttemptCountChanging(int value);
    partial void OnFailedPasswordAttemptCountChanged();
    partial void OnFailedPasswordAttemptWindowStartChanging(System.DateTime value);
    partial void OnFailedPasswordAttemptWindowStartChanged();
    partial void OnFailedPasswordAnswerAttemptCountChanging(int value);
    partial void OnFailedPasswordAnswerAttemptCountChanged();
    partial void OnFailedPasswordAnswerAttemptWindowStartChanging(System.DateTime value);
    partial void OnFailedPasswordAnswerAttemptWindowStartChanged();
    partial void OnCommentChanging(string value);
    partial void OnCommentChanged();
    #endregion
	
	public aspnet_Membership()
	{
		this._aspnet_User = default(EntityRef<aspnet_User>);
		OnCreated();
	}
	
	[Column(Storage="_ApplicationId", DbType="UniqueIdentifier NOT NULL")]
	public System.Guid ApplicationId
	{
		get
		{
			return this._ApplicationId;
		}
		set
		{
			if ((this._ApplicationId != value))
			{
				this.OnApplicationIdChanging(value);
				this.SendPropertyChanging();
				this._ApplicationId = value;
				this.SendPropertyChanged("ApplicationId");
				this.OnApplicationIdChanged();
			}
		}
	}
	
	[Column(Storage="_UserId", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
	public System.Guid UserId
	{
		get
		{
			return this._UserId;
		}
		set
		{
			if ((this._UserId != value))
			{
				if (this._aspnet_User.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnUserIdChanging(value);
				this.SendPropertyChanging();
				this._UserId = value;
				this.SendPropertyChanged("UserId");
				this.OnUserIdChanged();
			}
		}
	}
	
	[Column(Storage="_Password", DbType="NVarChar(128) NOT NULL", CanBeNull=false)]
	public string Password
	{
		get
		{
			return this._Password;
		}
		set
		{
			if ((this._Password != value))
			{
				this.OnPasswordChanging(value);
				this.SendPropertyChanging();
				this._Password = value;
				this.SendPropertyChanged("Password");
				this.OnPasswordChanged();
			}
		}
	}
	
	[Column(Storage="_PasswordFormat", DbType="Int NOT NULL")]
	public int PasswordFormat
	{
		get
		{
			return this._PasswordFormat;
		}
		set
		{
			if ((this._PasswordFormat != value))
			{
				this.OnPasswordFormatChanging(value);
				this.SendPropertyChanging();
				this._PasswordFormat = value;
				this.SendPropertyChanged("PasswordFormat");
				this.OnPasswordFormatChanged();
			}
		}
	}
	
	[Column(Storage="_PasswordSalt", DbType="NVarChar(128) NOT NULL", CanBeNull=false)]
	public string PasswordSalt
	{
		get
		{
			return this._PasswordSalt;
		}
		set
		{
			if ((this._PasswordSalt != value))
			{
				this.OnPasswordSaltChanging(value);
				this.SendPropertyChanging();
				this._PasswordSalt = value;
				this.SendPropertyChanged("PasswordSalt");
				this.OnPasswordSaltChanged();
			}
		}
	}
	
	[Column(Storage="_MobilePIN", DbType="NVarChar(16)")]
	public string MobilePIN
	{
		get
		{
			return this._MobilePIN;
		}
		set
		{
			if ((this._MobilePIN != value))
			{
				this.OnMobilePINChanging(value);
				this.SendPropertyChanging();
				this._MobilePIN = value;
				this.SendPropertyChanged("MobilePIN");
				this.OnMobilePINChanged();
			}
		}
	}
	
	[Column(Storage="_Email", DbType="NVarChar(256)")]
	public string Email
	{
		get
		{
			return this._Email;
		}
		set
		{
			if ((this._Email != value))
			{
				this.OnEmailChanging(value);
				this.SendPropertyChanging();
				this._Email = value;
				this.SendPropertyChanged("Email");
				this.OnEmailChanged();
			}
		}
	}
	
	[Column(Storage="_LoweredEmail", DbType="NVarChar(256)")]
	public string LoweredEmail
	{
		get
		{
			return this._LoweredEmail;
		}
		set
		{
			if ((this._LoweredEmail != value))
			{
				this.OnLoweredEmailChanging(value);
				this.SendPropertyChanging();
				this._LoweredEmail = value;
				this.SendPropertyChanged("LoweredEmail");
				this.OnLoweredEmailChanged();
			}
		}
	}
	
	[Column(Storage="_PasswordQuestion", DbType="NVarChar(256)")]
	public string PasswordQuestion
	{
		get
		{
			return this._PasswordQuestion;
		}
		set
		{
			if ((this._PasswordQuestion != value))
			{
				this.OnPasswordQuestionChanging(value);
				this.SendPropertyChanging();
				this._PasswordQuestion = value;
				this.SendPropertyChanged("PasswordQuestion");
				this.OnPasswordQuestionChanged();
			}
		}
	}
	
	[Column(Storage="_PasswordAnswer", DbType="NVarChar(128)")]
	public string PasswordAnswer
	{
		get
		{
			return this._PasswordAnswer;
		}
		set
		{
			if ((this._PasswordAnswer != value))
			{
				this.OnPasswordAnswerChanging(value);
				this.SendPropertyChanging();
				this._PasswordAnswer = value;
				this.SendPropertyChanged("PasswordAnswer");
				this.OnPasswordAnswerChanged();
			}
		}
	}
	
	[Column(Storage="_IsApproved", DbType="Bit NOT NULL")]
	public bool IsApproved
	{
		get
		{
			return this._IsApproved;
		}
		set
		{
			if ((this._IsApproved != value))
			{
				this.OnIsApprovedChanging(value);
				this.SendPropertyChanging();
				this._IsApproved = value;
				this.SendPropertyChanged("IsApproved");
				this.OnIsApprovedChanged();
			}
		}
	}
	
	[Column(Storage="_IsLockedOut", DbType="Bit NOT NULL")]
	public bool IsLockedOut
	{
		get
		{
			return this._IsLockedOut;
		}
		set
		{
			if ((this._IsLockedOut != value))
			{
				this.OnIsLockedOutChanging(value);
				this.SendPropertyChanging();
				this._IsLockedOut = value;
				this.SendPropertyChanged("IsLockedOut");
				this.OnIsLockedOutChanged();
			}
		}
	}
	
	[Column(Storage="_CreateDate", DbType="DateTime NOT NULL")]
	public System.DateTime CreateDate
	{
		get
		{
			return this._CreateDate;
		}
		set
		{
			if ((this._CreateDate != value))
			{
				this.OnCreateDateChanging(value);
				this.SendPropertyChanging();
				this._CreateDate = value;
				this.SendPropertyChanged("CreateDate");
				this.OnCreateDateChanged();
			}
		}
	}
	
	[Column(Storage="_LastLoginDate", DbType="DateTime NOT NULL")]
	public System.DateTime LastLoginDate
	{
		get
		{
			return this._LastLoginDate;
		}
		set
		{
			if ((this._LastLoginDate != value))
			{
				this.OnLastLoginDateChanging(value);
				this.SendPropertyChanging();
				this._LastLoginDate = value;
				this.SendPropertyChanged("LastLoginDate");
				this.OnLastLoginDateChanged();
			}
		}
	}
	
	[Column(Storage="_LastPasswordChangedDate", DbType="DateTime NOT NULL")]
	public System.DateTime LastPasswordChangedDate
	{
		get
		{
			return this._LastPasswordChangedDate;
		}
		set
		{
			if ((this._LastPasswordChangedDate != value))
			{
				this.OnLastPasswordChangedDateChanging(value);
				this.SendPropertyChanging();
				this._LastPasswordChangedDate = value;
				this.SendPropertyChanged("LastPasswordChangedDate");
				this.OnLastPasswordChangedDateChanged();
			}
		}
	}
	
	[Column(Storage="_LastLockoutDate", DbType="DateTime NOT NULL")]
	public System.DateTime LastLockoutDate
	{
		get
		{
			return this._LastLockoutDate;
		}
		set
		{
			if ((this._LastLockoutDate != value))
			{
				this.OnLastLockoutDateChanging(value);
				this.SendPropertyChanging();
				this._LastLockoutDate = value;
				this.SendPropertyChanged("LastLockoutDate");
				this.OnLastLockoutDateChanged();
			}
		}
	}
	
	[Column(Storage="_FailedPasswordAttemptCount", DbType="Int NOT NULL")]
	public int FailedPasswordAttemptCount
	{
		get
		{
			return this._FailedPasswordAttemptCount;
		}
		set
		{
			if ((this._FailedPasswordAttemptCount != value))
			{
				this.OnFailedPasswordAttemptCountChanging(value);
				this.SendPropertyChanging();
				this._FailedPasswordAttemptCount = value;
				this.SendPropertyChanged("FailedPasswordAttemptCount");
				this.OnFailedPasswordAttemptCountChanged();
			}
		}
	}
	
	[Column(Storage="_FailedPasswordAttemptWindowStart", DbType="DateTime NOT NULL")]
	public System.DateTime FailedPasswordAttemptWindowStart
	{
		get
		{
			return this._FailedPasswordAttemptWindowStart;
		}
		set
		{
			if ((this._FailedPasswordAttemptWindowStart != value))
			{
				this.OnFailedPasswordAttemptWindowStartChanging(value);
				this.SendPropertyChanging();
				this._FailedPasswordAttemptWindowStart = value;
				this.SendPropertyChanged("FailedPasswordAttemptWindowStart");
				this.OnFailedPasswordAttemptWindowStartChanged();
			}
		}
	}
	
	[Column(Storage="_FailedPasswordAnswerAttemptCount", DbType="Int NOT NULL")]
	public int FailedPasswordAnswerAttemptCount
	{
		get
		{
			return this._FailedPasswordAnswerAttemptCount;
		}
		set
		{
			if ((this._FailedPasswordAnswerAttemptCount != value))
			{
				this.OnFailedPasswordAnswerAttemptCountChanging(value);
				this.SendPropertyChanging();
				this._FailedPasswordAnswerAttemptCount = value;
				this.SendPropertyChanged("FailedPasswordAnswerAttemptCount");
				this.OnFailedPasswordAnswerAttemptCountChanged();
			}
		}
	}
	
	[Column(Storage="_FailedPasswordAnswerAttemptWindowStart", DbType="DateTime NOT NULL")]
	public System.DateTime FailedPasswordAnswerAttemptWindowStart
	{
		get
		{
			return this._FailedPasswordAnswerAttemptWindowStart;
		}
		set
		{
			if ((this._FailedPasswordAnswerAttemptWindowStart != value))
			{
				this.OnFailedPasswordAnswerAttemptWindowStartChanging(value);
				this.SendPropertyChanging();
				this._FailedPasswordAnswerAttemptWindowStart = value;
				this.SendPropertyChanged("FailedPasswordAnswerAttemptWindowStart");
				this.OnFailedPasswordAnswerAttemptWindowStartChanged();
			}
		}
	}
	
	[Column(Storage="_Comment", DbType="NText", UpdateCheck=UpdateCheck.Never)]
	public string Comment
	{
		get
		{
			return this._Comment;
		}
		set
		{
			if ((this._Comment != value))
			{
				this.OnCommentChanging(value);
				this.SendPropertyChanging();
				this._Comment = value;
				this.SendPropertyChanged("Comment");
				this.OnCommentChanged();
			}
		}
	}
	
	[Association(Name="aspnet_User_aspnet_Membership", Storage="_aspnet_User", ThisKey="UserId", OtherKey="UserId", IsForeignKey=true)]
	public aspnet_User aspnet_User
	{
		get
		{
			return this._aspnet_User.Entity;
		}
		set
		{
			aspnet_User previousValue = this._aspnet_User.Entity;
			if (((previousValue != value) 
						|| (this._aspnet_User.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._aspnet_User.Entity = null;
					previousValue.aspnet_Membership = null;
				}
				this._aspnet_User.Entity = value;
				if ((value != null))
				{
					value.aspnet_Membership = this;
					this._UserId = value.UserId;
				}
				else
				{
					this._UserId = default(System.Guid);
				}
				this.SendPropertyChanged("aspnet_User");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}

[Table(Name="dbo.Company")]
public partial class Company : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private System.Guid _ID;
	
	private string _Name;
	
	private string _NameInEnglish;
	
	private string _NameInShort;
	
	private string _Address;
	
	private string _Phone;
	
	private string _Fax;
	
	private string _Email;
	
	private string _Website;
	
	private string _TaxNo;
	
	private System.Nullable<System.Guid> _DefaultBankAccountID;
	
	private EntitySet<CompanyBankAccount> _CompanyBankAccounts;
	
	private EntitySet<CompanyLocation> _CompanyLocations;
	
	private EntitySet<Supplier> _Suppliers;
	
	private EntitySet<Warehouse> _Warehouses;
	
	private EntitySet<Furniture> _Furnitures;
	
	private EntitySet<Customer> _Customers;
	
	private EntitySet<PointDef> _PointDefs;
	
	private EntityRef<CompanyBankAccount> _CompanyBankAccount;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(System.Guid value);
    partial void OnIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnNameInEnglishChanging(string value);
    partial void OnNameInEnglishChanged();
    partial void OnNameInShortChanging(string value);
    partial void OnNameInShortChanged();
    partial void OnAddressChanging(string value);
    partial void OnAddressChanged();
    partial void OnPhoneChanging(string value);
    partial void OnPhoneChanged();
    partial void OnFaxChanging(string value);
    partial void OnFaxChanged();
    partial void OnEmailChanging(string value);
    partial void OnEmailChanged();
    partial void OnWebsiteChanging(string value);
    partial void OnWebsiteChanged();
    partial void OnTaxNoChanging(string value);
    partial void OnTaxNoChanged();
    partial void OnDefaultBankAccountIDChanging(System.Nullable<System.Guid> value);
    partial void OnDefaultBankAccountIDChanged();
    #endregion
	
	public Company()
	{
		this._CompanyBankAccounts = new EntitySet<CompanyBankAccount>(new Action<CompanyBankAccount>(this.attach_CompanyBankAccounts), new Action<CompanyBankAccount>(this.detach_CompanyBankAccounts));
		this._CompanyLocations = new EntitySet<CompanyLocation>(new Action<CompanyLocation>(this.attach_CompanyLocations), new Action<CompanyLocation>(this.detach_CompanyLocations));
		this._Suppliers = new EntitySet<Supplier>(new Action<Supplier>(this.attach_Suppliers), new Action<Supplier>(this.detach_Suppliers));
		this._Warehouses = new EntitySet<Warehouse>(new Action<Warehouse>(this.attach_Warehouses), new Action<Warehouse>(this.detach_Warehouses));
		this._Furnitures = new EntitySet<Furniture>(new Action<Furniture>(this.attach_Furnitures), new Action<Furniture>(this.detach_Furnitures));
		this._Customers = new EntitySet<Customer>(new Action<Customer>(this.attach_Customers), new Action<Customer>(this.detach_Customers));
		this._PointDefs = new EntitySet<PointDef>(new Action<PointDef>(this.attach_PointDefs), new Action<PointDef>(this.detach_PointDefs));
		this._CompanyBankAccount = default(EntityRef<CompanyBankAccount>);
		OnCreated();
	}
	
	[Column(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true, IsDbGenerated=true)]
	public System.Guid ID
	{
		get
		{
			return this._ID;
		}
		set
		{
			if ((this._ID != value))
			{
				this.OnIDChanging(value);
				this.SendPropertyChanging();
				this._ID = value;
				this.SendPropertyChanged("ID");
				this.OnIDChanged();
			}
		}
	}
	
	[Column(Storage="_Name", DbType="NVarChar(MAX)")]
	public string Name
	{
		get
		{
			return this._Name;
		}
		set
		{
			if ((this._Name != value))
			{
				this.OnNameChanging(value);
				this.SendPropertyChanging();
				this._Name = value;
				this.SendPropertyChanged("Name");
				this.OnNameChanged();
			}
		}
	}
	
	[Column(Storage="_NameInEnglish", DbType="NVarChar(MAX)")]
	public string NameInEnglish
	{
		get
		{
			return this._NameInEnglish;
		}
		set
		{
			if ((this._NameInEnglish != value))
			{
				this.OnNameInEnglishChanging(value);
				this.SendPropertyChanging();
				this._NameInEnglish = value;
				this.SendPropertyChanged("NameInEnglish");
				this.OnNameInEnglishChanged();
			}
		}
	}
	
	[Column(Storage="_NameInShort", DbType="NVarChar(MAX)")]
	public string NameInShort
	{
		get
		{
			return this._NameInShort;
		}
		set
		{
			if ((this._NameInShort != value))
			{
				this.OnNameInShortChanging(value);
				this.SendPropertyChanging();
				this._NameInShort = value;
				this.SendPropertyChanged("NameInShort");
				this.OnNameInShortChanged();
			}
		}
	}
	
	[Column(Storage="_Address", DbType="NVarChar(MAX)")]
	public string Address
	{
		get
		{
			return this._Address;
		}
		set
		{
			if ((this._Address != value))
			{
				this.OnAddressChanging(value);
				this.SendPropertyChanging();
				this._Address = value;
				this.SendPropertyChanged("Address");
				this.OnAddressChanged();
			}
		}
	}
	
	[Column(Storage="_Phone", DbType="NVarChar(MAX)")]
	public string Phone
	{
		get
		{
			return this._Phone;
		}
		set
		{
			if ((this._Phone != value))
			{
				this.OnPhoneChanging(value);
				this.SendPropertyChanging();
				this._Phone = value;
				this.SendPropertyChanged("Phone");
				this.OnPhoneChanged();
			}
		}
	}
	
	[Column(Storage="_Fax", DbType="NVarChar(MAX)")]
	public string Fax
	{
		get
		{
			return this._Fax;
		}
		set
		{
			if ((this._Fax != value))
			{
				this.OnFaxChanging(value);
				this.SendPropertyChanging();
				this._Fax = value;
				this.SendPropertyChanged("Fax");
				this.OnFaxChanged();
			}
		}
	}
	
	[Column(Storage="_Email", DbType="NVarChar(MAX)")]
	public string Email
	{
		get
		{
			return this._Email;
		}
		set
		{
			if ((this._Email != value))
			{
				this.OnEmailChanging(value);
				this.SendPropertyChanging();
				this._Email = value;
				this.SendPropertyChanged("Email");
				this.OnEmailChanged();
			}
		}
	}
	
	[Column(Storage="_Website", DbType="NVarChar(MAX)")]
	public string Website
	{
		get
		{
			return this._Website;
		}
		set
		{
			if ((this._Website != value))
			{
				this.OnWebsiteChanging(value);
				this.SendPropertyChanging();
				this._Website = value;
				this.SendPropertyChanged("Website");
				this.OnWebsiteChanged();
			}
		}
	}
	
	[Column(Storage="_TaxNo", DbType="NVarChar(MAX)")]
	public string TaxNo
	{
		get
		{
			return this._TaxNo;
		}
		set
		{
			if ((this._TaxNo != value))
			{
				this.OnTaxNoChanging(value);
				this.SendPropertyChanging();
				this._TaxNo = value;
				this.SendPropertyChanged("TaxNo");
				this.OnTaxNoChanged();
			}
		}
	}
	
	[Column(Storage="_DefaultBankAccountID", DbType="UniqueIdentifier")]
	public System.Nullable<System.Guid> DefaultBankAccountID
	{
		get
		{
			return this._DefaultBankAccountID;
		}
		set
		{
			if ((this._DefaultBankAccountID != value))
			{
				if (this._CompanyBankAccount.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnDefaultBankAccountIDChanging(value);
				this.SendPropertyChanging();
				this._DefaultBankAccountID = value;
				this.SendPropertyChanged("DefaultBankAccountID");
				this.OnDefaultBankAccountIDChanged();
			}
		}
	}
	
	[Association(Name="Company_CompanyBankAccount", Storage="_CompanyBankAccounts", ThisKey="ID", OtherKey="CompanyID")]
	public EntitySet<CompanyBankAccount> CompanyBankAccounts
	{
		get
		{
			return this._CompanyBankAccounts;
		}
		set
		{
			this._CompanyBankAccounts.Assign(value);
		}
	}
	
	[Association(Name="Company_CompanyLocation", Storage="_CompanyLocations", ThisKey="ID", OtherKey="CompanyID")]
	public EntitySet<CompanyLocation> CompanyLocations
	{
		get
		{
			return this._CompanyLocations;
		}
		set
		{
			this._CompanyLocations.Assign(value);
		}
	}
	
	[Association(Name="Company_Supplier", Storage="_Suppliers", ThisKey="ID", OtherKey="CompanyID")]
	public EntitySet<Supplier> Suppliers
	{
		get
		{
			return this._Suppliers;
		}
		set
		{
			this._Suppliers.Assign(value);
		}
	}
	
	[Association(Name="Company_Warehouse", Storage="_Warehouses", ThisKey="ID", OtherKey="CompanyID")]
	public EntitySet<Warehouse> Warehouses
	{
		get
		{
			return this._Warehouses;
		}
		set
		{
			this._Warehouses.Assign(value);
		}
	}
	
	[Association(Name="Company_Furniture", Storage="_Furnitures", ThisKey="ID", OtherKey="CompanyID")]
	public EntitySet<Furniture> Furnitures
	{
		get
		{
			return this._Furnitures;
		}
		set
		{
			this._Furnitures.Assign(value);
		}
	}
	
	[Association(Name="Company_Customer", Storage="_Customers", ThisKey="ID", OtherKey="CompanyID")]
	public EntitySet<Customer> Customers
	{
		get
		{
			return this._Customers;
		}
		set
		{
			this._Customers.Assign(value);
		}
	}
	
	[Association(Name="Company_PointDef", Storage="_PointDefs", ThisKey="ID", OtherKey="CompanyID")]
	public EntitySet<PointDef> PointDefs
	{
		get
		{
			return this._PointDefs;
		}
		set
		{
			this._PointDefs.Assign(value);
		}
	}
	
	[Association(Name="CompanyBankAccount_Company", Storage="_CompanyBankAccount", ThisKey="DefaultBankAccountID", OtherKey="ID", IsForeignKey=true)]
	public CompanyBankAccount CompanyBankAccount
	{
		get
		{
			return this._CompanyBankAccount.Entity;
		}
		set
		{
			CompanyBankAccount previousValue = this._CompanyBankAccount.Entity;
			if (((previousValue != value) 
						|| (this._CompanyBankAccount.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._CompanyBankAccount.Entity = null;
					previousValue.Companies.Remove(this);
				}
				this._CompanyBankAccount.Entity = value;
				if ((value != null))
				{
					value.Companies.Add(this);
					this._DefaultBankAccountID = value.ID;
				}
				else
				{
					this._DefaultBankAccountID = default(Nullable<System.Guid>);
				}
				this.SendPropertyChanged("CompanyBankAccount");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_CompanyBankAccounts(CompanyBankAccount entity)
	{
		this.SendPropertyChanging();
		entity.Company = this;
	}
	
	private void detach_CompanyBankAccounts(CompanyBankAccount entity)
	{
		this.SendPropertyChanging();
		entity.Company = null;
	}
	
	private void attach_CompanyLocations(CompanyLocation entity)
	{
		this.SendPropertyChanging();
		entity.Company = this;
	}
	
	private void detach_CompanyLocations(CompanyLocation entity)
	{
		this.SendPropertyChanging();
		entity.Company = null;
	}
	
	private void attach_Suppliers(Supplier entity)
	{
		this.SendPropertyChanging();
		entity.Company = this;
	}
	
	private void detach_Suppliers(Supplier entity)
	{
		this.SendPropertyChanging();
		entity.Company = null;
	}
	
	private void attach_Warehouses(Warehouse entity)
	{
		this.SendPropertyChanging();
		entity.Company = this;
	}
	
	private void detach_Warehouses(Warehouse entity)
	{
		this.SendPropertyChanging();
		entity.Company = null;
	}
	
	private void attach_Furnitures(Furniture entity)
	{
		this.SendPropertyChanging();
		entity.Company = this;
	}
	
	private void detach_Furnitures(Furniture entity)
	{
		this.SendPropertyChanging();
		entity.Company = null;
	}
	
	private void attach_Customers(Customer entity)
	{
		this.SendPropertyChanging();
		entity.Company = this;
	}
	
	private void detach_Customers(Customer entity)
	{
		this.SendPropertyChanging();
		entity.Company = null;
	}
	
	private void attach_PointDefs(PointDef entity)
	{
		this.SendPropertyChanging();
		entity.Company = this;
	}
	
	private void detach_PointDefs(PointDef entity)
	{
		this.SendPropertyChanging();
		entity.Company = null;
	}
}

[Table(Name="dbo.CompanyBankAccount")]
public partial class CompanyBankAccount : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private System.Guid _ID;
	
	private System.Nullable<System.Guid> _CompanyID;
	
	private System.Nullable<System.Guid> _BankID;
	
	private string _Name;
	
	private string _No;
	
	private string _Note;
	
	private EntitySet<Company> _Companies;
	
	private EntityRef<Company> _Company;
	
	private EntityRef<Bank> _Bank;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(System.Guid value);
    partial void OnIDChanged();
    partial void OnCompanyIDChanging(System.Nullable<System.Guid> value);
    partial void OnCompanyIDChanged();
    partial void OnBankIDChanging(System.Nullable<System.Guid> value);
    partial void OnBankIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnNoChanging(string value);
    partial void OnNoChanged();
    partial void OnNoteChanging(string value);
    partial void OnNoteChanged();
    #endregion
	
	public CompanyBankAccount()
	{
		this._Companies = new EntitySet<Company>(new Action<Company>(this.attach_Companies), new Action<Company>(this.detach_Companies));
		this._Company = default(EntityRef<Company>);
		this._Bank = default(EntityRef<Bank>);
		OnCreated();
	}
	
	[Column(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true, IsDbGenerated=true)]
	public System.Guid ID
	{
		get
		{
			return this._ID;
		}
		set
		{
			if ((this._ID != value))
			{
				this.OnIDChanging(value);
				this.SendPropertyChanging();
				this._ID = value;
				this.SendPropertyChanged("ID");
				this.OnIDChanged();
			}
		}
	}
	
	[Column(Storage="_CompanyID", DbType="UniqueIdentifier")]
	public System.Nullable<System.Guid> CompanyID
	{
		get
		{
			return this._CompanyID;
		}
		set
		{
			if ((this._CompanyID != value))
			{
				if (this._Company.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnCompanyIDChanging(value);
				this.SendPropertyChanging();
				this._CompanyID = value;
				this.SendPropertyChanged("CompanyID");
				this.OnCompanyIDChanged();
			}
		}
	}
	
	[Column(Storage="_BankID", DbType="UniqueIdentifier")]
	public System.Nullable<System.Guid> BankID
	{
		get
		{
			return this._BankID;
		}
		set
		{
			if ((this._BankID != value))
			{
				if (this._Bank.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnBankIDChanging(value);
				this.SendPropertyChanging();
				this._BankID = value;
				this.SendPropertyChanged("BankID");
				this.OnBankIDChanged();
			}
		}
	}
	
	[Column(Storage="_Name", DbType="NVarChar(MAX)")]
	public string Name
	{
		get
		{
			return this._Name;
		}
		set
		{
			if ((this._Name != value))
			{
				this.OnNameChanging(value);
				this.SendPropertyChanging();
				this._Name = value;
				this.SendPropertyChanged("Name");
				this.OnNameChanged();
			}
		}
	}
	
	[Column(Storage="_No", DbType="NVarChar(MAX)")]
	public string No
	{
		get
		{
			return this._No;
		}
		set
		{
			if ((this._No != value))
			{
				this.OnNoChanging(value);
				this.SendPropertyChanging();
				this._No = value;
				this.SendPropertyChanged("No");
				this.OnNoChanged();
			}
		}
	}
	
	[Column(Storage="_Note", DbType="NVarChar(MAX)")]
	public string Note
	{
		get
		{
			return this._Note;
		}
		set
		{
			if ((this._Note != value))
			{
				this.OnNoteChanging(value);
				this.SendPropertyChanging();
				this._Note = value;
				this.SendPropertyChanged("Note");
				this.OnNoteChanged();
			}
		}
	}
	
	[Association(Name="CompanyBankAccount_Company", Storage="_Companies", ThisKey="ID", OtherKey="DefaultBankAccountID")]
	public EntitySet<Company> Companies
	{
		get
		{
			return this._Companies;
		}
		set
		{
			this._Companies.Assign(value);
		}
	}
	
	[Association(Name="Company_CompanyBankAccount", Storage="_Company", ThisKey="CompanyID", OtherKey="ID", IsForeignKey=true)]
	public Company Company
	{
		get
		{
			return this._Company.Entity;
		}
		set
		{
			Company previousValue = this._Company.Entity;
			if (((previousValue != value) 
						|| (this._Company.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Company.Entity = null;
					previousValue.CompanyBankAccounts.Remove(this);
				}
				this._Company.Entity = value;
				if ((value != null))
				{
					value.CompanyBankAccounts.Add(this);
					this._CompanyID = value.ID;
				}
				else
				{
					this._CompanyID = default(Nullable<System.Guid>);
				}
				this.SendPropertyChanged("Company");
			}
		}
	}
	
	[Association(Name="Bank_CompanyBankAccount", Storage="_Bank", ThisKey="BankID", OtherKey="ID", IsForeignKey=true)]
	public Bank Bank
	{
		get
		{
			return this._Bank.Entity;
		}
		set
		{
			Bank previousValue = this._Bank.Entity;
			if (((previousValue != value) 
						|| (this._Bank.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Bank.Entity = null;
					previousValue.CompanyBankAccounts.Remove(this);
				}
				this._Bank.Entity = value;
				if ((value != null))
				{
					value.CompanyBankAccounts.Add(this);
					this._BankID = value.ID;
				}
				else
				{
					this._BankID = default(Nullable<System.Guid>);
				}
				this.SendPropertyChanged("Bank");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_Companies(Company entity)
	{
		this.SendPropertyChanging();
		entity.CompanyBankAccount = this;
	}
	
	private void detach_Companies(Company entity)
	{
		this.SendPropertyChanging();
		entity.CompanyBankAccount = null;
	}
}

[Table(Name="dbo.SupplierContactPerson")]
public partial class SupplierContactPerson : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private System.Guid _ID;
	
	private string _FullName;
	
	private string _Phone;
	
	private string _Email;
	
	private System.Nullable<System.DateTime> _Birthday;
	
	private string _Title;
	
	private string _Note;
	
	private System.Nullable<System.Guid> _SupplierLocationID;
	
	private EntityRef<SupplierLocation> _SupplierLocation;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(System.Guid value);
    partial void OnIDChanged();
    partial void OnFullNameChanging(string value);
    partial void OnFullNameChanged();
    partial void OnPhoneChanging(string value);
    partial void OnPhoneChanged();
    partial void OnEmailChanging(string value);
    partial void OnEmailChanged();
    partial void OnBirthdayChanging(System.Nullable<System.DateTime> value);
    partial void OnBirthdayChanged();
    partial void OnTitleChanging(string value);
    partial void OnTitleChanged();
    partial void OnNoteChanging(string value);
    partial void OnNoteChanged();
    partial void OnSupplierLocationIDChanging(System.Nullable<System.Guid> value);
    partial void OnSupplierLocationIDChanged();
    #endregion
	
	public SupplierContactPerson()
	{
		this._SupplierLocation = default(EntityRef<SupplierLocation>);
		OnCreated();
	}
	
	[Column(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true, IsDbGenerated=true)]
	public System.Guid ID
	{
		get
		{
			return this._ID;
		}
		set
		{
			if ((this._ID != value))
			{
				this.OnIDChanging(value);
				this.SendPropertyChanging();
				this._ID = value;
				this.SendPropertyChanged("ID");
				this.OnIDChanged();
			}
		}
	}
	
	[Column(Storage="_FullName", DbType="NVarChar(MAX)")]
	public string FullName
	{
		get
		{
			return this._FullName;
		}
		set
		{
			if ((this._FullName != value))
			{
				this.OnFullNameChanging(value);
				this.SendPropertyChanging();
				this._FullName = value;
				this.SendPropertyChanged("FullName");
				this.OnFullNameChanged();
			}
		}
	}
	
	[Column(Storage="_Phone", DbType="NVarChar(MAX)")]
	public string Phone
	{
		get
		{
			return this._Phone;
		}
		set
		{
			if ((this._Phone != value))
			{
				this.OnPhoneChanging(value);
				this.SendPropertyChanging();
				this._Phone = value;
				this.SendPropertyChanged("Phone");
				this.OnPhoneChanged();
			}
		}
	}
	
	[Column(Storage="_Email", DbType="NVarChar(MAX)")]
	public string Email
	{
		get
		{
			return this._Email;
		}
		set
		{
			if ((this._Email != value))
			{
				this.OnEmailChanging(value);
				this.SendPropertyChanging();
				this._Email = value;
				this.SendPropertyChanged("Email");
				this.OnEmailChanged();
			}
		}
	}
	
	[Column(Storage="_Birthday", DbType="DateTime")]
	public System.Nullable<System.DateTime> Birthday
	{
		get
		{
			return this._Birthday;
		}
		set
		{
			if ((this._Birthday != value))
			{
				this.OnBirthdayChanging(value);
				this.SendPropertyChanging();
				this._Birthday = value;
				this.SendPropertyChanged("Birthday");
				this.OnBirthdayChanged();
			}
		}
	}
	
	[Column(Storage="_Title", DbType="NVarChar(MAX)")]
	public string Title
	{
		get
		{
			return this._Title;
		}
		set
		{
			if ((this._Title != value))
			{
				this.OnTitleChanging(value);
				this.SendPropertyChanging();
				this._Title = value;
				this.SendPropertyChanged("Title");
				this.OnTitleChanged();
			}
		}
	}
	
	[Column(Storage="_Note", DbType="NVarChar(MAX)")]
	public string Note
	{
		get
		{
			return this._Note;
		}
		set
		{
			if ((this._Note != value))
			{
				this.OnNoteChanging(value);
				this.SendPropertyChanging();
				this._Note = value;
				this.SendPropertyChanged("Note");
				this.OnNoteChanged();
			}
		}
	}
	
	[Column(Storage="_SupplierLocationID", DbType="UniqueIdentifier")]
	public System.Nullable<System.Guid> SupplierLocationID
	{
		get
		{
			return this._SupplierLocationID;
		}
		set
		{
			if ((this._SupplierLocationID != value))
			{
				if (this._SupplierLocation.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnSupplierLocationIDChanging(value);
				this.SendPropertyChanging();
				this._SupplierLocationID = value;
				this.SendPropertyChanged("SupplierLocationID");
				this.OnSupplierLocationIDChanged();
			}
		}
	}
	
	[Association(Name="SupplierLocation_SupplierContactPerson", Storage="_SupplierLocation", ThisKey="SupplierLocationID", OtherKey="ID", IsForeignKey=true)]
	public SupplierLocation SupplierLocation
	{
		get
		{
			return this._SupplierLocation.Entity;
		}
		set
		{
			SupplierLocation previousValue = this._SupplierLocation.Entity;
			if (((previousValue != value) 
						|| (this._SupplierLocation.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._SupplierLocation.Entity = null;
					previousValue.SupplierContactPersons.Remove(this);
				}
				this._SupplierLocation.Entity = value;
				if ((value != null))
				{
					value.SupplierContactPersons.Add(this);
					this._SupplierLocationID = value.ID;
				}
				else
				{
					this._SupplierLocationID = default(Nullable<System.Guid>);
				}
				this.SendPropertyChanged("SupplierLocation");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}

[Table(Name="dbo.SupplierBankAccount")]
public partial class SupplierBankAccount : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private System.Guid _ID;
	
	private System.Nullable<System.Guid> _SupplierID;
	
	private System.Nullable<System.Guid> _BankID;
	
	private string _Name;
	
	private string _No;
	
	private string _Note;
	
	private EntitySet<Supplier> _Suppliers;
	
	private EntityRef<Bank> _Bank;
	
	private EntityRef<Supplier> _Supplier;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(System.Guid value);
    partial void OnIDChanged();
    partial void OnSupplierIDChanging(System.Nullable<System.Guid> value);
    partial void OnSupplierIDChanged();
    partial void OnBankIDChanging(System.Nullable<System.Guid> value);
    partial void OnBankIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnNoChanging(string value);
    partial void OnNoChanged();
    partial void OnNoteChanging(string value);
    partial void OnNoteChanged();
    #endregion
	
	public SupplierBankAccount()
	{
		this._Suppliers = new EntitySet<Supplier>(new Action<Supplier>(this.attach_Suppliers), new Action<Supplier>(this.detach_Suppliers));
		this._Bank = default(EntityRef<Bank>);
		this._Supplier = default(EntityRef<Supplier>);
		OnCreated();
	}
	
	[Column(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true, IsDbGenerated=true)]
	public System.Guid ID
	{
		get
		{
			return this._ID;
		}
		set
		{
			if ((this._ID != value))
			{
				this.OnIDChanging(value);
				this.SendPropertyChanging();
				this._ID = value;
				this.SendPropertyChanged("ID");
				this.OnIDChanged();
			}
		}
	}
	
	[Column(Storage="_SupplierID", DbType="UniqueIdentifier")]
	public System.Nullable<System.Guid> SupplierID
	{
		get
		{
			return this._SupplierID;
		}
		set
		{
			if ((this._SupplierID != value))
			{
				if (this._Supplier.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnSupplierIDChanging(value);
				this.SendPropertyChanging();
				this._SupplierID = value;
				this.SendPropertyChanged("SupplierID");
				this.OnSupplierIDChanged();
			}
		}
	}
	
	[Column(Storage="_BankID", DbType="UniqueIdentifier")]
	public System.Nullable<System.Guid> BankID
	{
		get
		{
			return this._BankID;
		}
		set
		{
			if ((this._BankID != value))
			{
				if (this._Bank.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnBankIDChanging(value);
				this.SendPropertyChanging();
				this._BankID = value;
				this.SendPropertyChanged("BankID");
				this.OnBankIDChanged();
			}
		}
	}
	
	[Column(Storage="_Name", DbType="NVarChar(MAX)")]
	public string Name
	{
		get
		{
			return this._Name;
		}
		set
		{
			if ((this._Name != value))
			{
				this.OnNameChanging(value);
				this.SendPropertyChanging();
				this._Name = value;
				this.SendPropertyChanged("Name");
				this.OnNameChanged();
			}
		}
	}
	
	[Column(Storage="_No", DbType="NVarChar(MAX)")]
	public string No
	{
		get
		{
			return this._No;
		}
		set
		{
			if ((this._No != value))
			{
				this.OnNoChanging(value);
				this.SendPropertyChanging();
				this._No = value;
				this.SendPropertyChanged("No");
				this.OnNoChanged();
			}
		}
	}
	
	[Column(Storage="_Note", DbType="NVarChar(MAX)")]
	public string Note
	{
		get
		{
			return this._Note;
		}
		set
		{
			if ((this._Note != value))
			{
				this.OnNoteChanging(value);
				this.SendPropertyChanging();
				this._Note = value;
				this.SendPropertyChanged("Note");
				this.OnNoteChanged();
			}
		}
	}
	
	[Association(Name="SupplierBankAccount_Supplier", Storage="_Suppliers", ThisKey="ID", OtherKey="DefaultBankAccountID")]
	public EntitySet<Supplier> Suppliers
	{
		get
		{
			return this._Suppliers;
		}
		set
		{
			this._Suppliers.Assign(value);
		}
	}
	
	[Association(Name="Bank_SupplierBankAccount", Storage="_Bank", ThisKey="BankID", OtherKey="ID", IsForeignKey=true)]
	public Bank Bank
	{
		get
		{
			return this._Bank.Entity;
		}
		set
		{
			Bank previousValue = this._Bank.Entity;
			if (((previousValue != value) 
						|| (this._Bank.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Bank.Entity = null;
					previousValue.SupplierBankAccounts.Remove(this);
				}
				this._Bank.Entity = value;
				if ((value != null))
				{
					value.SupplierBankAccounts.Add(this);
					this._BankID = value.ID;
				}
				else
				{
					this._BankID = default(Nullable<System.Guid>);
				}
				this.SendPropertyChanged("Bank");
			}
		}
	}
	
	[Association(Name="Supplier_SupplierBankAccount", Storage="_Supplier", ThisKey="SupplierID", OtherKey="ID", IsForeignKey=true)]
	public Supplier Supplier
	{
		get
		{
			return this._Supplier.Entity;
		}
		set
		{
			Supplier previousValue = this._Supplier.Entity;
			if (((previousValue != value) 
						|| (this._Supplier.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Supplier.Entity = null;
					previousValue.SupplierBankAccounts.Remove(this);
				}
				this._Supplier.Entity = value;
				if ((value != null))
				{
					value.SupplierBankAccounts.Add(this);
					this._SupplierID = value.ID;
				}
				else
				{
					this._SupplierID = default(Nullable<System.Guid>);
				}
				this.SendPropertyChanged("Supplier");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_Suppliers(Supplier entity)
	{
		this.SendPropertyChanging();
		entity.SupplierBankAccount = this;
	}
	
	private void detach_Suppliers(Supplier entity)
	{
		this.SendPropertyChanging();
		entity.SupplierBankAccount = null;
	}
}

[Table(Name="dbo.Bank")]
public partial class Bank : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private System.Guid _ID;
	
	private string _Name;
	
	private string _Adddress;
	
	private string _Phone;
	
	private string _Note;
	
	private string _Fax;
	
	private System.Nullable<int> _Level;
	
	private System.Nullable<System.Guid> _ParentID;
	
	private EntitySet<CompanyBankAccount> _CompanyBankAccounts;
	
	private EntitySet<SupplierBankAccount> _SupplierBankAccounts;
	
	private EntitySet<Bank> _Banks;
	
	private EntitySet<CustomerBankAccount> _CustomerBankAccounts;
	
	private EntityRef<Bank> _Bank1;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(System.Guid value);
    partial void OnIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnAdddressChanging(string value);
    partial void OnAdddressChanged();
    partial void OnPhoneChanging(string value);
    partial void OnPhoneChanged();
    partial void OnFaxChanging(string value);
    partial void OnFaxChanged();
    partial void OnNoteChanging(string value);
    partial void OnNoteChanged();
    partial void OnLevelChanging(System.Nullable<int> value);
    partial void OnLevelChanged();
    partial void OnParentIDChanging(System.Nullable<System.Guid> value);
    partial void OnParentIDChanged();
    #endregion
	
	public Bank()
	{
		this._CompanyBankAccounts = new EntitySet<CompanyBankAccount>(new Action<CompanyBankAccount>(this.attach_CompanyBankAccounts), new Action<CompanyBankAccount>(this.detach_CompanyBankAccounts));
		this._SupplierBankAccounts = new EntitySet<SupplierBankAccount>(new Action<SupplierBankAccount>(this.attach_SupplierBankAccounts), new Action<SupplierBankAccount>(this.detach_SupplierBankAccounts));
		this._Banks = new EntitySet<Bank>(new Action<Bank>(this.attach_Banks), new Action<Bank>(this.detach_Banks));
		this._CustomerBankAccounts = new EntitySet<CustomerBankAccount>(new Action<CustomerBankAccount>(this.attach_CustomerBankAccounts), new Action<CustomerBankAccount>(this.detach_CustomerBankAccounts));
		this._Bank1 = default(EntityRef<Bank>);
		OnCreated();
	}
	
	[Column(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true, IsDbGenerated=true)]
	public System.Guid ID
	{
		get
		{
			return this._ID;
		}
		set
		{
			if ((this._ID != value))
			{
				this.OnIDChanging(value);
				this.SendPropertyChanging();
				this._ID = value;
				this.SendPropertyChanged("ID");
				this.OnIDChanged();
			}
		}
	}
	
	[Column(Storage="_Name", DbType="NVarChar(MAX)")]
	public string Name
	{
		get
		{
			return this._Name;
		}
		set
		{
			if ((this._Name != value))
			{
				this.OnNameChanging(value);
				this.SendPropertyChanging();
				this._Name = value;
				this.SendPropertyChanged("Name");
				this.OnNameChanged();
			}
		}
	}
	
	[Column(Storage="_Adddress", DbType="NVarChar(MAX)")]
	public string Adddress
	{
		get
		{
			return this._Adddress;
		}
		set
		{
			if ((this._Adddress != value))
			{
				this.OnAdddressChanging(value);
				this.SendPropertyChanging();
				this._Adddress = value;
				this.SendPropertyChanged("Adddress");
				this.OnAdddressChanged();
			}
		}
	}
	
	[Column(Storage="_Phone", DbType="NVarChar(MAX)")]
	public string Phone
	{
		get
		{
			return this._Phone;
		}
		set
		{
			if ((this._Phone != value))
			{
				this.OnPhoneChanging(value);
				this.SendPropertyChanging();
				this._Phone = value;
				this.SendPropertyChanged("Phone");
				this.OnPhoneChanged();
			}
		}
	}
	
	[Column(Storage="_Note", DbType="NVarChar(MAX)")]
	public string Fax
	{
		get
		{
			return this._Note;
		}
		set
		{
			if ((this._Note != value))
			{
				this.OnFaxChanging(value);
				this.SendPropertyChanging();
				this._Note = value;
				this.SendPropertyChanged("Fax");
				this.OnFaxChanged();
			}
		}
	}
	
	[Column(Storage="_Fax", DbType="NVarChar(MAX)")]
	public string Note
	{
		get
		{
			return this._Fax;
		}
		set
		{
			if ((this._Fax != value))
			{
				this.OnNoteChanging(value);
				this.SendPropertyChanging();
				this._Fax = value;
				this.SendPropertyChanged("Note");
				this.OnNoteChanged();
			}
		}
	}
	
	[Column(Name="[Level]", Storage="_Level", DbType="Int")]
	public System.Nullable<int> Level
	{
		get
		{
			return this._Level;
		}
		set
		{
			if ((this._Level != value))
			{
				this.OnLevelChanging(value);
				this.SendPropertyChanging();
				this._Level = value;
				this.SendPropertyChanged("Level");
				this.OnLevelChanged();
			}
		}
	}
	
	[Column(Storage="_ParentID", DbType="UniqueIdentifier")]
	public System.Nullable<System.Guid> ParentID
	{
		get
		{
			return this._ParentID;
		}
		set
		{
			if ((this._ParentID != value))
			{
				if (this._Bank1.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnParentIDChanging(value);
				this.SendPropertyChanging();
				this._ParentID = value;
				this.SendPropertyChanged("ParentID");
				this.OnParentIDChanged();
			}
		}
	}
	
	[Association(Name="Bank_CompanyBankAccount", Storage="_CompanyBankAccounts", ThisKey="ID", OtherKey="BankID")]
	public EntitySet<CompanyBankAccount> CompanyBankAccounts
	{
		get
		{
			return this._CompanyBankAccounts;
		}
		set
		{
			this._CompanyBankAccounts.Assign(value);
		}
	}
	
	[Association(Name="Bank_SupplierBankAccount", Storage="_SupplierBankAccounts", ThisKey="ID", OtherKey="BankID")]
	public EntitySet<SupplierBankAccount> SupplierBankAccounts
	{
		get
		{
			return this._SupplierBankAccounts;
		}
		set
		{
			this._SupplierBankAccounts.Assign(value);
		}
	}
	
	[Association(Name="Bank_Bank", Storage="_Banks", ThisKey="ID", OtherKey="ParentID")]
	public EntitySet<Bank> Banks
	{
		get
		{
			return this._Banks;
		}
		set
		{
			this._Banks.Assign(value);
		}
	}
	
	[Association(Name="Bank_CustomerBankAccount", Storage="_CustomerBankAccounts", ThisKey="ID", OtherKey="BankID")]
	public EntitySet<CustomerBankAccount> CustomerBankAccounts
	{
		get
		{
			return this._CustomerBankAccounts;
		}
		set
		{
			this._CustomerBankAccounts.Assign(value);
		}
	}
	
	[Association(Name="Bank_Bank", Storage="_Bank1", ThisKey="ParentID", OtherKey="ID", IsForeignKey=true)]
	public Bank Bank1
	{
		get
		{
			return this._Bank1.Entity;
		}
		set
		{
			Bank previousValue = this._Bank1.Entity;
			if (((previousValue != value) 
						|| (this._Bank1.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Bank1.Entity = null;
					previousValue.Banks.Remove(this);
				}
				this._Bank1.Entity = value;
				if ((value != null))
				{
					value.Banks.Add(this);
					this._ParentID = value.ID;
				}
				else
				{
					this._ParentID = default(Nullable<System.Guid>);
				}
				this.SendPropertyChanged("Bank1");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_CompanyBankAccounts(CompanyBankAccount entity)
	{
		this.SendPropertyChanging();
		entity.Bank = this;
	}
	
	private void detach_CompanyBankAccounts(CompanyBankAccount entity)
	{
		this.SendPropertyChanging();
		entity.Bank = null;
	}
	
	private void attach_SupplierBankAccounts(SupplierBankAccount entity)
	{
		this.SendPropertyChanging();
		entity.Bank = this;
	}
	
	private void detach_SupplierBankAccounts(SupplierBankAccount entity)
	{
		this.SendPropertyChanging();
		entity.Bank = null;
	}
	
	private void attach_Banks(Bank entity)
	{
		this.SendPropertyChanging();
		entity.Bank1 = this;
	}
	
	private void detach_Banks(Bank entity)
	{
		this.SendPropertyChanging();
		entity.Bank1 = null;
	}
	
	private void attach_CustomerBankAccounts(CustomerBankAccount entity)
	{
		this.SendPropertyChanging();
		entity.Bank = this;
	}
	
	private void detach_CustomerBankAccounts(CustomerBankAccount entity)
	{
		this.SendPropertyChanging();
		entity.Bank = null;
	}
}

[Table(Name="dbo.SupplierLocation")]
public partial class SupplierLocation : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private System.Guid _ID;
	
	private string _Name;
	
	private string _Phone;
	
	private string _Fax;
	
	private string _Address;
	
	private System.Nullable<System.Guid> _SupplierID;
	
	private System.Nullable<System.Guid> _GeoID1;
	
	private System.Nullable<System.Guid> _GeoID2;
	
	private System.Nullable<System.Guid> _GeoID3;
	
	private EntitySet<SupplierContactPerson> _SupplierContactPersons;
	
	private EntityRef<Supplier> _Supplier;
	
	private EntityRef<Geo> _Geo;
	
	private EntityRef<Geo> _Geo1;
	
	private EntityRef<Geo> _Geo2;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(System.Guid value);
    partial void OnIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnPhoneChanging(string value);
    partial void OnPhoneChanged();
    partial void OnFaxChanging(string value);
    partial void OnFaxChanged();
    partial void OnAddressChanging(string value);
    partial void OnAddressChanged();
    partial void OnSupplierIDChanging(System.Nullable<System.Guid> value);
    partial void OnSupplierIDChanged();
    partial void OnGeoID1Changing(System.Nullable<System.Guid> value);
    partial void OnGeoID1Changed();
    partial void OnGeoID2Changing(System.Nullable<System.Guid> value);
    partial void OnGeoID2Changed();
    partial void OnGeoID3Changing(System.Nullable<System.Guid> value);
    partial void OnGeoID3Changed();
    #endregion
	
	public SupplierLocation()
	{
		this._SupplierContactPersons = new EntitySet<SupplierContactPerson>(new Action<SupplierContactPerson>(this.attach_SupplierContactPersons), new Action<SupplierContactPerson>(this.detach_SupplierContactPersons));
		this._Supplier = default(EntityRef<Supplier>);
		this._Geo = default(EntityRef<Geo>);
		this._Geo1 = default(EntityRef<Geo>);
		this._Geo2 = default(EntityRef<Geo>);
		OnCreated();
	}
	
	[Column(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true, IsDbGenerated=true)]
	public System.Guid ID
	{
		get
		{
			return this._ID;
		}
		set
		{
			if ((this._ID != value))
			{
				this.OnIDChanging(value);
				this.SendPropertyChanging();
				this._ID = value;
				this.SendPropertyChanged("ID");
				this.OnIDChanged();
			}
		}
	}
	
	[Column(Storage="_Name", DbType="NVarChar(MAX)")]
	public string Name
	{
		get
		{
			return this._Name;
		}
		set
		{
			if ((this._Name != value))
			{
				this.OnNameChanging(value);
				this.SendPropertyChanging();
				this._Name = value;
				this.SendPropertyChanged("Name");
				this.OnNameChanged();
			}
		}
	}
	
	[Column(Storage="_Phone", DbType="NVarChar(MAX)")]
	public string Phone
	{
		get
		{
			return this._Phone;
		}
		set
		{
			if ((this._Phone != value))
			{
				this.OnPhoneChanging(value);
				this.SendPropertyChanging();
				this._Phone = value;
				this.SendPropertyChanged("Phone");
				this.OnPhoneChanged();
			}
		}
	}
	
	[Column(Storage="_Fax", DbType="NVarChar(MAX)")]
	public string Fax
	{
		get
		{
			return this._Fax;
		}
		set
		{
			if ((this._Fax != value))
			{
				this.OnFaxChanging(value);
				this.SendPropertyChanging();
				this._Fax = value;
				this.SendPropertyChanged("Fax");
				this.OnFaxChanged();
			}
		}
	}
	
	[Column(Storage="_Address", DbType="NVarChar(MAX)")]
	public string Address
	{
		get
		{
			return this._Address;
		}
		set
		{
			if ((this._Address != value))
			{
				this.OnAddressChanging(value);
				this.SendPropertyChanging();
				this._Address = value;
				this.SendPropertyChanged("Address");
				this.OnAddressChanged();
			}
		}
	}
	
	[Column(Storage="_SupplierID", DbType="UniqueIdentifier")]
	public System.Nullable<System.Guid> SupplierID
	{
		get
		{
			return this._SupplierID;
		}
		set
		{
			if ((this._SupplierID != value))
			{
				if (this._Supplier.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnSupplierIDChanging(value);
				this.SendPropertyChanging();
				this._SupplierID = value;
				this.SendPropertyChanged("SupplierID");
				this.OnSupplierIDChanged();
			}
		}
	}
	
	[Column(Storage="_GeoID1", DbType="UniqueIdentifier")]
	public System.Nullable<System.Guid> GeoID1
	{
		get
		{
			return this._GeoID1;
		}
		set
		{
			if ((this._GeoID1 != value))
			{
				if (this._Geo.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnGeoID1Changing(value);
				this.SendPropertyChanging();
				this._GeoID1 = value;
				this.SendPropertyChanged("GeoID1");
				this.OnGeoID1Changed();
			}
		}
	}
	
	[Column(Storage="_GeoID2", DbType="UniqueIdentifier")]
	public System.Nullable<System.Guid> GeoID2
	{
		get
		{
			return this._GeoID2;
		}
		set
		{
			if ((this._GeoID2 != value))
			{
				if (this._Geo1.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnGeoID2Changing(value);
				this.SendPropertyChanging();
				this._GeoID2 = value;
				this.SendPropertyChanged("GeoID2");
				this.OnGeoID2Changed();
			}
		}
	}
	
	[Column(Storage="_GeoID3", DbType="UniqueIdentifier")]
	public System.Nullable<System.Guid> GeoID3
	{
		get
		{
			return this._GeoID3;
		}
		set
		{
			if ((this._GeoID3 != value))
			{
				if (this._Geo2.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnGeoID3Changing(value);
				this.SendPropertyChanging();
				this._GeoID3 = value;
				this.SendPropertyChanged("GeoID3");
				this.OnGeoID3Changed();
			}
		}
	}
	
	[Association(Name="SupplierLocation_SupplierContactPerson", Storage="_SupplierContactPersons", ThisKey="ID", OtherKey="SupplierLocationID")]
	public EntitySet<SupplierContactPerson> SupplierContactPersons
	{
		get
		{
			return this._SupplierContactPersons;
		}
		set
		{
			this._SupplierContactPersons.Assign(value);
		}
	}
	
	[Association(Name="Supplier_SupplierLocation", Storage="_Supplier", ThisKey="SupplierID", OtherKey="ID", IsForeignKey=true)]
	public Supplier Supplier
	{
		get
		{
			return this._Supplier.Entity;
		}
		set
		{
			Supplier previousValue = this._Supplier.Entity;
			if (((previousValue != value) 
						|| (this._Supplier.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Supplier.Entity = null;
					previousValue.SupplierLocations.Remove(this);
				}
				this._Supplier.Entity = value;
				if ((value != null))
				{
					value.SupplierLocations.Add(this);
					this._SupplierID = value.ID;
				}
				else
				{
					this._SupplierID = default(Nullable<System.Guid>);
				}
				this.SendPropertyChanged("Supplier");
			}
		}
	}
	
	[Association(Name="Geo_SupplierLocation", Storage="_Geo", ThisKey="GeoID1", OtherKey="ID", IsForeignKey=true)]
	public Geo Geo
	{
		get
		{
			return this._Geo.Entity;
		}
		set
		{
			Geo previousValue = this._Geo.Entity;
			if (((previousValue != value) 
						|| (this._Geo.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Geo.Entity = null;
					previousValue.SupplierLocations.Remove(this);
				}
				this._Geo.Entity = value;
				if ((value != null))
				{
					value.SupplierLocations.Add(this);
					this._GeoID1 = value.ID;
				}
				else
				{
					this._GeoID1 = default(Nullable<System.Guid>);
				}
				this.SendPropertyChanged("Geo");
			}
		}
	}
	
	[Association(Name="Geo_SupplierLocation1", Storage="_Geo1", ThisKey="GeoID2", OtherKey="ID", IsForeignKey=true)]
	public Geo Geo1
	{
		get
		{
			return this._Geo1.Entity;
		}
		set
		{
			Geo previousValue = this._Geo1.Entity;
			if (((previousValue != value) 
						|| (this._Geo1.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Geo1.Entity = null;
					previousValue.SupplierLocations1.Remove(this);
				}
				this._Geo1.Entity = value;
				if ((value != null))
				{
					value.SupplierLocations1.Add(this);
					this._GeoID2 = value.ID;
				}
				else
				{
					this._GeoID2 = default(Nullable<System.Guid>);
				}
				this.SendPropertyChanged("Geo1");
			}
		}
	}
	
	[Association(Name="Geo_SupplierLocation2", Storage="_Geo2", ThisKey="GeoID3", OtherKey="ID", IsForeignKey=true)]
	public Geo Geo2
	{
		get
		{
			return this._Geo2.Entity;
		}
		set
		{
			Geo previousValue = this._Geo2.Entity;
			if (((previousValue != value) 
						|| (this._Geo2.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Geo2.Entity = null;
					previousValue.SupplierLocations2.Remove(this);
				}
				this._Geo2.Entity = value;
				if ((value != null))
				{
					value.SupplierLocations2.Add(this);
					this._GeoID3 = value.ID;
				}
				else
				{
					this._GeoID3 = default(Nullable<System.Guid>);
				}
				this.SendPropertyChanged("Geo2");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_SupplierContactPersons(SupplierContactPerson entity)
	{
		this.SendPropertyChanging();
		entity.SupplierLocation = this;
	}
	
	private void detach_SupplierContactPersons(SupplierContactPerson entity)
	{
		this.SendPropertyChanging();
		entity.SupplierLocation = null;
	}
}

[Table(Name="dbo.CompanyContactPerson")]
public partial class CompanyContactPerson : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private System.Guid _ID;
	
	private string _FullName;
	
	private string _Phone;
	
	private string _Email;
	
	private System.Nullable<System.DateTime> _Birthday;
	
	private string _Title;
	
	private string _Note;
	
	private System.Nullable<System.Guid> _CompanyLocationID;
	
	private EntityRef<CompanyLocation> _CompanyLocation;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(System.Guid value);
    partial void OnIDChanged();
    partial void OnFullNameChanging(string value);
    partial void OnFullNameChanged();
    partial void OnPhoneChanging(string value);
    partial void OnPhoneChanged();
    partial void OnEmailChanging(string value);
    partial void OnEmailChanged();
    partial void OnBirthdayChanging(System.Nullable<System.DateTime> value);
    partial void OnBirthdayChanged();
    partial void OnTitleChanging(string value);
    partial void OnTitleChanged();
    partial void OnNoteChanging(string value);
    partial void OnNoteChanged();
    partial void OnCompanyLocationIDChanging(System.Nullable<System.Guid> value);
    partial void OnCompanyLocationIDChanged();
    #endregion
	
	public CompanyContactPerson()
	{
		this._CompanyLocation = default(EntityRef<CompanyLocation>);
		OnCreated();
	}
	
	[Column(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true, IsDbGenerated=true)]
	public System.Guid ID
	{
		get
		{
			return this._ID;
		}
		set
		{
			if ((this._ID != value))
			{
				this.OnIDChanging(value);
				this.SendPropertyChanging();
				this._ID = value;
				this.SendPropertyChanged("ID");
				this.OnIDChanged();
			}
		}
	}
	
	[Column(Storage="_FullName", DbType="NVarChar(MAX)")]
	public string FullName
	{
		get
		{
			return this._FullName;
		}
		set
		{
			if ((this._FullName != value))
			{
				this.OnFullNameChanging(value);
				this.SendPropertyChanging();
				this._FullName = value;
				this.SendPropertyChanged("FullName");
				this.OnFullNameChanged();
			}
		}
	}
	
	[Column(Storage="_Phone", DbType="NVarChar(MAX)")]
	public string Phone
	{
		get
		{
			return this._Phone;
		}
		set
		{
			if ((this._Phone != value))
			{
				this.OnPhoneChanging(value);
				this.SendPropertyChanging();
				this._Phone = value;
				this.SendPropertyChanged("Phone");
				this.OnPhoneChanged();
			}
		}
	}
	
	[Column(Storage="_Email", DbType="NVarChar(MAX)")]
	public string Email
	{
		get
		{
			return this._Email;
		}
		set
		{
			if ((this._Email != value))
			{
				this.OnEmailChanging(value);
				this.SendPropertyChanging();
				this._Email = value;
				this.SendPropertyChanged("Email");
				this.OnEmailChanged();
			}
		}
	}
	
	[Column(Storage="_Birthday", DbType="DateTime")]
	public System.Nullable<System.DateTime> Birthday
	{
		get
		{
			return this._Birthday;
		}
		set
		{
			if ((this._Birthday != value))
			{
				this.OnBirthdayChanging(value);
				this.SendPropertyChanging();
				this._Birthday = value;
				this.SendPropertyChanged("Birthday");
				this.OnBirthdayChanged();
			}
		}
	}
	
	[Column(Storage="_Title", DbType="NVarChar(MAX)")]
	public string Title
	{
		get
		{
			return this._Title;
		}
		set
		{
			if ((this._Title != value))
			{
				this.OnTitleChanging(value);
				this.SendPropertyChanging();
				this._Title = value;
				this.SendPropertyChanged("Title");
				this.OnTitleChanged();
			}
		}
	}
	
	[Column(Storage="_Note", DbType="NVarChar(MAX)")]
	public string Note
	{
		get
		{
			return this._Note;
		}
		set
		{
			if ((this._Note != value))
			{
				this.OnNoteChanging(value);
				this.SendPropertyChanging();
				this._Note = value;
				this.SendPropertyChanged("Note");
				this.OnNoteChanged();
			}
		}
	}
	
	[Column(Storage="_CompanyLocationID", DbType="UniqueIdentifier")]
	public System.Nullable<System.Guid> CompanyLocationID
	{
		get
		{
			return this._CompanyLocationID;
		}
		set
		{
			if ((this._CompanyLocationID != value))
			{
				if (this._CompanyLocation.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnCompanyLocationIDChanging(value);
				this.SendPropertyChanging();
				this._CompanyLocationID = value;
				this.SendPropertyChanged("CompanyLocationID");
				this.OnCompanyLocationIDChanged();
			}
		}
	}
	
	[Association(Name="CompanyLocation_CompanyContactPerson", Storage="_CompanyLocation", ThisKey="CompanyLocationID", OtherKey="ID", IsForeignKey=true)]
	public CompanyLocation CompanyLocation
	{
		get
		{
			return this._CompanyLocation.Entity;
		}
		set
		{
			CompanyLocation previousValue = this._CompanyLocation.Entity;
			if (((previousValue != value) 
						|| (this._CompanyLocation.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._CompanyLocation.Entity = null;
					previousValue.CompanyContactPersons.Remove(this);
				}
				this._CompanyLocation.Entity = value;
				if ((value != null))
				{
					value.CompanyContactPersons.Add(this);
					this._CompanyLocationID = value.ID;
				}
				else
				{
					this._CompanyLocationID = default(Nullable<System.Guid>);
				}
				this.SendPropertyChanged("CompanyLocation");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}

[Table(Name="dbo.CompanyLocation")]
public partial class CompanyLocation : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private System.Guid _ID;
	
	private string _Nam;
	
	private string _Phone;
	
	private string _Fax;
	
	private string _Address;
	
	private System.Nullable<System.Guid> _CompanyID;
	
	private System.Nullable<System.Guid> _GeoID1;
	
	private System.Nullable<System.Guid> _GeoID2;
	
	private System.Nullable<System.Guid> _GeoID3;
	
	private EntitySet<CompanyContactPerson> _CompanyContactPersons;
	
	private EntityRef<Company> _Company;
	
	private EntityRef<Geo> _Geo;
	
	private EntityRef<Geo> _Geo1;
	
	private EntityRef<Geo> _Geo2;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(System.Guid value);
    partial void OnIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnPhoneChanging(string value);
    partial void OnPhoneChanged();
    partial void OnFaxChanging(string value);
    partial void OnFaxChanged();
    partial void OnAddressChanging(string value);
    partial void OnAddressChanged();
    partial void OnCompanyIDChanging(System.Nullable<System.Guid> value);
    partial void OnCompanyIDChanged();
    partial void OnGeoID1Changing(System.Nullable<System.Guid> value);
    partial void OnGeoID1Changed();
    partial void OnGeoID2Changing(System.Nullable<System.Guid> value);
    partial void OnGeoID2Changed();
    partial void OnGeoID3Changing(System.Nullable<System.Guid> value);
    partial void OnGeoID3Changed();
    #endregion
	
	public CompanyLocation()
	{
		this._CompanyContactPersons = new EntitySet<CompanyContactPerson>(new Action<CompanyContactPerson>(this.attach_CompanyContactPersons), new Action<CompanyContactPerson>(this.detach_CompanyContactPersons));
		this._Company = default(EntityRef<Company>);
		this._Geo = default(EntityRef<Geo>);
		this._Geo1 = default(EntityRef<Geo>);
		this._Geo2 = default(EntityRef<Geo>);
		OnCreated();
	}
	
	[Column(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true, IsDbGenerated=true)]
	public System.Guid ID
	{
		get
		{
			return this._ID;
		}
		set
		{
			if ((this._ID != value))
			{
				this.OnIDChanging(value);
				this.SendPropertyChanging();
				this._ID = value;
				this.SendPropertyChanged("ID");
				this.OnIDChanged();
			}
		}
	}
	
	[Column(Storage="_Nam", DbType="NVarChar(MAX)")]
	public string Name
	{
		get
		{
			return this._Nam;
		}
		set
		{
			if ((this._Nam != value))
			{
				this.OnNameChanging(value);
				this.SendPropertyChanging();
				this._Nam = value;
				this.SendPropertyChanged("Name");
				this.OnNameChanged();
			}
		}
	}
	
	[Column(Storage="_Phone", DbType="NVarChar(MAX)")]
	public string Phone
	{
		get
		{
			return this._Phone;
		}
		set
		{
			if ((this._Phone != value))
			{
				this.OnPhoneChanging(value);
				this.SendPropertyChanging();
				this._Phone = value;
				this.SendPropertyChanged("Phone");
				this.OnPhoneChanged();
			}
		}
	}
	
	[Column(Storage="_Fax", DbType="NVarChar(MAX)")]
	public string Fax
	{
		get
		{
			return this._Fax;
		}
		set
		{
			if ((this._Fax != value))
			{
				this.OnFaxChanging(value);
				this.SendPropertyChanging();
				this._Fax = value;
				this.SendPropertyChanged("Fax");
				this.OnFaxChanged();
			}
		}
	}
	
	[Column(Storage="_Address", DbType="NVarChar(MAX)")]
	public string Address
	{
		get
		{
			return this._Address;
		}
		set
		{
			if ((this._Address != value))
			{
				this.OnAddressChanging(value);
				this.SendPropertyChanging();
				this._Address = value;
				this.SendPropertyChanged("Address");
				this.OnAddressChanged();
			}
		}
	}
	
	[Column(Storage="_CompanyID", DbType="UniqueIdentifier")]
	public System.Nullable<System.Guid> CompanyID
	{
		get
		{
			return this._CompanyID;
		}
		set
		{
			if ((this._CompanyID != value))
			{
				if (this._Company.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnCompanyIDChanging(value);
				this.SendPropertyChanging();
				this._CompanyID = value;
				this.SendPropertyChanged("CompanyID");
				this.OnCompanyIDChanged();
			}
		}
	}
	
	[Column(Storage="_GeoID1", DbType="UniqueIdentifier")]
	public System.Nullable<System.Guid> GeoID1
	{
		get
		{
			return this._GeoID1;
		}
		set
		{
			if ((this._GeoID1 != value))
			{
				if (this._Geo.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnGeoID1Changing(value);
				this.SendPropertyChanging();
				this._GeoID1 = value;
				this.SendPropertyChanged("GeoID1");
				this.OnGeoID1Changed();
			}
		}
	}
	
	[Column(Storage="_GeoID2", DbType="UniqueIdentifier")]
	public System.Nullable<System.Guid> GeoID2
	{
		get
		{
			return this._GeoID2;
		}
		set
		{
			if ((this._GeoID2 != value))
			{
				if (this._Geo1.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnGeoID2Changing(value);
				this.SendPropertyChanging();
				this._GeoID2 = value;
				this.SendPropertyChanged("GeoID2");
				this.OnGeoID2Changed();
			}
		}
	}
	
	[Column(Storage="_GeoID3", DbType="UniqueIdentifier")]
	public System.Nullable<System.Guid> GeoID3
	{
		get
		{
			return this._GeoID3;
		}
		set
		{
			if ((this._GeoID3 != value))
			{
				if (this._Geo2.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnGeoID3Changing(value);
				this.SendPropertyChanging();
				this._GeoID3 = value;
				this.SendPropertyChanged("GeoID3");
				this.OnGeoID3Changed();
			}
		}
	}
	
	[Association(Name="CompanyLocation_CompanyContactPerson", Storage="_CompanyContactPersons", ThisKey="ID", OtherKey="CompanyLocationID")]
	public EntitySet<CompanyContactPerson> CompanyContactPersons
	{
		get
		{
			return this._CompanyContactPersons;
		}
		set
		{
			this._CompanyContactPersons.Assign(value);
		}
	}
	
	[Association(Name="Company_CompanyLocation", Storage="_Company", ThisKey="CompanyID", OtherKey="ID", IsForeignKey=true)]
	public Company Company
	{
		get
		{
			return this._Company.Entity;
		}
		set
		{
			Company previousValue = this._Company.Entity;
			if (((previousValue != value) 
						|| (this._Company.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Company.Entity = null;
					previousValue.CompanyLocations.Remove(this);
				}
				this._Company.Entity = value;
				if ((value != null))
				{
					value.CompanyLocations.Add(this);
					this._CompanyID = value.ID;
				}
				else
				{
					this._CompanyID = default(Nullable<System.Guid>);
				}
				this.SendPropertyChanged("Company");
			}
		}
	}
	
	[Association(Name="Geo_CompanyLocation", Storage="_Geo", ThisKey="GeoID1", OtherKey="ID", IsForeignKey=true)]
	public Geo Geo
	{
		get
		{
			return this._Geo.Entity;
		}
		set
		{
			Geo previousValue = this._Geo.Entity;
			if (((previousValue != value) 
						|| (this._Geo.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Geo.Entity = null;
					previousValue.CompanyLocations.Remove(this);
				}
				this._Geo.Entity = value;
				if ((value != null))
				{
					value.CompanyLocations.Add(this);
					this._GeoID1 = value.ID;
				}
				else
				{
					this._GeoID1 = default(Nullable<System.Guid>);
				}
				this.SendPropertyChanged("Geo");
			}
		}
	}
	
	[Association(Name="Geo_CompanyLocation1", Storage="_Geo1", ThisKey="GeoID2", OtherKey="ID", IsForeignKey=true)]
	public Geo Geo1
	{
		get
		{
			return this._Geo1.Entity;
		}
		set
		{
			Geo previousValue = this._Geo1.Entity;
			if (((previousValue != value) 
						|| (this._Geo1.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Geo1.Entity = null;
					previousValue.CompanyLocations1.Remove(this);
				}
				this._Geo1.Entity = value;
				if ((value != null))
				{
					value.CompanyLocations1.Add(this);
					this._GeoID2 = value.ID;
				}
				else
				{
					this._GeoID2 = default(Nullable<System.Guid>);
				}
				this.SendPropertyChanged("Geo1");
			}
		}
	}
	
	[Association(Name="Geo_CompanyLocation2", Storage="_Geo2", ThisKey="GeoID3", OtherKey="ID", IsForeignKey=true)]
	public Geo Geo2
	{
		get
		{
			return this._Geo2.Entity;
		}
		set
		{
			Geo previousValue = this._Geo2.Entity;
			if (((previousValue != value) 
						|| (this._Geo2.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Geo2.Entity = null;
					previousValue.CompanyLocations2.Remove(this);
				}
				this._Geo2.Entity = value;
				if ((value != null))
				{
					value.CompanyLocations2.Add(this);
					this._GeoID3 = value.ID;
				}
				else
				{
					this._GeoID3 = default(Nullable<System.Guid>);
				}
				this.SendPropertyChanged("Geo2");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_CompanyContactPersons(CompanyContactPerson entity)
	{
		this.SendPropertyChanging();
		entity.CompanyLocation = this;
	}
	
	private void detach_CompanyContactPersons(CompanyContactPerson entity)
	{
		this.SendPropertyChanging();
		entity.CompanyLocation = null;
	}
}

[Table(Name="dbo.CustomerBankAccount")]
public partial class CustomerBankAccount : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private System.Guid _ID;
	
	private System.Nullable<System.Guid> _CustomerID;
	
	private System.Nullable<System.Guid> _BankID;
	
	private string _Name;
	
	private string _No;
	
	private string _Note;
	
	private EntitySet<Customer> _Customers;
	
	private EntityRef<Bank> _Bank;
	
	private EntityRef<Customer> _Customer;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(System.Guid value);
    partial void OnIDChanged();
    partial void OnCustomerIDChanging(System.Nullable<System.Guid> value);
    partial void OnCustomerIDChanged();
    partial void OnBankIDChanging(System.Nullable<System.Guid> value);
    partial void OnBankIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnNoChanging(string value);
    partial void OnNoChanged();
    partial void OnNoteChanging(string value);
    partial void OnNoteChanged();
    #endregion
	
	public CustomerBankAccount()
	{
		this._Customers = new EntitySet<Customer>(new Action<Customer>(this.attach_Customers), new Action<Customer>(this.detach_Customers));
		this._Bank = default(EntityRef<Bank>);
		this._Customer = default(EntityRef<Customer>);
		OnCreated();
	}
	
	[Column(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true, IsDbGenerated=true)]
	public System.Guid ID
	{
		get
		{
			return this._ID;
		}
		set
		{
			if ((this._ID != value))
			{
				this.OnIDChanging(value);
				this.SendPropertyChanging();
				this._ID = value;
				this.SendPropertyChanged("ID");
				this.OnIDChanged();
			}
		}
	}
	
	[Column(Storage="_CustomerID", DbType="UniqueIdentifier")]
	public System.Nullable<System.Guid> CustomerID
	{
		get
		{
			return this._CustomerID;
		}
		set
		{
			if ((this._CustomerID != value))
			{
				if (this._Customer.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnCustomerIDChanging(value);
				this.SendPropertyChanging();
				this._CustomerID = value;
				this.SendPropertyChanged("CustomerID");
				this.OnCustomerIDChanged();
			}
		}
	}
	
	[Column(Storage="_BankID", DbType="UniqueIdentifier")]
	public System.Nullable<System.Guid> BankID
	{
		get
		{
			return this._BankID;
		}
		set
		{
			if ((this._BankID != value))
			{
				if (this._Bank.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnBankIDChanging(value);
				this.SendPropertyChanging();
				this._BankID = value;
				this.SendPropertyChanged("BankID");
				this.OnBankIDChanged();
			}
		}
	}
	
	[Column(Storage="_Name", DbType="NVarChar(MAX)")]
	public string Name
	{
		get
		{
			return this._Name;
		}
		set
		{
			if ((this._Name != value))
			{
				this.OnNameChanging(value);
				this.SendPropertyChanging();
				this._Name = value;
				this.SendPropertyChanged("Name");
				this.OnNameChanged();
			}
		}
	}
	
	[Column(Storage="_No", DbType="NVarChar(MAX)")]
	public string No
	{
		get
		{
			return this._No;
		}
		set
		{
			if ((this._No != value))
			{
				this.OnNoChanging(value);
				this.SendPropertyChanging();
				this._No = value;
				this.SendPropertyChanged("No");
				this.OnNoChanged();
			}
		}
	}
	
	[Column(Storage="_Note", DbType="NVarChar(MAX)")]
	public string Note
	{
		get
		{
			return this._Note;
		}
		set
		{
			if ((this._Note != value))
			{
				this.OnNoteChanging(value);
				this.SendPropertyChanging();
				this._Note = value;
				this.SendPropertyChanged("Note");
				this.OnNoteChanged();
			}
		}
	}
	
	[Association(Name="CustomerBankAccount_Customer", Storage="_Customers", ThisKey="ID", OtherKey="DefaultBankAccountID")]
	public EntitySet<Customer> Customers
	{
		get
		{
			return this._Customers;
		}
		set
		{
			this._Customers.Assign(value);
		}
	}
	
	[Association(Name="Bank_CustomerBankAccount", Storage="_Bank", ThisKey="BankID", OtherKey="ID", IsForeignKey=true)]
	public Bank Bank
	{
		get
		{
			return this._Bank.Entity;
		}
		set
		{
			Bank previousValue = this._Bank.Entity;
			if (((previousValue != value) 
						|| (this._Bank.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Bank.Entity = null;
					previousValue.CustomerBankAccounts.Remove(this);
				}
				this._Bank.Entity = value;
				if ((value != null))
				{
					value.CustomerBankAccounts.Add(this);
					this._BankID = value.ID;
				}
				else
				{
					this._BankID = default(Nullable<System.Guid>);
				}
				this.SendPropertyChanged("Bank");
			}
		}
	}
	
	[Association(Name="Customer_CustomerBankAccount", Storage="_Customer", ThisKey="CustomerID", OtherKey="ID", IsForeignKey=true)]
	public Customer Customer
	{
		get
		{
			return this._Customer.Entity;
		}
		set
		{
			Customer previousValue = this._Customer.Entity;
			if (((previousValue != value) 
						|| (this._Customer.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Customer.Entity = null;
					previousValue.CustomerBankAccounts.Remove(this);
				}
				this._Customer.Entity = value;
				if ((value != null))
				{
					value.CustomerBankAccounts.Add(this);
					this._CustomerID = value.ID;
				}
				else
				{
					this._CustomerID = default(Nullable<System.Guid>);
				}
				this.SendPropertyChanged("Customer");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_Customers(Customer entity)
	{
		this.SendPropertyChanging();
		entity.CustomerBankAccount = this;
	}
	
	private void detach_Customers(Customer entity)
	{
		this.SendPropertyChanging();
		entity.CustomerBankAccount = null;
	}
}

[Table(Name="dbo.CustomerContactPerson")]
public partial class CustomerContactPerson : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private System.Guid _ID;
	
	private string _FullName;
	
	private string _Phone;
	
	private string _Email;
	
	private string _Birthday;
	
	private string _Title;
	
	private string _Node;
	
	private System.Nullable<System.Guid> _CustomerLocationID;
	
	private EntityRef<CustomerLocation> _CustomerLocation;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(System.Guid value);
    partial void OnIDChanged();
    partial void OnFullNameChanging(string value);
    partial void OnFullNameChanged();
    partial void OnPhoneChanging(string value);
    partial void OnPhoneChanged();
    partial void OnEmailChanging(string value);
    partial void OnEmailChanged();
    partial void OnBirthdayChanging(string value);
    partial void OnBirthdayChanged();
    partial void OnTitleChanging(string value);
    partial void OnTitleChanged();
    partial void OnNoteChanging(string value);
    partial void OnNoteChanged();
    partial void OnCustomerLocationIDChanging(System.Nullable<System.Guid> value);
    partial void OnCustomerLocationIDChanged();
    #endregion
	
	public CustomerContactPerson()
	{
		this._CustomerLocation = default(EntityRef<CustomerLocation>);
		OnCreated();
	}
	
	[Column(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true, IsDbGenerated=true)]
	public System.Guid ID
	{
		get
		{
			return this._ID;
		}
		set
		{
			if ((this._ID != value))
			{
				this.OnIDChanging(value);
				this.SendPropertyChanging();
				this._ID = value;
				this.SendPropertyChanged("ID");
				this.OnIDChanged();
			}
		}
	}
	
	[Column(Storage="_FullName", DbType="NVarChar(MAX)")]
	public string FullName
	{
		get
		{
			return this._FullName;
		}
		set
		{
			if ((this._FullName != value))
			{
				this.OnFullNameChanging(value);
				this.SendPropertyChanging();
				this._FullName = value;
				this.SendPropertyChanged("FullName");
				this.OnFullNameChanged();
			}
		}
	}
	
	[Column(Storage="_Phone", DbType="NVarChar(MAX)")]
	public string Phone
	{
		get
		{
			return this._Phone;
		}
		set
		{
			if ((this._Phone != value))
			{
				this.OnPhoneChanging(value);
				this.SendPropertyChanging();
				this._Phone = value;
				this.SendPropertyChanged("Phone");
				this.OnPhoneChanged();
			}
		}
	}
	
	[Column(Storage="_Email", DbType="NVarChar(MAX)")]
	public string Email
	{
		get
		{
			return this._Email;
		}
		set
		{
			if ((this._Email != value))
			{
				this.OnEmailChanging(value);
				this.SendPropertyChanging();
				this._Email = value;
				this.SendPropertyChanged("Email");
				this.OnEmailChanged();
			}
		}
	}
	
	[Column(Storage="_Birthday", DbType="NVarChar(MAX)")]
	public string Birthday
	{
		get
		{
			return this._Birthday;
		}
		set
		{
			if ((this._Birthday != value))
			{
				this.OnBirthdayChanging(value);
				this.SendPropertyChanging();
				this._Birthday = value;
				this.SendPropertyChanged("Birthday");
				this.OnBirthdayChanged();
			}
		}
	}
	
	[Column(Storage="_Title", DbType="NVarChar(MAX)")]
	public string Title
	{
		get
		{
			return this._Title;
		}
		set
		{
			if ((this._Title != value))
			{
				this.OnTitleChanging(value);
				this.SendPropertyChanging();
				this._Title = value;
				this.SendPropertyChanged("Title");
				this.OnTitleChanged();
			}
		}
	}
	
	[Column(Storage="_Node", DbType="NVarChar(MAX)")]
	public string Note
	{
		get
		{
			return this._Node;
		}
		set
		{
			if ((this._Node != value))
			{
				this.OnNoteChanging(value);
				this.SendPropertyChanging();
				this._Node = value;
				this.SendPropertyChanged("Note");
				this.OnNoteChanged();
			}
		}
	}
	
	[Column(Storage="_CustomerLocationID", DbType="UniqueIdentifier")]
	public System.Nullable<System.Guid> CustomerLocationID
	{
		get
		{
			return this._CustomerLocationID;
		}
		set
		{
			if ((this._CustomerLocationID != value))
			{
				if (this._CustomerLocation.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnCustomerLocationIDChanging(value);
				this.SendPropertyChanging();
				this._CustomerLocationID = value;
				this.SendPropertyChanged("CustomerLocationID");
				this.OnCustomerLocationIDChanged();
			}
		}
	}
	
	[Association(Name="CustomerLocation_CustomerContactPerson", Storage="_CustomerLocation", ThisKey="CustomerLocationID", OtherKey="ID", IsForeignKey=true)]
	public CustomerLocation CustomerLocation
	{
		get
		{
			return this._CustomerLocation.Entity;
		}
		set
		{
			CustomerLocation previousValue = this._CustomerLocation.Entity;
			if (((previousValue != value) 
						|| (this._CustomerLocation.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._CustomerLocation.Entity = null;
					previousValue.CustomerContactPersons.Remove(this);
				}
				this._CustomerLocation.Entity = value;
				if ((value != null))
				{
					value.CustomerContactPersons.Add(this);
					this._CustomerLocationID = value.ID;
				}
				else
				{
					this._CustomerLocationID = default(Nullable<System.Guid>);
				}
				this.SendPropertyChanged("CustomerLocation");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}

[Table(Name="dbo.CustomerLocation")]
public partial class CustomerLocation : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private System.Guid _ID;
	
	private string _Name;
	
	private string _Phone;
	
	private string _Fax;
	
	private string _Address;
	
	private System.Nullable<System.Guid> _CustomerID;
	
	private System.Nullable<System.Guid> _GeoID1;
	
	private System.Nullable<System.Guid> _GeoID2;
	
	private System.Nullable<System.Guid> _GeoID3;
	
	private EntitySet<CustomerContactPerson> _CustomerContactPersons;
	
	private EntityRef<Customer> _Customer;
	
	private EntityRef<Geo> _Geo;
	
	private EntityRef<Geo> _Geo1;
	
	private EntityRef<Geo> _Geo2;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(System.Guid value);
    partial void OnIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnPhoneChanging(string value);
    partial void OnPhoneChanged();
    partial void OnFaxChanging(string value);
    partial void OnFaxChanged();
    partial void OnAddressChanging(string value);
    partial void OnAddressChanged();
    partial void OnCustomerIDChanging(System.Nullable<System.Guid> value);
    partial void OnCustomerIDChanged();
    partial void OnGeoID1Changing(System.Nullable<System.Guid> value);
    partial void OnGeoID1Changed();
    partial void OnGeoID2Changing(System.Nullable<System.Guid> value);
    partial void OnGeoID2Changed();
    partial void OnGeoID3Changing(System.Nullable<System.Guid> value);
    partial void OnGeoID3Changed();
    #endregion
	
	public CustomerLocation()
	{
		this._CustomerContactPersons = new EntitySet<CustomerContactPerson>(new Action<CustomerContactPerson>(this.attach_CustomerContactPersons), new Action<CustomerContactPerson>(this.detach_CustomerContactPersons));
		this._Customer = default(EntityRef<Customer>);
		this._Geo = default(EntityRef<Geo>);
		this._Geo1 = default(EntityRef<Geo>);
		this._Geo2 = default(EntityRef<Geo>);
		OnCreated();
	}
	
	[Column(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true, IsDbGenerated=true)]
	public System.Guid ID
	{
		get
		{
			return this._ID;
		}
		set
		{
			if ((this._ID != value))
			{
				this.OnIDChanging(value);
				this.SendPropertyChanging();
				this._ID = value;
				this.SendPropertyChanged("ID");
				this.OnIDChanged();
			}
		}
	}
	
	[Column(Storage="_Name", DbType="NVarChar(MAX)")]
	public string Name
	{
		get
		{
			return this._Name;
		}
		set
		{
			if ((this._Name != value))
			{
				this.OnNameChanging(value);
				this.SendPropertyChanging();
				this._Name = value;
				this.SendPropertyChanged("Name");
				this.OnNameChanged();
			}
		}
	}
	
	[Column(Storage="_Phone", DbType="NVarChar(MAX)")]
	public string Phone
	{
		get
		{
			return this._Phone;
		}
		set
		{
			if ((this._Phone != value))
			{
				this.OnPhoneChanging(value);
				this.SendPropertyChanging();
				this._Phone = value;
				this.SendPropertyChanged("Phone");
				this.OnPhoneChanged();
			}
		}
	}
	
	[Column(Storage="_Fax", DbType="NVarChar(MAX)")]
	public string Fax
	{
		get
		{
			return this._Fax;
		}
		set
		{
			if ((this._Fax != value))
			{
				this.OnFaxChanging(value);
				this.SendPropertyChanging();
				this._Fax = value;
				this.SendPropertyChanged("Fax");
				this.OnFaxChanged();
			}
		}
	}
	
	[Column(Storage="_Address", DbType="NVarChar(MAX)")]
	public string Address
	{
		get
		{
			return this._Address;
		}
		set
		{
			if ((this._Address != value))
			{
				this.OnAddressChanging(value);
				this.SendPropertyChanging();
				this._Address = value;
				this.SendPropertyChanged("Address");
				this.OnAddressChanged();
			}
		}
	}
	
	[Column(Storage="_CustomerID", DbType="UniqueIdentifier")]
	public System.Nullable<System.Guid> CustomerID
	{
		get
		{
			return this._CustomerID;
		}
		set
		{
			if ((this._CustomerID != value))
			{
				if (this._Customer.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnCustomerIDChanging(value);
				this.SendPropertyChanging();
				this._CustomerID = value;
				this.SendPropertyChanged("CustomerID");
				this.OnCustomerIDChanged();
			}
		}
	}
	
	[Column(Storage="_GeoID1", DbType="UniqueIdentifier")]
	public System.Nullable<System.Guid> GeoID1
	{
		get
		{
			return this._GeoID1;
		}
		set
		{
			if ((this._GeoID1 != value))
			{
				if (this._Geo.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnGeoID1Changing(value);
				this.SendPropertyChanging();
				this._GeoID1 = value;
				this.SendPropertyChanged("GeoID1");
				this.OnGeoID1Changed();
			}
		}
	}
	
	[Column(Storage="_GeoID2", DbType="UniqueIdentifier")]
	public System.Nullable<System.Guid> GeoID2
	{
		get
		{
			return this._GeoID2;
		}
		set
		{
			if ((this._GeoID2 != value))
			{
				if (this._Geo1.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnGeoID2Changing(value);
				this.SendPropertyChanging();
				this._GeoID2 = value;
				this.SendPropertyChanged("GeoID2");
				this.OnGeoID2Changed();
			}
		}
	}
	
	[Column(Storage="_GeoID3", DbType="UniqueIdentifier")]
	public System.Nullable<System.Guid> GeoID3
	{
		get
		{
			return this._GeoID3;
		}
		set
		{
			if ((this._GeoID3 != value))
			{
				if (this._Geo2.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnGeoID3Changing(value);
				this.SendPropertyChanging();
				this._GeoID3 = value;
				this.SendPropertyChanged("GeoID3");
				this.OnGeoID3Changed();
			}
		}
	}
	
	[Association(Name="CustomerLocation_CustomerContactPerson", Storage="_CustomerContactPersons", ThisKey="ID", OtherKey="CustomerLocationID")]
	public EntitySet<CustomerContactPerson> CustomerContactPersons
	{
		get
		{
			return this._CustomerContactPersons;
		}
		set
		{
			this._CustomerContactPersons.Assign(value);
		}
	}
	
	[Association(Name="Customer_CustomerLocation", Storage="_Customer", ThisKey="CustomerID", OtherKey="ID", IsForeignKey=true)]
	public Customer Customer
	{
		get
		{
			return this._Customer.Entity;
		}
		set
		{
			Customer previousValue = this._Customer.Entity;
			if (((previousValue != value) 
						|| (this._Customer.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Customer.Entity = null;
					previousValue.CustomerLocations.Remove(this);
				}
				this._Customer.Entity = value;
				if ((value != null))
				{
					value.CustomerLocations.Add(this);
					this._CustomerID = value.ID;
				}
				else
				{
					this._CustomerID = default(Nullable<System.Guid>);
				}
				this.SendPropertyChanged("Customer");
			}
		}
	}
	
	[Association(Name="Geo_CustomerLocation", Storage="_Geo", ThisKey="GeoID1", OtherKey="ID", IsForeignKey=true)]
	public Geo Geo
	{
		get
		{
			return this._Geo.Entity;
		}
		set
		{
			Geo previousValue = this._Geo.Entity;
			if (((previousValue != value) 
						|| (this._Geo.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Geo.Entity = null;
					previousValue.CustomerLocations.Remove(this);
				}
				this._Geo.Entity = value;
				if ((value != null))
				{
					value.CustomerLocations.Add(this);
					this._GeoID1 = value.ID;
				}
				else
				{
					this._GeoID1 = default(Nullable<System.Guid>);
				}
				this.SendPropertyChanged("Geo");
			}
		}
	}
	
	[Association(Name="Geo_CustomerLocation1", Storage="_Geo1", ThisKey="GeoID2", OtherKey="ID", IsForeignKey=true)]
	public Geo Geo1
	{
		get
		{
			return this._Geo1.Entity;
		}
		set
		{
			Geo previousValue = this._Geo1.Entity;
			if (((previousValue != value) 
						|| (this._Geo1.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Geo1.Entity = null;
					previousValue.CustomerLocations1.Remove(this);
				}
				this._Geo1.Entity = value;
				if ((value != null))
				{
					value.CustomerLocations1.Add(this);
					this._GeoID2 = value.ID;
				}
				else
				{
					this._GeoID2 = default(Nullable<System.Guid>);
				}
				this.SendPropertyChanged("Geo1");
			}
		}
	}
	
	[Association(Name="Geo_CustomerLocation2", Storage="_Geo2", ThisKey="GeoID3", OtherKey="ID", IsForeignKey=true)]
	public Geo Geo2
	{
		get
		{
			return this._Geo2.Entity;
		}
		set
		{
			Geo previousValue = this._Geo2.Entity;
			if (((previousValue != value) 
						|| (this._Geo2.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Geo2.Entity = null;
					previousValue.CustomerLocations2.Remove(this);
				}
				this._Geo2.Entity = value;
				if ((value != null))
				{
					value.CustomerLocations2.Add(this);
					this._GeoID3 = value.ID;
				}
				else
				{
					this._GeoID3 = default(Nullable<System.Guid>);
				}
				this.SendPropertyChanged("Geo2");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_CustomerContactPersons(CustomerContactPerson entity)
	{
		this.SendPropertyChanging();
		entity.CustomerLocation = this;
	}
	
	private void detach_CustomerContactPersons(CustomerContactPerson entity)
	{
		this.SendPropertyChanging();
		entity.CustomerLocation = null;
	}
}

[Table(Name="dbo.Supplier")]
public partial class Supplier : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private System.Guid _ID;
	
	private string _Name;
	
	private string _Phone;
	
	private string _Fax;
	
	private string _Email;
	
	private string _Website;
	
	private string _TaxNo;
	
	private System.Nullable<System.Guid> _DefaultBankAccountID;
	
	private System.Nullable<System.Guid> _CompanyID;
	
	private EntitySet<SupplierBankAccount> _SupplierBankAccounts;
	
	private EntitySet<SupplierLocation> _SupplierLocations;
	
	private EntityRef<Company> _Company;
	
	private EntityRef<SupplierBankAccount> _SupplierBankAccount;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(System.Guid value);
    partial void OnIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnPhoneChanging(string value);
    partial void OnPhoneChanged();
    partial void OnFaxChanging(string value);
    partial void OnFaxChanged();
    partial void OnEmailChanging(string value);
    partial void OnEmailChanged();
    partial void OnWebsiteChanging(string value);
    partial void OnWebsiteChanged();
    partial void OnTaxNoChanging(string value);
    partial void OnTaxNoChanged();
    partial void OnDefaultBankAccountIDChanging(System.Nullable<System.Guid> value);
    partial void OnDefaultBankAccountIDChanged();
    partial void OnCompanyIDChanging(System.Nullable<System.Guid> value);
    partial void OnCompanyIDChanged();
    #endregion
	
	public Supplier()
	{
		this._SupplierBankAccounts = new EntitySet<SupplierBankAccount>(new Action<SupplierBankAccount>(this.attach_SupplierBankAccounts), new Action<SupplierBankAccount>(this.detach_SupplierBankAccounts));
		this._SupplierLocations = new EntitySet<SupplierLocation>(new Action<SupplierLocation>(this.attach_SupplierLocations), new Action<SupplierLocation>(this.detach_SupplierLocations));
		this._Company = default(EntityRef<Company>);
		this._SupplierBankAccount = default(EntityRef<SupplierBankAccount>);
		OnCreated();
	}
	
	[Column(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true, IsDbGenerated=true)]
	public System.Guid ID
	{
		get
		{
			return this._ID;
		}
		set
		{
			if ((this._ID != value))
			{
				this.OnIDChanging(value);
				this.SendPropertyChanging();
				this._ID = value;
				this.SendPropertyChanged("ID");
				this.OnIDChanged();
			}
		}
	}
	
	[Column(Storage="_Name", DbType="NVarChar(MAX)")]
	public string Name
	{
		get
		{
			return this._Name;
		}
		set
		{
			if ((this._Name != value))
			{
				this.OnNameChanging(value);
				this.SendPropertyChanging();
				this._Name = value;
				this.SendPropertyChanged("Name");
				this.OnNameChanged();
			}
		}
	}
	
	[Column(Storage="_Phone", DbType="NVarChar(MAX)")]
	public string Phone
	{
		get
		{
			return this._Phone;
		}
		set
		{
			if ((this._Phone != value))
			{
				this.OnPhoneChanging(value);
				this.SendPropertyChanging();
				this._Phone = value;
				this.SendPropertyChanged("Phone");
				this.OnPhoneChanged();
			}
		}
	}
	
	[Column(Storage="_Fax", DbType="NVarChar(MAX)")]
	public string Fax
	{
		get
		{
			return this._Fax;
		}
		set
		{
			if ((this._Fax != value))
			{
				this.OnFaxChanging(value);
				this.SendPropertyChanging();
				this._Fax = value;
				this.SendPropertyChanged("Fax");
				this.OnFaxChanged();
			}
		}
	}
	
	[Column(Storage="_Email", DbType="NVarChar(MAX)")]
	public string Email
	{
		get
		{
			return this._Email;
		}
		set
		{
			if ((this._Email != value))
			{
				this.OnEmailChanging(value);
				this.SendPropertyChanging();
				this._Email = value;
				this.SendPropertyChanged("Email");
				this.OnEmailChanged();
			}
		}
	}
	
	[Column(Storage="_Website", DbType="NVarChar(MAX)")]
	public string Website
	{
		get
		{
			return this._Website;
		}
		set
		{
			if ((this._Website != value))
			{
				this.OnWebsiteChanging(value);
				this.SendPropertyChanging();
				this._Website = value;
				this.SendPropertyChanged("Website");
				this.OnWebsiteChanged();
			}
		}
	}
	
	[Column(Storage="_TaxNo", DbType="NVarChar(MAX)")]
	public string TaxNo
	{
		get
		{
			return this._TaxNo;
		}
		set
		{
			if ((this._TaxNo != value))
			{
				this.OnTaxNoChanging(value);
				this.SendPropertyChanging();
				this._TaxNo = value;
				this.SendPropertyChanged("TaxNo");
				this.OnTaxNoChanged();
			}
		}
	}
	
	[Column(Storage="_DefaultBankAccountID", DbType="UniqueIdentifier")]
	public System.Nullable<System.Guid> DefaultBankAccountID
	{
		get
		{
			return this._DefaultBankAccountID;
		}
		set
		{
			if ((this._DefaultBankAccountID != value))
			{
				if (this._SupplierBankAccount.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnDefaultBankAccountIDChanging(value);
				this.SendPropertyChanging();
				this._DefaultBankAccountID = value;
				this.SendPropertyChanged("DefaultBankAccountID");
				this.OnDefaultBankAccountIDChanged();
			}
		}
	}
	
	[Column(Storage="_CompanyID", DbType="UniqueIdentifier")]
	public System.Nullable<System.Guid> CompanyID
	{
		get
		{
			return this._CompanyID;
		}
		set
		{
			if ((this._CompanyID != value))
			{
				if (this._Company.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnCompanyIDChanging(value);
				this.SendPropertyChanging();
				this._CompanyID = value;
				this.SendPropertyChanged("CompanyID");
				this.OnCompanyIDChanged();
			}
		}
	}
	
	[Association(Name="Supplier_SupplierBankAccount", Storage="_SupplierBankAccounts", ThisKey="ID", OtherKey="SupplierID")]
	public EntitySet<SupplierBankAccount> SupplierBankAccounts
	{
		get
		{
			return this._SupplierBankAccounts;
		}
		set
		{
			this._SupplierBankAccounts.Assign(value);
		}
	}
	
	[Association(Name="Supplier_SupplierLocation", Storage="_SupplierLocations", ThisKey="ID", OtherKey="SupplierID")]
	public EntitySet<SupplierLocation> SupplierLocations
	{
		get
		{
			return this._SupplierLocations;
		}
		set
		{
			this._SupplierLocations.Assign(value);
		}
	}
	
	[Association(Name="Company_Supplier", Storage="_Company", ThisKey="CompanyID", OtherKey="ID", IsForeignKey=true)]
	public Company Company
	{
		get
		{
			return this._Company.Entity;
		}
		set
		{
			Company previousValue = this._Company.Entity;
			if (((previousValue != value) 
						|| (this._Company.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Company.Entity = null;
					previousValue.Suppliers.Remove(this);
				}
				this._Company.Entity = value;
				if ((value != null))
				{
					value.Suppliers.Add(this);
					this._CompanyID = value.ID;
				}
				else
				{
					this._CompanyID = default(Nullable<System.Guid>);
				}
				this.SendPropertyChanged("Company");
			}
		}
	}
	
	[Association(Name="SupplierBankAccount_Supplier", Storage="_SupplierBankAccount", ThisKey="DefaultBankAccountID", OtherKey="ID", IsForeignKey=true, DeleteRule="SET NULL")]
	public SupplierBankAccount SupplierBankAccount
	{
		get
		{
			return this._SupplierBankAccount.Entity;
		}
		set
		{
			SupplierBankAccount previousValue = this._SupplierBankAccount.Entity;
			if (((previousValue != value) 
						|| (this._SupplierBankAccount.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._SupplierBankAccount.Entity = null;
					previousValue.Suppliers.Remove(this);
				}
				this._SupplierBankAccount.Entity = value;
				if ((value != null))
				{
					value.Suppliers.Add(this);
					this._DefaultBankAccountID = value.ID;
				}
				else
				{
					this._DefaultBankAccountID = default(Nullable<System.Guid>);
				}
				this.SendPropertyChanged("SupplierBankAccount");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_SupplierBankAccounts(SupplierBankAccount entity)
	{
		this.SendPropertyChanging();
		entity.Supplier = this;
	}
	
	private void detach_SupplierBankAccounts(SupplierBankAccount entity)
	{
		this.SendPropertyChanging();
		entity.Supplier = null;
	}
	
	private void attach_SupplierLocations(SupplierLocation entity)
	{
		this.SendPropertyChanging();
		entity.Supplier = this;
	}
	
	private void detach_SupplierLocations(SupplierLocation entity)
	{
		this.SendPropertyChanging();
		entity.Supplier = null;
	}
}

[Table(Name="dbo.Warehouse")]
public partial class Warehouse : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private System.Guid _ID;
	
	private string _Name;
	
	private string _Code;
	
	private string _Phone;
	
	private string _Fax;
	
	private string _Address;
	
	private System.Nullable<System.Guid> _CompanyID;
	
	private EntitySet<WarehouseDivision> _WarehouseDivisions;
	
	private EntitySet<WarehouseKeeper> _WarehouseKeepers;
	
	private EntityRef<Company> _Company;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(System.Guid value);
    partial void OnIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnCodeChanging(string value);
    partial void OnCodeChanged();
    partial void OnPhoneChanging(string value);
    partial void OnPhoneChanged();
    partial void OnFaxChanging(string value);
    partial void OnFaxChanged();
    partial void OnAddressChanging(string value);
    partial void OnAddressChanged();
    partial void OnCompanyIDChanging(System.Nullable<System.Guid> value);
    partial void OnCompanyIDChanged();
    #endregion
	
	public Warehouse()
	{
		this._WarehouseDivisions = new EntitySet<WarehouseDivision>(new Action<WarehouseDivision>(this.attach_WarehouseDivisions), new Action<WarehouseDivision>(this.detach_WarehouseDivisions));
		this._WarehouseKeepers = new EntitySet<WarehouseKeeper>(new Action<WarehouseKeeper>(this.attach_WarehouseKeepers), new Action<WarehouseKeeper>(this.detach_WarehouseKeepers));
		this._Company = default(EntityRef<Company>);
		OnCreated();
	}
	
	[Column(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true, IsDbGenerated=true)]
	public System.Guid ID
	{
		get
		{
			return this._ID;
		}
		set
		{
			if ((this._ID != value))
			{
				this.OnIDChanging(value);
				this.SendPropertyChanging();
				this._ID = value;
				this.SendPropertyChanged("ID");
				this.OnIDChanged();
			}
		}
	}
	
	[Column(Storage="_Name", DbType="NVarChar(MAX)")]
	public string Name
	{
		get
		{
			return this._Name;
		}
		set
		{
			if ((this._Name != value))
			{
				this.OnNameChanging(value);
				this.SendPropertyChanging();
				this._Name = value;
				this.SendPropertyChanged("Name");
				this.OnNameChanged();
			}
		}
	}
	
	[Column(Storage="_Code", DbType="NVarChar(MAX)")]
	public string Code
	{
		get
		{
			return this._Code;
		}
		set
		{
			if ((this._Code != value))
			{
				this.OnCodeChanging(value);
				this.SendPropertyChanging();
				this._Code = value;
				this.SendPropertyChanged("Code");
				this.OnCodeChanged();
			}
		}
	}
	
	[Column(Storage="_Phone", DbType="NVarChar(MAX)")]
	public string Phone
	{
		get
		{
			return this._Phone;
		}
		set
		{
			if ((this._Phone != value))
			{
				this.OnPhoneChanging(value);
				this.SendPropertyChanging();
				this._Phone = value;
				this.SendPropertyChanged("Phone");
				this.OnPhoneChanged();
			}
		}
	}
	
	[Column(Storage="_Fax", DbType="NVarChar(MAX)")]
	public string Fax
	{
		get
		{
			return this._Fax;
		}
		set
		{
			if ((this._Fax != value))
			{
				this.OnFaxChanging(value);
				this.SendPropertyChanging();
				this._Fax = value;
				this.SendPropertyChanged("Fax");
				this.OnFaxChanged();
			}
		}
	}
	
	[Column(Storage="_Address", DbType="NVarChar(MAX)")]
	public string Address
	{
		get
		{
			return this._Address;
		}
		set
		{
			if ((this._Address != value))
			{
				this.OnAddressChanging(value);
				this.SendPropertyChanging();
				this._Address = value;
				this.SendPropertyChanged("Address");
				this.OnAddressChanged();
			}
		}
	}
	
	[Column(Storage="_CompanyID", DbType="UniqueIdentifier")]
	public System.Nullable<System.Guid> CompanyID
	{
		get
		{
			return this._CompanyID;
		}
		set
		{
			if ((this._CompanyID != value))
			{
				if (this._Company.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnCompanyIDChanging(value);
				this.SendPropertyChanging();
				this._CompanyID = value;
				this.SendPropertyChanged("CompanyID");
				this.OnCompanyIDChanged();
			}
		}
	}
	
	[Association(Name="Warehouse_WarehouseDivision", Storage="_WarehouseDivisions", ThisKey="ID", OtherKey="WarehouseID")]
	public EntitySet<WarehouseDivision> WarehouseDivisions
	{
		get
		{
			return this._WarehouseDivisions;
		}
		set
		{
			this._WarehouseDivisions.Assign(value);
		}
	}
	
	[Association(Name="Warehouse_WarehouseKeeper", Storage="_WarehouseKeepers", ThisKey="ID", OtherKey="WarehouseID")]
	public EntitySet<WarehouseKeeper> WarehouseKeepers
	{
		get
		{
			return this._WarehouseKeepers;
		}
		set
		{
			this._WarehouseKeepers.Assign(value);
		}
	}
	
	[Association(Name="Company_Warehouse", Storage="_Company", ThisKey="CompanyID", OtherKey="ID", IsForeignKey=true)]
	public Company Company
	{
		get
		{
			return this._Company.Entity;
		}
		set
		{
			Company previousValue = this._Company.Entity;
			if (((previousValue != value) 
						|| (this._Company.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Company.Entity = null;
					previousValue.Warehouses.Remove(this);
				}
				this._Company.Entity = value;
				if ((value != null))
				{
					value.Warehouses.Add(this);
					this._CompanyID = value.ID;
				}
				else
				{
					this._CompanyID = default(Nullable<System.Guid>);
				}
				this.SendPropertyChanged("Company");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_WarehouseDivisions(WarehouseDivision entity)
	{
		this.SendPropertyChanging();
		entity.Warehouse = this;
	}
	
	private void detach_WarehouseDivisions(WarehouseDivision entity)
	{
		this.SendPropertyChanging();
		entity.Warehouse = null;
	}
	
	private void attach_WarehouseKeepers(WarehouseKeeper entity)
	{
		this.SendPropertyChanging();
		entity.Warehouse = this;
	}
	
	private void detach_WarehouseKeepers(WarehouseKeeper entity)
	{
		this.SendPropertyChanging();
		entity.Warehouse = null;
	}
}

[Table(Name="dbo.WarehouseDivision")]
public partial class WarehouseDivision : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private System.Guid _ID;
	
	private string _Code;
	
	private string _Location;
	
	private string _Note;
	
	private System.Nullable<System.Guid> _WarehouseID;
	
	private EntityRef<Warehouse> _Warehouse;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(System.Guid value);
    partial void OnIDChanged();
    partial void OnCodeChanging(string value);
    partial void OnCodeChanged();
    partial void OnLocationChanging(string value);
    partial void OnLocationChanged();
    partial void OnNoteChanging(string value);
    partial void OnNoteChanged();
    partial void OnWarehouseIDChanging(System.Nullable<System.Guid> value);
    partial void OnWarehouseIDChanged();
    #endregion
	
	public WarehouseDivision()
	{
		this._Warehouse = default(EntityRef<Warehouse>);
		OnCreated();
	}
	
	[Column(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true, IsDbGenerated=true)]
	public System.Guid ID
	{
		get
		{
			return this._ID;
		}
		set
		{
			if ((this._ID != value))
			{
				this.OnIDChanging(value);
				this.SendPropertyChanging();
				this._ID = value;
				this.SendPropertyChanged("ID");
				this.OnIDChanged();
			}
		}
	}
	
	[Column(Storage="_Code", DbType="NVarChar(MAX)")]
	public string Code
	{
		get
		{
			return this._Code;
		}
		set
		{
			if ((this._Code != value))
			{
				this.OnCodeChanging(value);
				this.SendPropertyChanging();
				this._Code = value;
				this.SendPropertyChanged("Code");
				this.OnCodeChanged();
			}
		}
	}
	
	[Column(Storage="_Location", DbType="NVarChar(MAX)")]
	public string Location
	{
		get
		{
			return this._Location;
		}
		set
		{
			if ((this._Location != value))
			{
				this.OnLocationChanging(value);
				this.SendPropertyChanging();
				this._Location = value;
				this.SendPropertyChanged("Location");
				this.OnLocationChanged();
			}
		}
	}
	
	[Column(Storage="_Note", DbType="NVarChar(MAX)")]
	public string Note
	{
		get
		{
			return this._Note;
		}
		set
		{
			if ((this._Note != value))
			{
				this.OnNoteChanging(value);
				this.SendPropertyChanging();
				this._Note = value;
				this.SendPropertyChanged("Note");
				this.OnNoteChanged();
			}
		}
	}
	
	[Column(Storage="_WarehouseID", DbType="UniqueIdentifier")]
	public System.Nullable<System.Guid> WarehouseID
	{
		get
		{
			return this._WarehouseID;
		}
		set
		{
			if ((this._WarehouseID != value))
			{
				if (this._Warehouse.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnWarehouseIDChanging(value);
				this.SendPropertyChanging();
				this._WarehouseID = value;
				this.SendPropertyChanged("WarehouseID");
				this.OnWarehouseIDChanged();
			}
		}
	}
	
	[Association(Name="Warehouse_WarehouseDivision", Storage="_Warehouse", ThisKey="WarehouseID", OtherKey="ID", IsForeignKey=true)]
	public Warehouse Warehouse
	{
		get
		{
			return this._Warehouse.Entity;
		}
		set
		{
			Warehouse previousValue = this._Warehouse.Entity;
			if (((previousValue != value) 
						|| (this._Warehouse.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Warehouse.Entity = null;
					previousValue.WarehouseDivisions.Remove(this);
				}
				this._Warehouse.Entity = value;
				if ((value != null))
				{
					value.WarehouseDivisions.Add(this);
					this._WarehouseID = value.ID;
				}
				else
				{
					this._WarehouseID = default(Nullable<System.Guid>);
				}
				this.SendPropertyChanged("Warehouse");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}

[Table(Name="dbo.WarehouseKeeper")]
public partial class WarehouseKeeper : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private System.Guid _ID;
	
	private string _FullName;
	
	private string _Phone;
	
	private string _Email;
	
	private System.Nullable<System.Guid> _WarehouseID;
	
	private EntityRef<Warehouse> _Warehouse;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(System.Guid value);
    partial void OnIDChanged();
    partial void OnFullNameChanging(string value);
    partial void OnFullNameChanged();
    partial void OnPhoneChanging(string value);
    partial void OnPhoneChanged();
    partial void OnEmailChanging(string value);
    partial void OnEmailChanged();
    partial void OnWarehouseIDChanging(System.Nullable<System.Guid> value);
    partial void OnWarehouseIDChanged();
    #endregion
	
	public WarehouseKeeper()
	{
		this._Warehouse = default(EntityRef<Warehouse>);
		OnCreated();
	}
	
	[Column(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true, IsDbGenerated=true)]
	public System.Guid ID
	{
		get
		{
			return this._ID;
		}
		set
		{
			if ((this._ID != value))
			{
				this.OnIDChanging(value);
				this.SendPropertyChanging();
				this._ID = value;
				this.SendPropertyChanged("ID");
				this.OnIDChanged();
			}
		}
	}
	
	[Column(Storage="_FullName", DbType="NVarChar(MAX)")]
	public string FullName
	{
		get
		{
			return this._FullName;
		}
		set
		{
			if ((this._FullName != value))
			{
				this.OnFullNameChanging(value);
				this.SendPropertyChanging();
				this._FullName = value;
				this.SendPropertyChanged("FullName");
				this.OnFullNameChanged();
			}
		}
	}
	
	[Column(Storage="_Phone", DbType="NVarChar(MAX)")]
	public string Phone
	{
		get
		{
			return this._Phone;
		}
		set
		{
			if ((this._Phone != value))
			{
				this.OnPhoneChanging(value);
				this.SendPropertyChanging();
				this._Phone = value;
				this.SendPropertyChanged("Phone");
				this.OnPhoneChanged();
			}
		}
	}
	
	[Column(Storage="_Email", DbType="NVarChar(MAX)")]
	public string Email
	{
		get
		{
			return this._Email;
		}
		set
		{
			if ((this._Email != value))
			{
				this.OnEmailChanging(value);
				this.SendPropertyChanging();
				this._Email = value;
				this.SendPropertyChanged("Email");
				this.OnEmailChanged();
			}
		}
	}
	
	[Column(Storage="_WarehouseID", DbType="UniqueIdentifier")]
	public System.Nullable<System.Guid> WarehouseID
	{
		get
		{
			return this._WarehouseID;
		}
		set
		{
			if ((this._WarehouseID != value))
			{
				if (this._Warehouse.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnWarehouseIDChanging(value);
				this.SendPropertyChanging();
				this._WarehouseID = value;
				this.SendPropertyChanged("WarehouseID");
				this.OnWarehouseIDChanged();
			}
		}
	}
	
	[Association(Name="Warehouse_WarehouseKeeper", Storage="_Warehouse", ThisKey="WarehouseID", OtherKey="ID", IsForeignKey=true)]
	public Warehouse Warehouse
	{
		get
		{
			return this._Warehouse.Entity;
		}
		set
		{
			Warehouse previousValue = this._Warehouse.Entity;
			if (((previousValue != value) 
						|| (this._Warehouse.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Warehouse.Entity = null;
					previousValue.WarehouseKeepers.Remove(this);
				}
				this._Warehouse.Entity = value;
				if ((value != null))
				{
					value.WarehouseKeepers.Add(this);
					this._WarehouseID = value.ID;
				}
				else
				{
					this._WarehouseID = default(Nullable<System.Guid>);
				}
				this.SendPropertyChanged("Warehouse");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}

[Table(Name="dbo.Cat")]
public partial class Cat : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private System.Guid _ID;
	
	private string _Name;
	
	private System.Nullable<System.Guid> _ParentID;
	
	private System.Nullable<int> _Level;
	
	private EntitySet<Cat> _Cats;
	
	private EntitySet<ItemCat> _ItemCats1;
	
	private EntitySet<ItemCat> _ItemCats2;
	
	private EntitySet<ItemCat> _ItemCats3;
	
	private EntitySet<ItemCat> _ItemCats4;
	
	private EntitySet<ItemCat> _ItemCats5;
	
	private EntityRef<Cat> _Cat1;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(System.Guid value);
    partial void OnIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnParentIDChanging(System.Nullable<System.Guid> value);
    partial void OnParentIDChanged();
    partial void OnLevelChanging(System.Nullable<int> value);
    partial void OnLevelChanged();
    #endregion
	
	public Cat()
	{
		this._Cats = new EntitySet<Cat>(new Action<Cat>(this.attach_Cats), new Action<Cat>(this.detach_Cats));
		this._ItemCats1 = new EntitySet<ItemCat>(new Action<ItemCat>(this.attach_ItemCats1), new Action<ItemCat>(this.detach_ItemCats1));
		this._ItemCats2 = new EntitySet<ItemCat>(new Action<ItemCat>(this.attach_ItemCats2), new Action<ItemCat>(this.detach_ItemCats2));
		this._ItemCats3 = new EntitySet<ItemCat>(new Action<ItemCat>(this.attach_ItemCats3), new Action<ItemCat>(this.detach_ItemCats3));
		this._ItemCats4 = new EntitySet<ItemCat>(new Action<ItemCat>(this.attach_ItemCats4), new Action<ItemCat>(this.detach_ItemCats4));
		this._ItemCats5 = new EntitySet<ItemCat>(new Action<ItemCat>(this.attach_ItemCats5), new Action<ItemCat>(this.detach_ItemCats5));
		this._Cat1 = default(EntityRef<Cat>);
		OnCreated();
	}
	
	[Column(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true, IsDbGenerated=true)]
	public System.Guid ID
	{
		get
		{
			return this._ID;
		}
		set
		{
			if ((this._ID != value))
			{
				this.OnIDChanging(value);
				this.SendPropertyChanging();
				this._ID = value;
				this.SendPropertyChanged("ID");
				this.OnIDChanged();
			}
		}
	}
	
	[Column(Storage="_Name", DbType="NVarChar(MAX)")]
	public string Name
	{
		get
		{
			return this._Name;
		}
		set
		{
			if ((this._Name != value))
			{
				this.OnNameChanging(value);
				this.SendPropertyChanging();
				this._Name = value;
				this.SendPropertyChanged("Name");
				this.OnNameChanged();
			}
		}
	}
	
	[Column(Storage="_ParentID", DbType="UniqueIdentifier")]
	public System.Nullable<System.Guid> ParentID
	{
		get
		{
			return this._ParentID;
		}
		set
		{
			if ((this._ParentID != value))
			{
				if (this._Cat1.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnParentIDChanging(value);
				this.SendPropertyChanging();
				this._ParentID = value;
				this.SendPropertyChanged("ParentID");
				this.OnParentIDChanged();
			}
		}
	}
	
	[Column(Name="[Level]", Storage="_Level", DbType="Int")]
	public System.Nullable<int> Level
	{
		get
		{
			return this._Level;
		}
		set
		{
			if ((this._Level != value))
			{
				this.OnLevelChanging(value);
				this.SendPropertyChanging();
				this._Level = value;
				this.SendPropertyChanged("Level");
				this.OnLevelChanged();
			}
		}
	}
	
	[Association(Name="Cat_Cat", Storage="_Cats", ThisKey="ID", OtherKey="ParentID")]
	public EntitySet<Cat> Cats
	{
		get
		{
			return this._Cats;
		}
		set
		{
			this._Cats.Assign(value);
		}
	}
	
	[Association(Name="Cat_ItemCat", Storage="_ItemCats1", ThisKey="ID", OtherKey="CatID1")]
	public EntitySet<ItemCat> ItemCats1
	{
		get
		{
			return this._ItemCats1;
		}
		set
		{
			this._ItemCats1.Assign(value);
		}
	}
	
	[Association(Name="Cat_ItemCat1", Storage="_ItemCats2", ThisKey="ID", OtherKey="CatID2")]
	public EntitySet<ItemCat> ItemCats2
	{
		get
		{
			return this._ItemCats2;
		}
		set
		{
			this._ItemCats2.Assign(value);
		}
	}
	
	[Association(Name="Cat_ItemCat2", Storage="_ItemCats3", ThisKey="ID", OtherKey="CatID3")]
	public EntitySet<ItemCat> ItemCats3
	{
		get
		{
			return this._ItemCats3;
		}
		set
		{
			this._ItemCats3.Assign(value);
		}
	}
	
	[Association(Name="Cat_ItemCat3", Storage="_ItemCats4", ThisKey="ID", OtherKey="CatID4")]
	public EntitySet<ItemCat> ItemCats4
	{
		get
		{
			return this._ItemCats4;
		}
		set
		{
			this._ItemCats4.Assign(value);
		}
	}
	
	[Association(Name="Cat_ItemCat4", Storage="_ItemCats5", ThisKey="ID", OtherKey="CatID5")]
	public EntitySet<ItemCat> ItemCats5
	{
		get
		{
			return this._ItemCats5;
		}
		set
		{
			this._ItemCats5.Assign(value);
		}
	}
	
	[Association(Name="Cat_Cat", Storage="_Cat1", ThisKey="ParentID", OtherKey="ID", IsForeignKey=true)]
	public Cat Cat1
	{
		get
		{
			return this._Cat1.Entity;
		}
		set
		{
			Cat previousValue = this._Cat1.Entity;
			if (((previousValue != value) 
						|| (this._Cat1.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Cat1.Entity = null;
					previousValue.Cats.Remove(this);
				}
				this._Cat1.Entity = value;
				if ((value != null))
				{
					value.Cats.Add(this);
					this._ParentID = value.ID;
				}
				else
				{
					this._ParentID = default(Nullable<System.Guid>);
				}
				this.SendPropertyChanged("Cat1");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_Cats(Cat entity)
	{
		this.SendPropertyChanging();
		entity.Cat1 = this;
	}
	
	private void detach_Cats(Cat entity)
	{
		this.SendPropertyChanging();
		entity.Cat1 = null;
	}
	
	private void attach_ItemCats1(ItemCat entity)
	{
		this.SendPropertyChanging();
		entity.Cat1 = this;
	}
	
	private void detach_ItemCats1(ItemCat entity)
	{
		this.SendPropertyChanging();
		entity.Cat1 = null;
	}
	
	private void attach_ItemCats2(ItemCat entity)
	{
		this.SendPropertyChanging();
		entity.Cat2 = this;
	}
	
	private void detach_ItemCats2(ItemCat entity)
	{
		this.SendPropertyChanging();
		entity.Cat2 = null;
	}
	
	private void attach_ItemCats3(ItemCat entity)
	{
		this.SendPropertyChanging();
		entity.Cat3 = this;
	}
	
	private void detach_ItemCats3(ItemCat entity)
	{
		this.SendPropertyChanging();
		entity.Cat3 = null;
	}
	
	private void attach_ItemCats4(ItemCat entity)
	{
		this.SendPropertyChanging();
		entity.Cat4 = this;
	}
	
	private void detach_ItemCats4(ItemCat entity)
	{
		this.SendPropertyChanging();
		entity.Cat4 = null;
	}
	
	private void attach_ItemCats5(ItemCat entity)
	{
		this.SendPropertyChanging();
		entity.Cat5 = this;
	}
	
	private void detach_ItemCats5(ItemCat entity)
	{
		this.SendPropertyChanging();
		entity.Cat5 = null;
	}
}

[Table(Name="dbo.Furniture")]
public partial class Furniture : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private System.Guid _ID;
	
	private System.Nullable<System.Guid> _CompanyID;
	
	private string _Name;
	
	private string _Code;
	
	private string _SerialNumber;
	
	private string _BarCode;
	
	private string _Dimension;
	
	private string _Color;
	
	private string _Material;
	
	private string _Unit1Name;
	
	private string _Unit2Name;
	
	private string _Unit3name;
	
	private System.Nullable<int> _Unit12Factor;
	
	private System.Nullable<int> _Unit23Factor;
	
	private EntitySet<ItemImg> _FurImgs;
	
	private EntitySet<ItemCat> _FurCats;
	
	private EntityRef<Company> _Company;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(System.Guid value);
    partial void OnIDChanged();
    partial void OnCompanyIDChanging(System.Nullable<System.Guid> value);
    partial void OnCompanyIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnCodeChanging(string value);
    partial void OnCodeChanged();
    partial void OnSerialNumberChanging(string value);
    partial void OnSerialNumberChanged();
    partial void OnBarCodeChanging(string value);
    partial void OnBarCodeChanged();
    partial void OnDimensionChanging(string value);
    partial void OnDimensionChanged();
    partial void OnColorChanging(string value);
    partial void OnColorChanged();
    partial void OnMaterialChanging(string value);
    partial void OnMaterialChanged();
    partial void OnUnit1NameChanging(string value);
    partial void OnUnit1NameChanged();
    partial void OnUnit2NameChanging(string value);
    partial void OnUnit2NameChanged();
    partial void OnUnit3NameChanging(string value);
    partial void OnUnit3NameChanged();
    partial void OnUnit12FactorChanging(System.Nullable<int> value);
    partial void OnUnit12FactorChanged();
    partial void OnUnit23FactorChanging(System.Nullable<int> value);
    partial void OnUnit23FactorChanged();
    #endregion
	
	public Furniture()
	{
		this._FurImgs = new EntitySet<ItemImg>(new Action<ItemImg>(this.attach_FurImgs), new Action<ItemImg>(this.detach_FurImgs));
		this._FurCats = new EntitySet<ItemCat>(new Action<ItemCat>(this.attach_FurCats), new Action<ItemCat>(this.detach_FurCats));
		this._Company = default(EntityRef<Company>);
		OnCreated();
	}
	
	[Column(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true, IsDbGenerated=true)]
	public System.Guid ID
	{
		get
		{
			return this._ID;
		}
		set
		{
			if ((this._ID != value))
			{
				this.OnIDChanging(value);
				this.SendPropertyChanging();
				this._ID = value;
				this.SendPropertyChanged("ID");
				this.OnIDChanged();
			}
		}
	}
	
	[Column(Storage="_CompanyID", DbType="UniqueIdentifier")]
	public System.Nullable<System.Guid> CompanyID
	{
		get
		{
			return this._CompanyID;
		}
		set
		{
			if ((this._CompanyID != value))
			{
				if (this._Company.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnCompanyIDChanging(value);
				this.SendPropertyChanging();
				this._CompanyID = value;
				this.SendPropertyChanged("CompanyID");
				this.OnCompanyIDChanged();
			}
		}
	}
	
	[Column(Storage="_Name", DbType="NVarChar(MAX)")]
	public string Name
	{
		get
		{
			return this._Name;
		}
		set
		{
			if ((this._Name != value))
			{
				this.OnNameChanging(value);
				this.SendPropertyChanging();
				this._Name = value;
				this.SendPropertyChanged("Name");
				this.OnNameChanged();
			}
		}
	}
	
	[Column(Storage="_Code", DbType="NVarChar(MAX)")]
	public string Code
	{
		get
		{
			return this._Code;
		}
		set
		{
			if ((this._Code != value))
			{
				this.OnCodeChanging(value);
				this.SendPropertyChanging();
				this._Code = value;
				this.SendPropertyChanged("Code");
				this.OnCodeChanged();
			}
		}
	}
	
	[Column(Storage="_SerialNumber", DbType="NVarChar(MAX)")]
	public string SerialNumber
	{
		get
		{
			return this._SerialNumber;
		}
		set
		{
			if ((this._SerialNumber != value))
			{
				this.OnSerialNumberChanging(value);
				this.SendPropertyChanging();
				this._SerialNumber = value;
				this.SendPropertyChanged("SerialNumber");
				this.OnSerialNumberChanged();
			}
		}
	}
	
	[Column(Storage="_BarCode", DbType="NVarChar(MAX)")]
	public string BarCode
	{
		get
		{
			return this._BarCode;
		}
		set
		{
			if ((this._BarCode != value))
			{
				this.OnBarCodeChanging(value);
				this.SendPropertyChanging();
				this._BarCode = value;
				this.SendPropertyChanged("BarCode");
				this.OnBarCodeChanged();
			}
		}
	}
	
	[Column(Storage="_Dimension", DbType="NVarChar(MAX)")]
	public string Dimension
	{
		get
		{
			return this._Dimension;
		}
		set
		{
			if ((this._Dimension != value))
			{
				this.OnDimensionChanging(value);
				this.SendPropertyChanging();
				this._Dimension = value;
				this.SendPropertyChanged("Dimension");
				this.OnDimensionChanged();
			}
		}
	}
	
	[Column(Storage="_Color", DbType="NVarChar(MAX)")]
	public string Color
	{
		get
		{
			return this._Color;
		}
		set
		{
			if ((this._Color != value))
			{
				this.OnColorChanging(value);
				this.SendPropertyChanging();
				this._Color = value;
				this.SendPropertyChanged("Color");
				this.OnColorChanged();
			}
		}
	}
	
	[Column(Storage="_Material", DbType="NVarChar(MAX)")]
	public string Material
	{
		get
		{
			return this._Material;
		}
		set
		{
			if ((this._Material != value))
			{
				this.OnMaterialChanging(value);
				this.SendPropertyChanging();
				this._Material = value;
				this.SendPropertyChanged("Material");
				this.OnMaterialChanged();
			}
		}
	}
	
	[Column(Storage="_Unit1Name", DbType="NVarChar(MAX)")]
	public string Unit1Name
	{
		get
		{
			return this._Unit1Name;
		}
		set
		{
			if ((this._Unit1Name != value))
			{
				this.OnUnit1NameChanging(value);
				this.SendPropertyChanging();
				this._Unit1Name = value;
				this.SendPropertyChanged("Unit1Name");
				this.OnUnit1NameChanged();
			}
		}
	}
	
	[Column(Storage="_Unit2Name", DbType="NVarChar(MAX)")]
	public string Unit2Name
	{
		get
		{
			return this._Unit2Name;
		}
		set
		{
			if ((this._Unit2Name != value))
			{
				this.OnUnit2NameChanging(value);
				this.SendPropertyChanging();
				this._Unit2Name = value;
				this.SendPropertyChanged("Unit2Name");
				this.OnUnit2NameChanged();
			}
		}
	}
	
	[Column(Storage="_Unit3name", DbType="NVarChar(MAX)")]
	public string Unit3Name
	{
		get
		{
			return this._Unit3name;
		}
		set
		{
			if ((this._Unit3name != value))
			{
				this.OnUnit3NameChanging(value);
				this.SendPropertyChanging();
				this._Unit3name = value;
				this.SendPropertyChanged("Unit3Name");
				this.OnUnit3NameChanged();
			}
		}
	}
	
	[Column(Storage="_Unit12Factor", DbType="Int")]
	public System.Nullable<int> Unit12Factor
	{
		get
		{
			return this._Unit12Factor;
		}
		set
		{
			if ((this._Unit12Factor != value))
			{
				this.OnUnit12FactorChanging(value);
				this.SendPropertyChanging();
				this._Unit12Factor = value;
				this.SendPropertyChanged("Unit12Factor");
				this.OnUnit12FactorChanged();
			}
		}
	}
	
	[Column(Storage="_Unit23Factor", DbType="Int")]
	public System.Nullable<int> Unit23Factor
	{
		get
		{
			return this._Unit23Factor;
		}
		set
		{
			if ((this._Unit23Factor != value))
			{
				this.OnUnit23FactorChanging(value);
				this.SendPropertyChanging();
				this._Unit23Factor = value;
				this.SendPropertyChanged("Unit23Factor");
				this.OnUnit23FactorChanged();
			}
		}
	}
	
	[Association(Name="Furniture_ItemImg", Storage="_FurImgs", ThisKey="ID", OtherKey="ItemID")]
	public EntitySet<ItemImg> FurImgs
	{
		get
		{
			return this._FurImgs;
		}
		set
		{
			this._FurImgs.Assign(value);
		}
	}
	
	[Association(Name="Furniture_ItemCat", Storage="_FurCats", ThisKey="ID", OtherKey="ItemID")]
	public EntitySet<ItemCat> FurCats
	{
		get
		{
			return this._FurCats;
		}
		set
		{
			this._FurCats.Assign(value);
		}
	}
	
	[Association(Name="Company_Furniture", Storage="_Company", ThisKey="CompanyID", OtherKey="ID", IsForeignKey=true)]
	public Company Company
	{
		get
		{
			return this._Company.Entity;
		}
		set
		{
			Company previousValue = this._Company.Entity;
			if (((previousValue != value) 
						|| (this._Company.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Company.Entity = null;
					previousValue.Furnitures.Remove(this);
				}
				this._Company.Entity = value;
				if ((value != null))
				{
					value.Furnitures.Add(this);
					this._CompanyID = value.ID;
				}
				else
				{
					this._CompanyID = default(Nullable<System.Guid>);
				}
				this.SendPropertyChanged("Company");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_FurImgs(ItemImg entity)
	{
		this.SendPropertyChanging();
		entity.Furniture = this;
	}
	
	private void detach_FurImgs(ItemImg entity)
	{
		this.SendPropertyChanging();
		entity.Furniture = null;
	}
	
	private void attach_FurCats(ItemCat entity)
	{
		this.SendPropertyChanging();
		entity.Furniture = this;
	}
	
	private void detach_FurCats(ItemCat entity)
	{
		this.SendPropertyChanging();
		entity.Furniture = null;
	}
}

[Table(Name="dbo.ItemImg")]
public partial class ItemImg : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private System.Guid _ID;
	
	private System.Nullable<System.Guid> _ItemID;
	
	private string _FileName;
	
	private string _TableName;
	
	private EntityRef<Furniture> _Furniture;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(System.Guid value);
    partial void OnIDChanged();
    partial void OnItemIDChanging(System.Nullable<System.Guid> value);
    partial void OnItemIDChanged();
    partial void OnFileNameChanging(string value);
    partial void OnFileNameChanged();
    partial void OnTableNameChanging(string value);
    partial void OnTableNameChanged();
    #endregion
	
	public ItemImg()
	{
		this._Furniture = default(EntityRef<Furniture>);
		OnCreated();
	}
	
	[Column(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true, IsDbGenerated=true)]
	public System.Guid ID
	{
		get
		{
			return this._ID;
		}
		set
		{
			if ((this._ID != value))
			{
				this.OnIDChanging(value);
				this.SendPropertyChanging();
				this._ID = value;
				this.SendPropertyChanged("ID");
				this.OnIDChanged();
			}
		}
	}
	
	[Column(Storage="_ItemID", DbType="UniqueIdentifier")]
	public System.Nullable<System.Guid> ItemID
	{
		get
		{
			return this._ItemID;
		}
		set
		{
			if ((this._ItemID != value))
			{
				if (this._Furniture.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnItemIDChanging(value);
				this.SendPropertyChanging();
				this._ItemID = value;
				this.SendPropertyChanged("ItemID");
				this.OnItemIDChanged();
			}
		}
	}
	
	[Column(Storage="_FileName", DbType="NVarChar(MAX)")]
	public string FileName
	{
		get
		{
			return this._FileName;
		}
		set
		{
			if ((this._FileName != value))
			{
				this.OnFileNameChanging(value);
				this.SendPropertyChanging();
				this._FileName = value;
				this.SendPropertyChanged("FileName");
				this.OnFileNameChanged();
			}
		}
	}
	
	[Column(Storage="_TableName", DbType="NVarChar(MAX)")]
	public string TableName
	{
		get
		{
			return this._TableName;
		}
		set
		{
			if ((this._TableName != value))
			{
				this.OnTableNameChanging(value);
				this.SendPropertyChanging();
				this._TableName = value;
				this.SendPropertyChanged("TableName");
				this.OnTableNameChanged();
			}
		}
	}
	
	[Association(Name="Furniture_ItemImg", Storage="_Furniture", ThisKey="ItemID", OtherKey="ID", IsForeignKey=true)]
	public Furniture Furniture
	{
		get
		{
			return this._Furniture.Entity;
		}
		set
		{
			Furniture previousValue = this._Furniture.Entity;
			if (((previousValue != value) 
						|| (this._Furniture.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Furniture.Entity = null;
					previousValue.FurImgs.Remove(this);
				}
				this._Furniture.Entity = value;
				if ((value != null))
				{
					value.FurImgs.Add(this);
					this._ItemID = value.ID;
				}
				else
				{
					this._ItemID = default(Nullable<System.Guid>);
				}
				this.SendPropertyChanged("Furniture");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}

[Table(Name="dbo.ItemCat")]
public partial class ItemCat : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private System.Guid _ID;
	
	private System.Nullable<System.Guid> _ItemID;
	
	private System.Nullable<System.Guid> _CatID1;
	
	private System.Nullable<System.Guid> _CatID2;
	
	private System.Nullable<System.Guid> _CatID3;
	
	private System.Nullable<System.Guid> _CatID4;
	
	private System.Nullable<System.Guid> _CatID5;
	
	private string _TableName;
	
	private EntityRef<Furniture> _Furniture;
	
	private EntityRef<Cat> _Cat1;
	
	private EntityRef<Cat> _Cat2;
	
	private EntityRef<Cat> _Cat3;
	
	private EntityRef<Cat> _Cat4;
	
	private EntityRef<Cat> _Cat5;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(System.Guid value);
    partial void OnIDChanged();
    partial void OnItemIDChanging(System.Nullable<System.Guid> value);
    partial void OnItemIDChanged();
    partial void OnCatID1Changing(System.Nullable<System.Guid> value);
    partial void OnCatID1Changed();
    partial void OnCatID2Changing(System.Nullable<System.Guid> value);
    partial void OnCatID2Changed();
    partial void OnCatID3Changing(System.Nullable<System.Guid> value);
    partial void OnCatID3Changed();
    partial void OnCatID4Changing(System.Nullable<System.Guid> value);
    partial void OnCatID4Changed();
    partial void OnCatID5Changing(System.Nullable<System.Guid> value);
    partial void OnCatID5Changed();
    partial void OnTableNameChanging(string value);
    partial void OnTableNameChanged();
    #endregion
	
	public ItemCat()
	{
		this._Furniture = default(EntityRef<Furniture>);
		this._Cat1 = default(EntityRef<Cat>);
		this._Cat2 = default(EntityRef<Cat>);
		this._Cat3 = default(EntityRef<Cat>);
		this._Cat4 = default(EntityRef<Cat>);
		this._Cat5 = default(EntityRef<Cat>);
		OnCreated();
	}
	
	[Column(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true, IsDbGenerated=true)]
	public System.Guid ID
	{
		get
		{
			return this._ID;
		}
		set
		{
			if ((this._ID != value))
			{
				this.OnIDChanging(value);
				this.SendPropertyChanging();
				this._ID = value;
				this.SendPropertyChanged("ID");
				this.OnIDChanged();
			}
		}
	}
	
	[Column(Storage="_ItemID", DbType="UniqueIdentifier")]
	public System.Nullable<System.Guid> ItemID
	{
		get
		{
			return this._ItemID;
		}
		set
		{
			if ((this._ItemID != value))
			{
				if (this._Furniture.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnItemIDChanging(value);
				this.SendPropertyChanging();
				this._ItemID = value;
				this.SendPropertyChanged("ItemID");
				this.OnItemIDChanged();
			}
		}
	}
	
	[Column(Storage="_CatID1", DbType="UniqueIdentifier")]
	public System.Nullable<System.Guid> CatID1
	{
		get
		{
			return this._CatID1;
		}
		set
		{
			if ((this._CatID1 != value))
			{
				if (this._Cat1.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnCatID1Changing(value);
				this.SendPropertyChanging();
				this._CatID1 = value;
				this.SendPropertyChanged("CatID1");
				this.OnCatID1Changed();
			}
		}
	}
	
	[Column(Storage="_CatID2", DbType="UniqueIdentifier")]
	public System.Nullable<System.Guid> CatID2
	{
		get
		{
			return this._CatID2;
		}
		set
		{
			if ((this._CatID2 != value))
			{
				if (this._Cat2.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnCatID2Changing(value);
				this.SendPropertyChanging();
				this._CatID2 = value;
				this.SendPropertyChanged("CatID2");
				this.OnCatID2Changed();
			}
		}
	}
	
	[Column(Storage="_CatID3", DbType="UniqueIdentifier")]
	public System.Nullable<System.Guid> CatID3
	{
		get
		{
			return this._CatID3;
		}
		set
		{
			if ((this._CatID3 != value))
			{
				if (this._Cat3.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnCatID3Changing(value);
				this.SendPropertyChanging();
				this._CatID3 = value;
				this.SendPropertyChanged("CatID3");
				this.OnCatID3Changed();
			}
		}
	}
	
	[Column(Storage="_CatID4", DbType="UniqueIdentifier")]
	public System.Nullable<System.Guid> CatID4
	{
		get
		{
			return this._CatID4;
		}
		set
		{
			if ((this._CatID4 != value))
			{
				if (this._Cat4.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnCatID4Changing(value);
				this.SendPropertyChanging();
				this._CatID4 = value;
				this.SendPropertyChanged("CatID4");
				this.OnCatID4Changed();
			}
		}
	}
	
	[Column(Storage="_CatID5", DbType="UniqueIdentifier")]
	public System.Nullable<System.Guid> CatID5
	{
		get
		{
			return this._CatID5;
		}
		set
		{
			if ((this._CatID5 != value))
			{
				if (this._Cat5.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnCatID5Changing(value);
				this.SendPropertyChanging();
				this._CatID5 = value;
				this.SendPropertyChanged("CatID5");
				this.OnCatID5Changed();
			}
		}
	}
	
	[Column(Storage="_TableName", DbType="NVarChar(MAX)")]
	public string TableName
	{
		get
		{
			return this._TableName;
		}
		set
		{
			if ((this._TableName != value))
			{
				this.OnTableNameChanging(value);
				this.SendPropertyChanging();
				this._TableName = value;
				this.SendPropertyChanged("TableName");
				this.OnTableNameChanged();
			}
		}
	}
	
	[Association(Name="Furniture_ItemCat", Storage="_Furniture", ThisKey="ItemID", OtherKey="ID", IsForeignKey=true)]
	public Furniture Furniture
	{
		get
		{
			return this._Furniture.Entity;
		}
		set
		{
			Furniture previousValue = this._Furniture.Entity;
			if (((previousValue != value) 
						|| (this._Furniture.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Furniture.Entity = null;
					previousValue.FurCats.Remove(this);
				}
				this._Furniture.Entity = value;
				if ((value != null))
				{
					value.FurCats.Add(this);
					this._ItemID = value.ID;
				}
				else
				{
					this._ItemID = default(Nullable<System.Guid>);
				}
				this.SendPropertyChanged("Furniture");
			}
		}
	}
	
	[Association(Name="Cat_ItemCat", Storage="_Cat1", ThisKey="CatID1", OtherKey="ID", IsForeignKey=true)]
	public Cat Cat1
	{
		get
		{
			return this._Cat1.Entity;
		}
		set
		{
			Cat previousValue = this._Cat1.Entity;
			if (((previousValue != value) 
						|| (this._Cat1.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Cat1.Entity = null;
					previousValue.ItemCats1.Remove(this);
				}
				this._Cat1.Entity = value;
				if ((value != null))
				{
					value.ItemCats1.Add(this);
					this._CatID1 = value.ID;
				}
				else
				{
					this._CatID1 = default(Nullable<System.Guid>);
				}
				this.SendPropertyChanged("Cat1");
			}
		}
	}
	
	[Association(Name="Cat_ItemCat1", Storage="_Cat2", ThisKey="CatID2", OtherKey="ID", IsForeignKey=true)]
	public Cat Cat2
	{
		get
		{
			return this._Cat2.Entity;
		}
		set
		{
			Cat previousValue = this._Cat2.Entity;
			if (((previousValue != value) 
						|| (this._Cat2.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Cat2.Entity = null;
					previousValue.ItemCats2.Remove(this);
				}
				this._Cat2.Entity = value;
				if ((value != null))
				{
					value.ItemCats2.Add(this);
					this._CatID2 = value.ID;
				}
				else
				{
					this._CatID2 = default(Nullable<System.Guid>);
				}
				this.SendPropertyChanged("Cat2");
			}
		}
	}
	
	[Association(Name="Cat_ItemCat2", Storage="_Cat3", ThisKey="CatID3", OtherKey="ID", IsForeignKey=true)]
	public Cat Cat3
	{
		get
		{
			return this._Cat3.Entity;
		}
		set
		{
			Cat previousValue = this._Cat3.Entity;
			if (((previousValue != value) 
						|| (this._Cat3.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Cat3.Entity = null;
					previousValue.ItemCats3.Remove(this);
				}
				this._Cat3.Entity = value;
				if ((value != null))
				{
					value.ItemCats3.Add(this);
					this._CatID3 = value.ID;
				}
				else
				{
					this._CatID3 = default(Nullable<System.Guid>);
				}
				this.SendPropertyChanged("Cat3");
			}
		}
	}
	
	[Association(Name="Cat_ItemCat3", Storage="_Cat4", ThisKey="CatID4", OtherKey="ID", IsForeignKey=true)]
	public Cat Cat4
	{
		get
		{
			return this._Cat4.Entity;
		}
		set
		{
			Cat previousValue = this._Cat4.Entity;
			if (((previousValue != value) 
						|| (this._Cat4.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Cat4.Entity = null;
					previousValue.ItemCats4.Remove(this);
				}
				this._Cat4.Entity = value;
				if ((value != null))
				{
					value.ItemCats4.Add(this);
					this._CatID4 = value.ID;
				}
				else
				{
					this._CatID4 = default(Nullable<System.Guid>);
				}
				this.SendPropertyChanged("Cat4");
			}
		}
	}
	
	[Association(Name="Cat_ItemCat4", Storage="_Cat5", ThisKey="CatID5", OtherKey="ID", IsForeignKey=true)]
	public Cat Cat5
	{
		get
		{
			return this._Cat5.Entity;
		}
		set
		{
			Cat previousValue = this._Cat5.Entity;
			if (((previousValue != value) 
						|| (this._Cat5.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Cat5.Entity = null;
					previousValue.ItemCats5.Remove(this);
				}
				this._Cat5.Entity = value;
				if ((value != null))
				{
					value.ItemCats5.Add(this);
					this._CatID5 = value.ID;
				}
				else
				{
					this._CatID5 = default(Nullable<System.Guid>);
				}
				this.SendPropertyChanged("Cat5");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}

[Table(Name="dbo.Customer")]
public partial class Customer : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private System.Guid _ID;
	
	private string _Name;
	
	private string _Phone;
	
	private string _Fax;
	
	private string _Email;
	
	private string _Website;
	
	private string _TaxNo;
	
	private System.Nullable<System.Guid> _DefaultBankAccountID;
	
	private System.Nullable<System.Guid> _CompanyID;
	
	private string _BankAccountNumber;
	
	private string _BankName;
	
	private string _Address;
	
	private string _CMND;
	
	private System.Nullable<int> _RedBlood;
	
	private EntitySet<CustomerBankAccount> _CustomerBankAccounts;
	
	private EntitySet<CustomerLocation> _CustomerLocations;
	
	private EntitySet<CustomerPoint> _CustomerPoints;
	
	private EntityRef<Company> _Company;
	
	private EntityRef<CustomerBankAccount> _CustomerBankAccount;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(System.Guid value);
    partial void OnIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnPhoneChanging(string value);
    partial void OnPhoneChanged();
    partial void OnFaxChanging(string value);
    partial void OnFaxChanged();
    partial void OnEmailChanging(string value);
    partial void OnEmailChanged();
    partial void OnWebsiteChanging(string value);
    partial void OnWebsiteChanged();
    partial void OnTaxNoChanging(string value);
    partial void OnTaxNoChanged();
    partial void OnDefaultBankAccountIDChanging(System.Nullable<System.Guid> value);
    partial void OnDefaultBankAccountIDChanged();
    partial void OnCompanyIDChanging(System.Nullable<System.Guid> value);
    partial void OnCompanyIDChanged();
    partial void OnBankAccountNumberChanging(string value);
    partial void OnBankAccountNumberChanged();
    partial void OnBankNameChanging(string value);
    partial void OnBankNameChanged();
    partial void OnAddressChanging(string value);
    partial void OnAddressChanged();
    partial void OnCMNDChanging(string value);
    partial void OnCMNDChanged();
    partial void OnRedBloodChanging(System.Nullable<int> value);
    partial void OnRedBloodChanged();
    #endregion
	
	public Customer()
	{
		this._CustomerBankAccounts = new EntitySet<CustomerBankAccount>(new Action<CustomerBankAccount>(this.attach_CustomerBankAccounts), new Action<CustomerBankAccount>(this.detach_CustomerBankAccounts));
		this._CustomerLocations = new EntitySet<CustomerLocation>(new Action<CustomerLocation>(this.attach_CustomerLocations), new Action<CustomerLocation>(this.detach_CustomerLocations));
		this._CustomerPoints = new EntitySet<CustomerPoint>(new Action<CustomerPoint>(this.attach_CustomerPoints), new Action<CustomerPoint>(this.detach_CustomerPoints));
		this._Company = default(EntityRef<Company>);
		this._CustomerBankAccount = default(EntityRef<CustomerBankAccount>);
		OnCreated();
	}
	
	[Column(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true, IsDbGenerated=true)]
	public System.Guid ID
	{
		get
		{
			return this._ID;
		}
		set
		{
			if ((this._ID != value))
			{
				this.OnIDChanging(value);
				this.SendPropertyChanging();
				this._ID = value;
				this.SendPropertyChanged("ID");
				this.OnIDChanged();
			}
		}
	}
	
	[Column(Storage="_Name", DbType="NVarChar(MAX)")]
	public string Name
	{
		get
		{
			return this._Name;
		}
		set
		{
			if ((this._Name != value))
			{
				this.OnNameChanging(value);
				this.SendPropertyChanging();
				this._Name = value;
				this.SendPropertyChanged("Name");
				this.OnNameChanged();
			}
		}
	}
	
	[Column(Storage="_Phone", DbType="NVarChar(MAX)")]
	public string Phone
	{
		get
		{
			return this._Phone;
		}
		set
		{
			if ((this._Phone != value))
			{
				this.OnPhoneChanging(value);
				this.SendPropertyChanging();
				this._Phone = value;
				this.SendPropertyChanged("Phone");
				this.OnPhoneChanged();
			}
		}
	}
	
	[Column(Storage="_Fax", DbType="NVarChar(MAX)")]
	public string Fax
	{
		get
		{
			return this._Fax;
		}
		set
		{
			if ((this._Fax != value))
			{
				this.OnFaxChanging(value);
				this.SendPropertyChanging();
				this._Fax = value;
				this.SendPropertyChanged("Fax");
				this.OnFaxChanged();
			}
		}
	}
	
	[Column(Storage="_Email", DbType="NVarChar(MAX)")]
	public string Email
	{
		get
		{
			return this._Email;
		}
		set
		{
			if ((this._Email != value))
			{
				this.OnEmailChanging(value);
				this.SendPropertyChanging();
				this._Email = value;
				this.SendPropertyChanged("Email");
				this.OnEmailChanged();
			}
		}
	}
	
	[Column(Storage="_Website", DbType="NVarChar(MAX)")]
	public string Website
	{
		get
		{
			return this._Website;
		}
		set
		{
			if ((this._Website != value))
			{
				this.OnWebsiteChanging(value);
				this.SendPropertyChanging();
				this._Website = value;
				this.SendPropertyChanged("Website");
				this.OnWebsiteChanged();
			}
		}
	}
	
	[Column(Storage="_TaxNo", DbType="NVarChar(MAX)")]
	public string TaxNo
	{
		get
		{
			return this._TaxNo;
		}
		set
		{
			if ((this._TaxNo != value))
			{
				this.OnTaxNoChanging(value);
				this.SendPropertyChanging();
				this._TaxNo = value;
				this.SendPropertyChanged("TaxNo");
				this.OnTaxNoChanged();
			}
		}
	}
	
	[Column(Storage="_DefaultBankAccountID", DbType="UniqueIdentifier")]
	public System.Nullable<System.Guid> DefaultBankAccountID
	{
		get
		{
			return this._DefaultBankAccountID;
		}
		set
		{
			if ((this._DefaultBankAccountID != value))
			{
				if (this._CustomerBankAccount.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnDefaultBankAccountIDChanging(value);
				this.SendPropertyChanging();
				this._DefaultBankAccountID = value;
				this.SendPropertyChanged("DefaultBankAccountID");
				this.OnDefaultBankAccountIDChanged();
			}
		}
	}
	
	[Column(Storage="_CompanyID", DbType="UniqueIdentifier")]
	public System.Nullable<System.Guid> CompanyID
	{
		get
		{
			return this._CompanyID;
		}
		set
		{
			if ((this._CompanyID != value))
			{
				if (this._Company.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnCompanyIDChanging(value);
				this.SendPropertyChanging();
				this._CompanyID = value;
				this.SendPropertyChanged("CompanyID");
				this.OnCompanyIDChanged();
			}
		}
	}
	
	[Column(Storage="_BankAccountNumber", DbType="NVarChar(MAX)")]
	public string BankAccountNumber
	{
		get
		{
			return this._BankAccountNumber;
		}
		set
		{
			if ((this._BankAccountNumber != value))
			{
				this.OnBankAccountNumberChanging(value);
				this.SendPropertyChanging();
				this._BankAccountNumber = value;
				this.SendPropertyChanged("BankAccountNumber");
				this.OnBankAccountNumberChanged();
			}
		}
	}
	
	[Column(Storage="_BankName", DbType="NVarChar(MAX)")]
	public string BankName
	{
		get
		{
			return this._BankName;
		}
		set
		{
			if ((this._BankName != value))
			{
				this.OnBankNameChanging(value);
				this.SendPropertyChanging();
				this._BankName = value;
				this.SendPropertyChanged("BankName");
				this.OnBankNameChanged();
			}
		}
	}
	
	[Column(Storage="_Address", DbType="NVarChar(MAX)")]
	public string Address
	{
		get
		{
			return this._Address;
		}
		set
		{
			if ((this._Address != value))
			{
				this.OnAddressChanging(value);
				this.SendPropertyChanging();
				this._Address = value;
				this.SendPropertyChanged("Address");
				this.OnAddressChanged();
			}
		}
	}
	
	[Column(Storage="_CMND", DbType="NVarChar(MAX)")]
	public string CMND
	{
		get
		{
			return this._CMND;
		}
		set
		{
			if ((this._CMND != value))
			{
				this.OnCMNDChanging(value);
				this.SendPropertyChanging();
				this._CMND = value;
				this.SendPropertyChanged("CMND");
				this.OnCMNDChanged();
			}
		}
	}
	
	[Column(Storage="_RedBlood", DbType="Int")]
	public System.Nullable<int> RedBlood
	{
		get
		{
			return this._RedBlood;
		}
		set
		{
			if ((this._RedBlood != value))
			{
				this.OnRedBloodChanging(value);
				this.SendPropertyChanging();
				this._RedBlood = value;
				this.SendPropertyChanged("RedBlood");
				this.OnRedBloodChanged();
			}
		}
	}
	
	[Association(Name="Customer_CustomerBankAccount", Storage="_CustomerBankAccounts", ThisKey="ID", OtherKey="CustomerID")]
	public EntitySet<CustomerBankAccount> CustomerBankAccounts
	{
		get
		{
			return this._CustomerBankAccounts;
		}
		set
		{
			this._CustomerBankAccounts.Assign(value);
		}
	}
	
	[Association(Name="Customer_CustomerLocation", Storage="_CustomerLocations", ThisKey="ID", OtherKey="CustomerID")]
	public EntitySet<CustomerLocation> CustomerLocations
	{
		get
		{
			return this._CustomerLocations;
		}
		set
		{
			this._CustomerLocations.Assign(value);
		}
	}
	
	[Association(Name="Customer_CustomerPoint", Storage="_CustomerPoints", ThisKey="ID", OtherKey="CustomerID")]
	public EntitySet<CustomerPoint> CustomerPoints
	{
		get
		{
			return this._CustomerPoints;
		}
		set
		{
			this._CustomerPoints.Assign(value);
		}
	}
	
	[Association(Name="Company_Customer", Storage="_Company", ThisKey="CompanyID", OtherKey="ID", IsForeignKey=true)]
	public Company Company
	{
		get
		{
			return this._Company.Entity;
		}
		set
		{
			Company previousValue = this._Company.Entity;
			if (((previousValue != value) 
						|| (this._Company.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Company.Entity = null;
					previousValue.Customers.Remove(this);
				}
				this._Company.Entity = value;
				if ((value != null))
				{
					value.Customers.Add(this);
					this._CompanyID = value.ID;
				}
				else
				{
					this._CompanyID = default(Nullable<System.Guid>);
				}
				this.SendPropertyChanged("Company");
			}
		}
	}
	
	[Association(Name="CustomerBankAccount_Customer", Storage="_CustomerBankAccount", ThisKey="DefaultBankAccountID", OtherKey="ID", IsForeignKey=true)]
	public CustomerBankAccount CustomerBankAccount
	{
		get
		{
			return this._CustomerBankAccount.Entity;
		}
		set
		{
			CustomerBankAccount previousValue = this._CustomerBankAccount.Entity;
			if (((previousValue != value) 
						|| (this._CustomerBankAccount.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._CustomerBankAccount.Entity = null;
					previousValue.Customers.Remove(this);
				}
				this._CustomerBankAccount.Entity = value;
				if ((value != null))
				{
					value.Customers.Add(this);
					this._DefaultBankAccountID = value.ID;
				}
				else
				{
					this._DefaultBankAccountID = default(Nullable<System.Guid>);
				}
				this.SendPropertyChanged("CustomerBankAccount");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_CustomerBankAccounts(CustomerBankAccount entity)
	{
		this.SendPropertyChanging();
		entity.Customer = this;
	}
	
	private void detach_CustomerBankAccounts(CustomerBankAccount entity)
	{
		this.SendPropertyChanging();
		entity.Customer = null;
	}
	
	private void attach_CustomerLocations(CustomerLocation entity)
	{
		this.SendPropertyChanging();
		entity.Customer = this;
	}
	
	private void detach_CustomerLocations(CustomerLocation entity)
	{
		this.SendPropertyChanging();
		entity.Customer = null;
	}
	
	private void attach_CustomerPoints(CustomerPoint entity)
	{
		this.SendPropertyChanging();
		entity.Customer = this;
	}
	
	private void detach_CustomerPoints(CustomerPoint entity)
	{
		this.SendPropertyChanging();
		entity.Customer = null;
	}
}

[Table(Name="dbo.PointDef")]
public partial class PointDef : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private System.Guid _ID;
	
	private string _Name;
	
	private System.Nullable<System.Guid> _CompanyID;
	
	private System.Nullable<int> _Status;
	
	private EntitySet<CustomerPoint> _CustomerPoints;
	
	private EntityRef<Company> _Company;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(System.Guid value);
    partial void OnIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnCompanyIDChanging(System.Nullable<System.Guid> value);
    partial void OnCompanyIDChanged();
    partial void OnStatusChanging(System.Nullable<int> value);
    partial void OnStatusChanged();
    #endregion
	
	public PointDef()
	{
		this._CustomerPoints = new EntitySet<CustomerPoint>(new Action<CustomerPoint>(this.attach_CustomerPoints), new Action<CustomerPoint>(this.detach_CustomerPoints));
		this._Company = default(EntityRef<Company>);
		OnCreated();
	}
	
	[Column(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true, IsDbGenerated=true)]
	public System.Guid ID
	{
		get
		{
			return this._ID;
		}
		set
		{
			if ((this._ID != value))
			{
				this.OnIDChanging(value);
				this.SendPropertyChanging();
				this._ID = value;
				this.SendPropertyChanged("ID");
				this.OnIDChanged();
			}
		}
	}
	
	[Column(Storage="_Name", DbType="NVarChar(MAX)")]
	public string Name
	{
		get
		{
			return this._Name;
		}
		set
		{
			if ((this._Name != value))
			{
				this.OnNameChanging(value);
				this.SendPropertyChanging();
				this._Name = value;
				this.SendPropertyChanged("Name");
				this.OnNameChanged();
			}
		}
	}
	
	[Column(Storage="_CompanyID", DbType="UniqueIdentifier")]
	public System.Nullable<System.Guid> CompanyID
	{
		get
		{
			return this._CompanyID;
		}
		set
		{
			if ((this._CompanyID != value))
			{
				if (this._Company.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnCompanyIDChanging(value);
				this.SendPropertyChanging();
				this._CompanyID = value;
				this.SendPropertyChanged("CompanyID");
				this.OnCompanyIDChanged();
			}
		}
	}
	
	[Column(Storage="_Status", DbType="Int")]
	public System.Nullable<int> Status
	{
		get
		{
			return this._Status;
		}
		set
		{
			if ((this._Status != value))
			{
				this.OnStatusChanging(value);
				this.SendPropertyChanging();
				this._Status = value;
				this.SendPropertyChanged("Status");
				this.OnStatusChanged();
			}
		}
	}
	
	[Association(Name="PointDef_CustomerPoint", Storage="_CustomerPoints", ThisKey="ID", OtherKey="PointDefID")]
	public EntitySet<CustomerPoint> CustomerPoints
	{
		get
		{
			return this._CustomerPoints;
		}
		set
		{
			this._CustomerPoints.Assign(value);
		}
	}
	
	[Association(Name="Company_PointDef", Storage="_Company", ThisKey="CompanyID", OtherKey="ID", IsForeignKey=true)]
	public Company Company
	{
		get
		{
			return this._Company.Entity;
		}
		set
		{
			Company previousValue = this._Company.Entity;
			if (((previousValue != value) 
						|| (this._Company.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Company.Entity = null;
					previousValue.PointDefs.Remove(this);
				}
				this._Company.Entity = value;
				if ((value != null))
				{
					value.PointDefs.Add(this);
					this._CompanyID = value.ID;
				}
				else
				{
					this._CompanyID = default(Nullable<System.Guid>);
				}
				this.SendPropertyChanged("Company");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_CustomerPoints(CustomerPoint entity)
	{
		this.SendPropertyChanging();
		entity.PointDef = this;
	}
	
	private void detach_CustomerPoints(CustomerPoint entity)
	{
		this.SendPropertyChanging();
		entity.PointDef = null;
	}
}

[Table(Name="dbo.CustomerPoint")]
public partial class CustomerPoint : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private System.Guid _ID;
	
	private System.Nullable<System.Guid> _CustomerID;
	
	private System.Nullable<System.Guid> _PointDefID;
	
	private System.Nullable<int> _Point;
	
	private EntityRef<Customer> _Customer;
	
	private EntityRef<PointDef> _PointDef;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(System.Guid value);
    partial void OnIDChanged();
    partial void OnCustomerIDChanging(System.Nullable<System.Guid> value);
    partial void OnCustomerIDChanged();
    partial void OnPointDefIDChanging(System.Nullable<System.Guid> value);
    partial void OnPointDefIDChanged();
    partial void OnPointChanging(System.Nullable<int> value);
    partial void OnPointChanged();
    #endregion
	
	public CustomerPoint()
	{
		this._Customer = default(EntityRef<Customer>);
		this._PointDef = default(EntityRef<PointDef>);
		OnCreated();
	}
	
	[Column(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true, IsDbGenerated=true)]
	public System.Guid ID
	{
		get
		{
			return this._ID;
		}
		set
		{
			if ((this._ID != value))
			{
				this.OnIDChanging(value);
				this.SendPropertyChanging();
				this._ID = value;
				this.SendPropertyChanged("ID");
				this.OnIDChanged();
			}
		}
	}
	
	[Column(Storage="_CustomerID", DbType="UniqueIdentifier")]
	public System.Nullable<System.Guid> CustomerID
	{
		get
		{
			return this._CustomerID;
		}
		set
		{
			if ((this._CustomerID != value))
			{
				if (this._Customer.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnCustomerIDChanging(value);
				this.SendPropertyChanging();
				this._CustomerID = value;
				this.SendPropertyChanged("CustomerID");
				this.OnCustomerIDChanged();
			}
		}
	}
	
	[Column(Storage="_PointDefID", DbType="UniqueIdentifier")]
	public System.Nullable<System.Guid> PointDefID
	{
		get
		{
			return this._PointDefID;
		}
		set
		{
			if ((this._PointDefID != value))
			{
				if (this._PointDef.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnPointDefIDChanging(value);
				this.SendPropertyChanging();
				this._PointDefID = value;
				this.SendPropertyChanged("PointDefID");
				this.OnPointDefIDChanged();
			}
		}
	}
	
	[Column(Storage="_Point", DbType="Int")]
	public System.Nullable<int> Point
	{
		get
		{
			return this._Point;
		}
		set
		{
			if ((this._Point != value))
			{
				this.OnPointChanging(value);
				this.SendPropertyChanging();
				this._Point = value;
				this.SendPropertyChanged("Point");
				this.OnPointChanged();
			}
		}
	}
	
	[Association(Name="Customer_CustomerPoint", Storage="_Customer", ThisKey="CustomerID", OtherKey="ID", IsForeignKey=true)]
	public Customer Customer
	{
		get
		{
			return this._Customer.Entity;
		}
		set
		{
			Customer previousValue = this._Customer.Entity;
			if (((previousValue != value) 
						|| (this._Customer.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Customer.Entity = null;
					previousValue.CustomerPoints.Remove(this);
				}
				this._Customer.Entity = value;
				if ((value != null))
				{
					value.CustomerPoints.Add(this);
					this._CustomerID = value.ID;
				}
				else
				{
					this._CustomerID = default(Nullable<System.Guid>);
				}
				this.SendPropertyChanged("Customer");
			}
		}
	}
	
	[Association(Name="PointDef_CustomerPoint", Storage="_PointDef", ThisKey="PointDefID", OtherKey="ID", IsForeignKey=true)]
	public PointDef PointDef
	{
		get
		{
			return this._PointDef.Entity;
		}
		set
		{
			PointDef previousValue = this._PointDef.Entity;
			if (((previousValue != value) 
						|| (this._PointDef.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._PointDef.Entity = null;
					previousValue.CustomerPoints.Remove(this);
				}
				this._PointDef.Entity = value;
				if ((value != null))
				{
					value.CustomerPoints.Add(this);
					this._PointDefID = value.ID;
				}
				else
				{
					this._PointDefID = default(Nullable<System.Guid>);
				}
				this.SendPropertyChanged("PointDef");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}

[Table(Name="dbo.PeopleStayIn")]
public partial class PeopleStayIn : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private System.Guid _ID;
	
	private System.Nullable<System.Guid> _PeopleID;
	
	private System.Nullable<System.DateTime> _EnterDate;
	
	private string _Department;
	
	private string _Room;
	
	private string _Bed;
	
	private string _Note;
	
	private EntityRef<People> _People;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(System.Guid value);
    partial void OnIDChanged();
    partial void OnPeopleIDChanging(System.Nullable<System.Guid> value);
    partial void OnPeopleIDChanged();
    partial void OnEnterDateChanging(System.Nullable<System.DateTime> value);
    partial void OnEnterDateChanged();
    partial void OnDepartmentChanging(string value);
    partial void OnDepartmentChanged();
    partial void OnRoomChanging(string value);
    partial void OnRoomChanged();
    partial void OnBedChanging(string value);
    partial void OnBedChanged();
    partial void OnNoteChanging(string value);
    partial void OnNoteChanged();
    #endregion
	
	public PeopleStayIn()
	{
		this._People = default(EntityRef<People>);
		OnCreated();
	}
	
	[Column(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true, IsDbGenerated=true)]
	public System.Guid ID
	{
		get
		{
			return this._ID;
		}
		set
		{
			if ((this._ID != value))
			{
				this.OnIDChanging(value);
				this.SendPropertyChanging();
				this._ID = value;
				this.SendPropertyChanged("ID");
				this.OnIDChanged();
			}
		}
	}
	
	[Column(Storage="_PeopleID", DbType="UniqueIdentifier")]
	public System.Nullable<System.Guid> PeopleID
	{
		get
		{
			return this._PeopleID;
		}
		set
		{
			if ((this._PeopleID != value))
			{
				if (this._People.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnPeopleIDChanging(value);
				this.SendPropertyChanging();
				this._PeopleID = value;
				this.SendPropertyChanged("PeopleID");
				this.OnPeopleIDChanged();
			}
		}
	}
	
	[Column(Storage="_EnterDate", DbType="DateTime")]
	public System.Nullable<System.DateTime> EnterDate
	{
		get
		{
			return this._EnterDate;
		}
		set
		{
			if ((this._EnterDate != value))
			{
				this.OnEnterDateChanging(value);
				this.SendPropertyChanging();
				this._EnterDate = value;
				this.SendPropertyChanged("EnterDate");
				this.OnEnterDateChanged();
			}
		}
	}
	
	[Column(Storage="_Department", DbType="NVarChar(MAX)")]
	public string Department
	{
		get
		{
			return this._Department;
		}
		set
		{
			if ((this._Department != value))
			{
				this.OnDepartmentChanging(value);
				this.SendPropertyChanging();
				this._Department = value;
				this.SendPropertyChanged("Department");
				this.OnDepartmentChanged();
			}
		}
	}
	
	[Column(Storage="_Room", DbType="NVarChar(MAX)")]
	public string Room
	{
		get
		{
			return this._Room;
		}
		set
		{
			if ((this._Room != value))
			{
				this.OnRoomChanging(value);
				this.SendPropertyChanging();
				this._Room = value;
				this.SendPropertyChanged("Room");
				this.OnRoomChanged();
			}
		}
	}
	
	[Column(Storage="_Bed", DbType="NVarChar(MAX)")]
	public string Bed
	{
		get
		{
			return this._Bed;
		}
		set
		{
			if ((this._Bed != value))
			{
				this.OnBedChanging(value);
				this.SendPropertyChanging();
				this._Bed = value;
				this.SendPropertyChanged("Bed");
				this.OnBedChanged();
			}
		}
	}
	
	[Column(Storage="_Note", DbType="NVarChar(MAX)")]
	public string Note
	{
		get
		{
			return this._Note;
		}
		set
		{
			if ((this._Note != value))
			{
				this.OnNoteChanging(value);
				this.SendPropertyChanging();
				this._Note = value;
				this.SendPropertyChanged("Note");
				this.OnNoteChanged();
			}
		}
	}
	
	[Association(Name="People_PeopleStayIn", Storage="_People", ThisKey="PeopleID", OtherKey="ID", IsForeignKey=true)]
	public People People
	{
		get
		{
			return this._People.Entity;
		}
		set
		{
			People previousValue = this._People.Entity;
			if (((previousValue != value) 
						|| (this._People.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._People.Entity = null;
					previousValue.PeopleStayIns.Remove(this);
				}
				this._People.Entity = value;
				if ((value != null))
				{
					value.PeopleStayIns.Add(this);
					this._PeopleID = value.ID;
				}
				else
				{
					this._PeopleID = default(Nullable<System.Guid>);
				}
				this.SendPropertyChanged("People");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}

[Table(Name="dbo.Sex")]
public partial class Sex : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private System.Guid _ID;
	
	private string _Name;
	
	private EntitySet<People> _Peoples;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(System.Guid value);
    partial void OnIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
	
	public Sex()
	{
		this._Peoples = new EntitySet<People>(new Action<People>(this.attach_Peoples), new Action<People>(this.detach_Peoples));
		OnCreated();
	}
	
	[Column(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true, IsDbGenerated=true)]
	public System.Guid ID
	{
		get
		{
			return this._ID;
		}
		set
		{
			if ((this._ID != value))
			{
				this.OnIDChanging(value);
				this.SendPropertyChanging();
				this._ID = value;
				this.SendPropertyChanged("ID");
				this.OnIDChanged();
			}
		}
	}
	
	[Column(Storage="_Name", DbType="NVarChar(MAX)")]
	public string Name
	{
		get
		{
			return this._Name;
		}
		set
		{
			if ((this._Name != value))
			{
				this.OnNameChanging(value);
				this.SendPropertyChanging();
				this._Name = value;
				this.SendPropertyChanged("Name");
				this.OnNameChanged();
			}
		}
	}
	
	[Association(Name="Sex_People", Storage="_Peoples", ThisKey="ID", OtherKey="SexID")]
	public EntitySet<People> Peoples
	{
		get
		{
			return this._Peoples;
		}
		set
		{
			this._Peoples.Assign(value);
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_Peoples(People entity)
	{
		this.SendPropertyChanging();
		entity.Sex = this;
	}
	
	private void detach_Peoples(People entity)
	{
		this.SendPropertyChanging();
		entity.Sex = null;
	}
}

[Table(Name="dbo.Geo")]
public partial class Geo : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private System.Guid _ID;
	
	private string _Name;
	
	private System.Nullable<System.Guid> _ParentID;
	
	private System.Nullable<int> _Level;
	
	private string _Fullname;
	
	private string _FullnameNoDiacritics;
	
	private EntitySet<SupplierLocation> _SupplierLocations;
	
	private EntitySet<SupplierLocation> _SupplierLocations1;
	
	private EntitySet<SupplierLocation> _SupplierLocations2;
	
	private EntitySet<CompanyLocation> _CompanyLocations;
	
	private EntitySet<CompanyLocation> _CompanyLocations1;
	
	private EntitySet<CompanyLocation> _CompanyLocations2;
	
	private EntitySet<CustomerLocation> _CustomerLocations;
	
	private EntitySet<CustomerLocation> _CustomerLocations1;
	
	private EntitySet<CustomerLocation> _CustomerLocations2;
	
	private EntitySet<Geo> _Geos;
	
	private EntitySet<People> _Peoples;
	
	private EntitySet<People> _Peoples1;
	
	private EntitySet<People> _Peoples2;
	
	private EntitySet<People> _Peoples3;
	
	private EntitySet<People> _Peoples4;
	
	private EntitySet<People> _Peoples5;
	
	private EntitySet<Org> _OrgsByGeo1;
	
	private EntitySet<Org> _OrgsByGeo2;
	
	private EntitySet<Org> _OrgsByGeo3;
	
	private EntityRef<Geo> _Geo1;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(System.Guid value);
    partial void OnIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnParentIDChanging(System.Nullable<System.Guid> value);
    partial void OnParentIDChanged();
    partial void OnLevelChanging(System.Nullable<int> value);
    partial void OnLevelChanged();
    partial void OnFullnameChanging(string value);
    partial void OnFullnameChanged();
    partial void OnFullnameNoDiacriticsChanging(string value);
    partial void OnFullnameNoDiacriticsChanged();
    #endregion
	
	public Geo()
	{
		this._SupplierLocations = new EntitySet<SupplierLocation>(new Action<SupplierLocation>(this.attach_SupplierLocations), new Action<SupplierLocation>(this.detach_SupplierLocations));
		this._SupplierLocations1 = new EntitySet<SupplierLocation>(new Action<SupplierLocation>(this.attach_SupplierLocations1), new Action<SupplierLocation>(this.detach_SupplierLocations1));
		this._SupplierLocations2 = new EntitySet<SupplierLocation>(new Action<SupplierLocation>(this.attach_SupplierLocations2), new Action<SupplierLocation>(this.detach_SupplierLocations2));
		this._CompanyLocations = new EntitySet<CompanyLocation>(new Action<CompanyLocation>(this.attach_CompanyLocations), new Action<CompanyLocation>(this.detach_CompanyLocations));
		this._CompanyLocations1 = new EntitySet<CompanyLocation>(new Action<CompanyLocation>(this.attach_CompanyLocations1), new Action<CompanyLocation>(this.detach_CompanyLocations1));
		this._CompanyLocations2 = new EntitySet<CompanyLocation>(new Action<CompanyLocation>(this.attach_CompanyLocations2), new Action<CompanyLocation>(this.detach_CompanyLocations2));
		this._CustomerLocations = new EntitySet<CustomerLocation>(new Action<CustomerLocation>(this.attach_CustomerLocations), new Action<CustomerLocation>(this.detach_CustomerLocations));
		this._CustomerLocations1 = new EntitySet<CustomerLocation>(new Action<CustomerLocation>(this.attach_CustomerLocations1), new Action<CustomerLocation>(this.detach_CustomerLocations1));
		this._CustomerLocations2 = new EntitySet<CustomerLocation>(new Action<CustomerLocation>(this.attach_CustomerLocations2), new Action<CustomerLocation>(this.detach_CustomerLocations2));
		this._Geos = new EntitySet<Geo>(new Action<Geo>(this.attach_Geos), new Action<Geo>(this.detach_Geos));
		this._Peoples = new EntitySet<People>(new Action<People>(this.attach_Peoples), new Action<People>(this.detach_Peoples));
		this._Peoples1 = new EntitySet<People>(new Action<People>(this.attach_Peoples1), new Action<People>(this.detach_Peoples1));
		this._Peoples2 = new EntitySet<People>(new Action<People>(this.attach_Peoples2), new Action<People>(this.detach_Peoples2));
		this._Peoples3 = new EntitySet<People>(new Action<People>(this.attach_Peoples3), new Action<People>(this.detach_Peoples3));
		this._Peoples4 = new EntitySet<People>(new Action<People>(this.attach_Peoples4), new Action<People>(this.detach_Peoples4));
		this._Peoples5 = new EntitySet<People>(new Action<People>(this.attach_Peoples5), new Action<People>(this.detach_Peoples5));
		this._OrgsByGeo1 = new EntitySet<Org>(new Action<Org>(this.attach_OrgsByGeo1), new Action<Org>(this.detach_OrgsByGeo1));
		this._OrgsByGeo2 = new EntitySet<Org>(new Action<Org>(this.attach_OrgsByGeo2), new Action<Org>(this.detach_OrgsByGeo2));
		this._OrgsByGeo3 = new EntitySet<Org>(new Action<Org>(this.attach_OrgsByGeo3), new Action<Org>(this.detach_OrgsByGeo3));
		this._Geo1 = default(EntityRef<Geo>);
		OnCreated();
	}
	
	[Column(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true, IsDbGenerated=true)]
	public System.Guid ID
	{
		get
		{
			return this._ID;
		}
		set
		{
			if ((this._ID != value))
			{
				this.OnIDChanging(value);
				this.SendPropertyChanging();
				this._ID = value;
				this.SendPropertyChanged("ID");
				this.OnIDChanged();
			}
		}
	}
	
	[Column(Storage="_Name", DbType="NVarChar(MAX)")]
	public string Name
	{
		get
		{
			return this._Name;
		}
		set
		{
			if ((this._Name != value))
			{
				this.OnNameChanging(value);
				this.SendPropertyChanging();
				this._Name = value;
				this.SendPropertyChanged("Name");
				this.OnNameChanged();
			}
		}
	}
	
	[Column(Storage="_ParentID", DbType="UniqueIdentifier")]
	public System.Nullable<System.Guid> ParentID
	{
		get
		{
			return this._ParentID;
		}
		set
		{
			if ((this._ParentID != value))
			{
				if (this._Geo1.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnParentIDChanging(value);
				this.SendPropertyChanging();
				this._ParentID = value;
				this.SendPropertyChanged("ParentID");
				this.OnParentIDChanged();
			}
		}
	}
	
	[Column(Name="[Level]", Storage="_Level", DbType="Int")]
	public System.Nullable<int> Level
	{
		get
		{
			return this._Level;
		}
		set
		{
			if ((this._Level != value))
			{
				this.OnLevelChanging(value);
				this.SendPropertyChanging();
				this._Level = value;
				this.SendPropertyChanged("Level");
				this.OnLevelChanged();
			}
		}
	}
	
	[Column(Storage="_Fullname", DbType="NVarChar(MAX)")]
	public string Fullname
	{
		get
		{
			return this._Fullname;
		}
		set
		{
			if ((this._Fullname != value))
			{
				this.OnFullnameChanging(value);
				this.SendPropertyChanging();
				this._Fullname = value;
				this.SendPropertyChanged("Fullname");
				this.OnFullnameChanged();
			}
		}
	}
	
	[Column(Storage="_FullnameNoDiacritics", DbType="NVarChar(MAX)")]
	public string FullnameNoDiacritics
	{
		get
		{
			return this._FullnameNoDiacritics;
		}
		set
		{
			if ((this._FullnameNoDiacritics != value))
			{
				this.OnFullnameNoDiacriticsChanging(value);
				this.SendPropertyChanging();
				this._FullnameNoDiacritics = value;
				this.SendPropertyChanged("FullnameNoDiacritics");
				this.OnFullnameNoDiacriticsChanged();
			}
		}
	}
	
	[Association(Name="Geo_SupplierLocation", Storage="_SupplierLocations", ThisKey="ID", OtherKey="GeoID1")]
	public EntitySet<SupplierLocation> SupplierLocations
	{
		get
		{
			return this._SupplierLocations;
		}
		set
		{
			this._SupplierLocations.Assign(value);
		}
	}
	
	[Association(Name="Geo_SupplierLocation1", Storage="_SupplierLocations1", ThisKey="ID", OtherKey="GeoID2")]
	public EntitySet<SupplierLocation> SupplierLocations1
	{
		get
		{
			return this._SupplierLocations1;
		}
		set
		{
			this._SupplierLocations1.Assign(value);
		}
	}
	
	[Association(Name="Geo_SupplierLocation2", Storage="_SupplierLocations2", ThisKey="ID", OtherKey="GeoID3")]
	public EntitySet<SupplierLocation> SupplierLocations2
	{
		get
		{
			return this._SupplierLocations2;
		}
		set
		{
			this._SupplierLocations2.Assign(value);
		}
	}
	
	[Association(Name="Geo_CompanyLocation", Storage="_CompanyLocations", ThisKey="ID", OtherKey="GeoID1")]
	public EntitySet<CompanyLocation> CompanyLocations
	{
		get
		{
			return this._CompanyLocations;
		}
		set
		{
			this._CompanyLocations.Assign(value);
		}
	}
	
	[Association(Name="Geo_CompanyLocation1", Storage="_CompanyLocations1", ThisKey="ID", OtherKey="GeoID2")]
	public EntitySet<CompanyLocation> CompanyLocations1
	{
		get
		{
			return this._CompanyLocations1;
		}
		set
		{
			this._CompanyLocations1.Assign(value);
		}
	}
	
	[Association(Name="Geo_CompanyLocation2", Storage="_CompanyLocations2", ThisKey="ID", OtherKey="GeoID3")]
	public EntitySet<CompanyLocation> CompanyLocations2
	{
		get
		{
			return this._CompanyLocations2;
		}
		set
		{
			this._CompanyLocations2.Assign(value);
		}
	}
	
	[Association(Name="Geo_CustomerLocation", Storage="_CustomerLocations", ThisKey="ID", OtherKey="GeoID1")]
	public EntitySet<CustomerLocation> CustomerLocations
	{
		get
		{
			return this._CustomerLocations;
		}
		set
		{
			this._CustomerLocations.Assign(value);
		}
	}
	
	[Association(Name="Geo_CustomerLocation1", Storage="_CustomerLocations1", ThisKey="ID", OtherKey="GeoID2")]
	public EntitySet<CustomerLocation> CustomerLocations1
	{
		get
		{
			return this._CustomerLocations1;
		}
		set
		{
			this._CustomerLocations1.Assign(value);
		}
	}
	
	[Association(Name="Geo_CustomerLocation2", Storage="_CustomerLocations2", ThisKey="ID", OtherKey="GeoID3")]
	public EntitySet<CustomerLocation> CustomerLocations2
	{
		get
		{
			return this._CustomerLocations2;
		}
		set
		{
			this._CustomerLocations2.Assign(value);
		}
	}
	
	[Association(Name="Geo_Geo", Storage="_Geos", ThisKey="ID", OtherKey="ParentID")]
	public EntitySet<Geo> Geos
	{
		get
		{
			return this._Geos;
		}
		set
		{
			this._Geos.Assign(value);
		}
	}
	
	[Association(Name="Geo_People", Storage="_Peoples", ThisKey="ID", OtherKey="MailingGeoID1")]
	public EntitySet<People> PeopleMailingGeo1
	{
		get
		{
			return this._Peoples;
		}
		set
		{
			this._Peoples.Assign(value);
		}
	}
	
	[Association(Name="Geo_People1", Storage="_Peoples1", ThisKey="ID", OtherKey="MailingGeoID2")]
	public EntitySet<People> PeopleMailingGeo2
	{
		get
		{
			return this._Peoples1;
		}
		set
		{
			this._Peoples1.Assign(value);
		}
	}
	
	[Association(Name="Geo_People2", Storage="_Peoples2", ThisKey="ID", OtherKey="MailingGeoID3")]
	public EntitySet<People> PeopleMailingGeo3
	{
		get
		{
			return this._Peoples2;
		}
		set
		{
			this._Peoples2.Assign(value);
		}
	}
	
	[Association(Name="Geo_People3", Storage="_Peoples3", ThisKey="ID", OtherKey="ResidentGeoID1")]
	public EntitySet<People> PeopleResidentGeo1
	{
		get
		{
			return this._Peoples3;
		}
		set
		{
			this._Peoples3.Assign(value);
		}
	}
	
	[Association(Name="Geo_People4", Storage="_Peoples4", ThisKey="ID", OtherKey="ResidentGeoID2")]
	public EntitySet<People> PeopleResidentGeo2
	{
		get
		{
			return this._Peoples4;
		}
		set
		{
			this._Peoples4.Assign(value);
		}
	}
	
	[Association(Name="Geo_People5", Storage="_Peoples5", ThisKey="ID", OtherKey="ResidentGeoID3")]
	public EntitySet<People> PeopleResidentGeo3
	{
		get
		{
			return this._Peoples5;
		}
		set
		{
			this._Peoples5.Assign(value);
		}
	}
	
	[Association(Name="Geo_Org", Storage="_OrgsByGeo1", ThisKey="ID", OtherKey="GeoID1")]
	public EntitySet<Org> OrgsByGeo1
	{
		get
		{
			return this._OrgsByGeo1;
		}
		set
		{
			this._OrgsByGeo1.Assign(value);
		}
	}
	
	[Association(Name="Geo_Org1", Storage="_OrgsByGeo2", ThisKey="ID", OtherKey="GeoID2")]
	public EntitySet<Org> OrgsByGeo2
	{
		get
		{
			return this._OrgsByGeo2;
		}
		set
		{
			this._OrgsByGeo2.Assign(value);
		}
	}
	
	[Association(Name="Geo_Org2", Storage="_OrgsByGeo3", ThisKey="ID", OtherKey="GeoID3")]
	public EntitySet<Org> OrgsByGeo3
	{
		get
		{
			return this._OrgsByGeo3;
		}
		set
		{
			this._OrgsByGeo3.Assign(value);
		}
	}
	
	[Association(Name="Geo_Geo", Storage="_Geo1", ThisKey="ParentID", OtherKey="ID", IsForeignKey=true)]
	public Geo ParentGeo
	{
		get
		{
			return this._Geo1.Entity;
		}
		set
		{
			Geo previousValue = this._Geo1.Entity;
			if (((previousValue != value) 
						|| (this._Geo1.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Geo1.Entity = null;
					previousValue.Geos.Remove(this);
				}
				this._Geo1.Entity = value;
				if ((value != null))
				{
					value.Geos.Add(this);
					this._ParentID = value.ID;
				}
				else
				{
					this._ParentID = default(Nullable<System.Guid>);
				}
				this.SendPropertyChanged("ParentGeo");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_SupplierLocations(SupplierLocation entity)
	{
		this.SendPropertyChanging();
		entity.Geo = this;
	}
	
	private void detach_SupplierLocations(SupplierLocation entity)
	{
		this.SendPropertyChanging();
		entity.Geo = null;
	}
	
	private void attach_SupplierLocations1(SupplierLocation entity)
	{
		this.SendPropertyChanging();
		entity.Geo1 = this;
	}
	
	private void detach_SupplierLocations1(SupplierLocation entity)
	{
		this.SendPropertyChanging();
		entity.Geo1 = null;
	}
	
	private void attach_SupplierLocations2(SupplierLocation entity)
	{
		this.SendPropertyChanging();
		entity.Geo2 = this;
	}
	
	private void detach_SupplierLocations2(SupplierLocation entity)
	{
		this.SendPropertyChanging();
		entity.Geo2 = null;
	}
	
	private void attach_CompanyLocations(CompanyLocation entity)
	{
		this.SendPropertyChanging();
		entity.Geo = this;
	}
	
	private void detach_CompanyLocations(CompanyLocation entity)
	{
		this.SendPropertyChanging();
		entity.Geo = null;
	}
	
	private void attach_CompanyLocations1(CompanyLocation entity)
	{
		this.SendPropertyChanging();
		entity.Geo1 = this;
	}
	
	private void detach_CompanyLocations1(CompanyLocation entity)
	{
		this.SendPropertyChanging();
		entity.Geo1 = null;
	}
	
	private void attach_CompanyLocations2(CompanyLocation entity)
	{
		this.SendPropertyChanging();
		entity.Geo2 = this;
	}
	
	private void detach_CompanyLocations2(CompanyLocation entity)
	{
		this.SendPropertyChanging();
		entity.Geo2 = null;
	}
	
	private void attach_CustomerLocations(CustomerLocation entity)
	{
		this.SendPropertyChanging();
		entity.Geo = this;
	}
	
	private void detach_CustomerLocations(CustomerLocation entity)
	{
		this.SendPropertyChanging();
		entity.Geo = null;
	}
	
	private void attach_CustomerLocations1(CustomerLocation entity)
	{
		this.SendPropertyChanging();
		entity.Geo1 = this;
	}
	
	private void detach_CustomerLocations1(CustomerLocation entity)
	{
		this.SendPropertyChanging();
		entity.Geo1 = null;
	}
	
	private void attach_CustomerLocations2(CustomerLocation entity)
	{
		this.SendPropertyChanging();
		entity.Geo2 = this;
	}
	
	private void detach_CustomerLocations2(CustomerLocation entity)
	{
		this.SendPropertyChanging();
		entity.Geo2 = null;
	}
	
	private void attach_Geos(Geo entity)
	{
		this.SendPropertyChanging();
		entity.ParentGeo = this;
	}
	
	private void detach_Geos(Geo entity)
	{
		this.SendPropertyChanging();
		entity.ParentGeo = null;
	}
	
	private void attach_Peoples(People entity)
	{
		this.SendPropertyChanging();
		entity.MailingGeo1 = this;
	}
	
	private void detach_Peoples(People entity)
	{
		this.SendPropertyChanging();
		entity.MailingGeo1 = null;
	}
	
	private void attach_Peoples1(People entity)
	{
		this.SendPropertyChanging();
		entity.MailingGeo2 = this;
	}
	
	private void detach_Peoples1(People entity)
	{
		this.SendPropertyChanging();
		entity.MailingGeo2 = null;
	}
	
	private void attach_Peoples2(People entity)
	{
		this.SendPropertyChanging();
		entity.MailingGeo3 = this;
	}
	
	private void detach_Peoples2(People entity)
	{
		this.SendPropertyChanging();
		entity.MailingGeo3 = null;
	}
	
	private void attach_Peoples3(People entity)
	{
		this.SendPropertyChanging();
		entity.ResidentGeo1 = this;
	}
	
	private void detach_Peoples3(People entity)
	{
		this.SendPropertyChanging();
		entity.ResidentGeo1 = null;
	}
	
	private void attach_Peoples4(People entity)
	{
		this.SendPropertyChanging();
		entity.ResidentGeo2 = this;
	}
	
	private void detach_Peoples4(People entity)
	{
		this.SendPropertyChanging();
		entity.ResidentGeo2 = null;
	}
	
	private void attach_Peoples5(People entity)
	{
		this.SendPropertyChanging();
		entity.ResidentGeo3 = this;
	}
	
	private void detach_Peoples5(People entity)
	{
		this.SendPropertyChanging();
		entity.ResidentGeo3 = null;
	}
	
	private void attach_OrgsByGeo1(Org entity)
	{
		this.SendPropertyChanging();
		entity.Geo1 = this;
	}
	
	private void detach_OrgsByGeo1(Org entity)
	{
		this.SendPropertyChanging();
		entity.Geo1 = null;
	}
	
	private void attach_OrgsByGeo2(Org entity)
	{
		this.SendPropertyChanging();
		entity.Geo2 = this;
	}
	
	private void detach_OrgsByGeo2(Org entity)
	{
		this.SendPropertyChanging();
		entity.Geo2 = null;
	}
	
	private void attach_OrgsByGeo3(Org entity)
	{
		this.SendPropertyChanging();
		entity.Geo3 = this;
	}
	
	private void detach_OrgsByGeo3(Org entity)
	{
		this.SendPropertyChanging();
		entity.Geo3 = null;
	}
}

[Table(Name="dbo.Hospital")]
public partial class Hospital : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private System.Guid _ID;
	
	private string _Name;
	
	private string _NameInEnglish;
	
	private string _Address;
	
	private string _Phone;
	
	private string _Fax;
	
	private string _Email;
	
	private string _Website;
	
	private string _Code;
	
	private EntitySet<People> _Peoples;
	
	private EntitySet<Pack> _Packs;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(System.Guid value);
    partial void OnIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnNameInEnglishChanging(string value);
    partial void OnNameInEnglishChanged();
    partial void OnAddressChanging(string value);
    partial void OnAddressChanged();
    partial void OnPhoneChanging(string value);
    partial void OnPhoneChanged();
    partial void OnFaxChanging(string value);
    partial void OnFaxChanged();
    partial void OnEmailChanging(string value);
    partial void OnEmailChanged();
    partial void OnWebsiteChanging(string value);
    partial void OnWebsiteChanged();
    partial void OnCodeChanging(string value);
    partial void OnCodeChanged();
    #endregion
	
	public Hospital()
	{
		this._Peoples = new EntitySet<People>(new Action<People>(this.attach_Peoples), new Action<People>(this.detach_Peoples));
		this._Packs = new EntitySet<Pack>(new Action<Pack>(this.attach_Packs), new Action<Pack>(this.detach_Packs));
		OnCreated();
	}
	
	[Column(Storage="_ID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
	public System.Guid ID
	{
		get
		{
			return this._ID;
		}
		set
		{
			if ((this._ID != value))
			{
				this.OnIDChanging(value);
				this.SendPropertyChanging();
				this._ID = value;
				this.SendPropertyChanged("ID");
				this.OnIDChanged();
			}
		}
	}
	
	[Column(Storage="_Name", DbType="NVarChar(MAX)")]
	public string Name
	{
		get
		{
			return this._Name;
		}
		set
		{
			if ((this._Name != value))
			{
				this.OnNameChanging(value);
				this.SendPropertyChanging();
				this._Name = value;
				this.SendPropertyChanged("Name");
				this.OnNameChanged();
			}
		}
	}
	
	[Column(Storage="_NameInEnglish", DbType="NVarChar(MAX)")]
	public string NameInEnglish
	{
		get
		{
			return this._NameInEnglish;
		}
		set
		{
			if ((this._NameInEnglish != value))
			{
				this.OnNameInEnglishChanging(value);
				this.SendPropertyChanging();
				this._NameInEnglish = value;
				this.SendPropertyChanged("NameInEnglish");
				this.OnNameInEnglishChanged();
			}
		}
	}
	
	[Column(Storage="_Address", DbType="NVarChar(MAX)")]
	public string Address
	{
		get
		{
			return this._Address;
		}
		set
		{
			if ((this._Address != value))
			{
				this.OnAddressChanging(value);
				this.SendPropertyChanging();
				this._Address = value;
				this.SendPropertyChanged("Address");
				this.OnAddressChanged();
			}
		}
	}
	
	[Column(Storage="_Phone", DbType="NVarChar(MAX)")]
	public string Phone
	{
		get
		{
			return this._Phone;
		}
		set
		{
			if ((this._Phone != value))
			{
				this.OnPhoneChanging(value);
				this.SendPropertyChanging();
				this._Phone = value;
				this.SendPropertyChanged("Phone");
				this.OnPhoneChanged();
			}
		}
	}
	
	[Column(Storage="_Fax", DbType="NVarChar(MAX)")]
	public string Fax
	{
		get
		{
			return this._Fax;
		}
		set
		{
			if ((this._Fax != value))
			{
				this.OnFaxChanging(value);
				this.SendPropertyChanging();
				this._Fax = value;
				this.SendPropertyChanged("Fax");
				this.OnFaxChanged();
			}
		}
	}
	
	[Column(Storage="_Email", DbType="NVarChar(MAX)")]
	public string Email
	{
		get
		{
			return this._Email;
		}
		set
		{
			if ((this._Email != value))
			{
				this.OnEmailChanging(value);
				this.SendPropertyChanging();
				this._Email = value;
				this.SendPropertyChanged("Email");
				this.OnEmailChanged();
			}
		}
	}
	
	[Column(Storage="_Website", DbType="NVarChar(MAX)")]
	public string Website
	{
		get
		{
			return this._Website;
		}
		set
		{
			if ((this._Website != value))
			{
				this.OnWebsiteChanging(value);
				this.SendPropertyChanging();
				this._Website = value;
				this.SendPropertyChanged("Website");
				this.OnWebsiteChanged();
			}
		}
	}
	
	[Column(Storage="_Code", DbType="NVarChar(MAX)")]
	public string Code
	{
		get
		{
			return this._Code;
		}
		set
		{
			if ((this._Code != value))
			{
				this.OnCodeChanging(value);
				this.SendPropertyChanging();
				this._Code = value;
				this.SendPropertyChanged("Code");
				this.OnCodeChanged();
			}
		}
	}
	
	[Association(Name="Hospital_People", Storage="_Peoples", ThisKey="ID", OtherKey="HopistalID")]
	public EntitySet<People> Peoples
	{
		get
		{
			return this._Peoples;
		}
		set
		{
			this._Peoples.Assign(value);
		}
	}
	
	[Association(Name="Hospital_Pack", Storage="_Packs", ThisKey="ID", OtherKey="HospitalID")]
	public EntitySet<Pack> Packs
	{
		get
		{
			return this._Packs;
		}
		set
		{
			this._Packs.Assign(value);
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_Peoples(People entity)
	{
		this.SendPropertyChanging();
		entity.Hospital = this;
	}
	
	private void detach_Peoples(People entity)
	{
		this.SendPropertyChanging();
		entity.Hospital = null;
	}
	
	private void attach_Packs(Pack entity)
	{
		this.SendPropertyChanging();
		entity.Hospital = this;
	}
	
	private void detach_Packs(Pack entity)
	{
		this.SendPropertyChanging();
		entity.Hospital = null;
	}
}

[Table(Name="dbo.TestDef")]
public partial class TestDef : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _ID;
	
	private string _Name;
	
	private System.Nullable<int> _ParentID;
	
	private string _Note;
	
	private System.Nullable<int> _Level;
	
	private EntitySet<TestDef> _Children;
	
	private EntitySet<Pack> _PacksByComponent;
	
	private EntitySet<Pack> _PacksBySource;
	
	private EntitySet<TestResult> _TestResults;
	
	private EntitySet<TestResult> _TestResults1;
	
	private EntitySet<TestResult> _TestResults2;
	
	private EntitySet<TestResult> _TestResults3;
	
	private EntitySet<TestResult> _TestResults4;
	
	private EntitySet<BloodType> _BloodTypesByABO;
	
	private EntitySet<BloodType> _BloodTypesByRH;
	
	private EntitySet<Campaign> _CampaignsBySource;
	
	private EntitySet<PackResultHistory> _PackResultHistories;
	
	private EntityRef<TestDef> _Parent;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnParentIDChanging(System.Nullable<int> value);
    partial void OnParentIDChanged();
    partial void OnNoteChanging(string value);
    partial void OnNoteChanged();
    partial void OnLevelChanging(System.Nullable<int> value);
    partial void OnLevelChanged();
    #endregion
	
	public TestDef()
	{
		this._Children = new EntitySet<TestDef>(new Action<TestDef>(this.attach_Children), new Action<TestDef>(this.detach_Children));
		this._PacksByComponent = new EntitySet<Pack>(new Action<Pack>(this.attach_PacksByComponent), new Action<Pack>(this.detach_PacksByComponent));
		this._PacksBySource = new EntitySet<Pack>(new Action<Pack>(this.attach_PacksBySource), new Action<Pack>(this.detach_PacksBySource));
		this._TestResults = new EntitySet<TestResult>(new Action<TestResult>(this.attach_TestResults), new Action<TestResult>(this.detach_TestResults));
		this._TestResults1 = new EntitySet<TestResult>(new Action<TestResult>(this.attach_TestResults1), new Action<TestResult>(this.detach_TestResults1));
		this._TestResults2 = new EntitySet<TestResult>(new Action<TestResult>(this.attach_TestResults2), new Action<TestResult>(this.detach_TestResults2));
		this._TestResults3 = new EntitySet<TestResult>(new Action<TestResult>(this.attach_TestResults3), new Action<TestResult>(this.detach_TestResults3));
		this._TestResults4 = new EntitySet<TestResult>(new Action<TestResult>(this.attach_TestResults4), new Action<TestResult>(this.detach_TestResults4));
		this._BloodTypesByABO = new EntitySet<BloodType>(new Action<BloodType>(this.attach_BloodTypesByABO), new Action<BloodType>(this.detach_BloodTypesByABO));
		this._BloodTypesByRH = new EntitySet<BloodType>(new Action<BloodType>(this.attach_BloodTypesByRH), new Action<BloodType>(this.detach_BloodTypesByRH));
		this._CampaignsBySource = new EntitySet<Campaign>(new Action<Campaign>(this.attach_CampaignsBySource), new Action<Campaign>(this.detach_CampaignsBySource));
		this._PackResultHistories = new EntitySet<PackResultHistory>(new Action<PackResultHistory>(this.attach_PackResultHistories), new Action<PackResultHistory>(this.detach_PackResultHistories));
		this._Parent = default(EntityRef<TestDef>);
		OnCreated();
	}
	
	[Column(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int ID
	{
		get
		{
			return this._ID;
		}
		set
		{
			if ((this._ID != value))
			{
				this.OnIDChanging(value);
				this.SendPropertyChanging();
				this._ID = value;
				this.SendPropertyChanged("ID");
				this.OnIDChanged();
			}
		}
	}
	
	[Column(Storage="_Name", DbType="NVarChar(MAX)")]
	public string Name
	{
		get
		{
			return this._Name;
		}
		set
		{
			if ((this._Name != value))
			{
				this.OnNameChanging(value);
				this.SendPropertyChanging();
				this._Name = value;
				this.SendPropertyChanged("Name");
				this.OnNameChanged();
			}
		}
	}
	
	[Column(Storage="_ParentID", DbType="Int")]
	public System.Nullable<int> ParentID
	{
		get
		{
			return this._ParentID;
		}
		set
		{
			if ((this._ParentID != value))
			{
				if (this._Parent.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnParentIDChanging(value);
				this.SendPropertyChanging();
				this._ParentID = value;
				this.SendPropertyChanged("ParentID");
				this.OnParentIDChanged();
			}
		}
	}
	
	[Column(Storage="_Note", DbType="NVarChar(MAX)")]
	public string Note
	{
		get
		{
			return this._Note;
		}
		set
		{
			if ((this._Note != value))
			{
				this.OnNoteChanging(value);
				this.SendPropertyChanging();
				this._Note = value;
				this.SendPropertyChanged("Note");
				this.OnNoteChanged();
			}
		}
	}
	
	[Column(Name="[Level]", Storage="_Level", DbType="Int")]
	public System.Nullable<int> Level
	{
		get
		{
			return this._Level;
		}
		set
		{
			if ((this._Level != value))
			{
				this.OnLevelChanging(value);
				this.SendPropertyChanging();
				this._Level = value;
				this.SendPropertyChanged("Level");
				this.OnLevelChanged();
			}
		}
	}
	
	[Association(Name="TestDef_TestDef", Storage="_Children", ThisKey="ID", OtherKey="ParentID")]
	public EntitySet<TestDef> Children
	{
		get
		{
			return this._Children;
		}
		set
		{
			this._Children.Assign(value);
		}
	}
	
	[Association(Name="TestDef_Pack", Storage="_PacksByComponent", ThisKey="ID", OtherKey="ComponentID")]
	public EntitySet<Pack> PacksByComponent
	{
		get
		{
			return this._PacksByComponent;
		}
		set
		{
			this._PacksByComponent.Assign(value);
		}
	}
	
	[Association(Name="TestDef_Pack1", Storage="_PacksBySource", ThisKey="ID", OtherKey="SourceID")]
	public EntitySet<Pack> PacksBySource
	{
		get
		{
			return this._PacksBySource;
		}
		set
		{
			this._PacksBySource.Assign(value);
		}
	}
	
	[Association(Name="TestDef_TestResult", Storage="_TestResults", ThisKey="ID", OtherKey="HBsAgID")]
	public EntitySet<TestResult> TestResultsByHBsAg
	{
		get
		{
			return this._TestResults;
		}
		set
		{
			this._TestResults.Assign(value);
		}
	}
	
	[Association(Name="TestDef_TestResult1", Storage="_TestResults1", ThisKey="ID", OtherKey="HCVID")]
	public EntitySet<TestResult> TestResultsByHCV
	{
		get
		{
			return this._TestResults1;
		}
		set
		{
			this._TestResults1.Assign(value);
		}
	}
	
	[Association(Name="TestDef_TestResult2", Storage="_TestResults2", ThisKey="ID", OtherKey="HIVID")]
	public EntitySet<TestResult> TestResultsByHIV
	{
		get
		{
			return this._TestResults2;
		}
		set
		{
			this._TestResults2.Assign(value);
		}
	}
	
	[Association(Name="TestDef_TestResult3", Storage="_TestResults3", ThisKey="ID", OtherKey="MalariaID")]
	public EntitySet<TestResult> TestResultsByMalaria
	{
		get
		{
			return this._TestResults3;
		}
		set
		{
			this._TestResults3.Assign(value);
		}
	}
	
	[Association(Name="TestDef_TestResult4", Storage="_TestResults4", ThisKey="ID", OtherKey="SyphilisID")]
	public EntitySet<TestResult> TestResultsBySyphilis
	{
		get
		{
			return this._TestResults4;
		}
		set
		{
			this._TestResults4.Assign(value);
		}
	}
	
	[Association(Name="TestDef_BloodType", Storage="_BloodTypesByABO", ThisKey="ID", OtherKey="aboID")]
	public EntitySet<BloodType> BloodTypesByABO
	{
		get
		{
			return this._BloodTypesByABO;
		}
		set
		{
			this._BloodTypesByABO.Assign(value);
		}
	}
	
	[Association(Name="TestDef_BloodType1", Storage="_BloodTypesByRH", ThisKey="ID", OtherKey="rhID")]
	public EntitySet<BloodType> BloodTypesByRH
	{
		get
		{
			return this._BloodTypesByRH;
		}
		set
		{
			this._BloodTypesByRH.Assign(value);
		}
	}
	
	[Association(Name="TestDef_Campaign", Storage="_CampaignsBySource", ThisKey="ID", OtherKey="SourceID")]
	public EntitySet<Campaign> CampaignsBySource
	{
		get
		{
			return this._CampaignsBySource;
		}
		set
		{
			this._CampaignsBySource.Assign(value);
		}
	}
	
	[Association(Name="TestDef_PackResultHistory", Storage="_PackResultHistories", ThisKey="ID", OtherKey="TestDefID")]
	public EntitySet<PackResultHistory> PackResultHistories
	{
		get
		{
			return this._PackResultHistories;
		}
		set
		{
			this._PackResultHistories.Assign(value);
		}
	}
	
	[Association(Name="TestDef_TestDef", Storage="_Parent", ThisKey="ParentID", OtherKey="ID", IsForeignKey=true)]
	public TestDef Parent
	{
		get
		{
			return this._Parent.Entity;
		}
		set
		{
			TestDef previousValue = this._Parent.Entity;
			if (((previousValue != value) 
						|| (this._Parent.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Parent.Entity = null;
					previousValue.Children.Remove(this);
				}
				this._Parent.Entity = value;
				if ((value != null))
				{
					value.Children.Add(this);
					this._ParentID = value.ID;
				}
				else
				{
					this._ParentID = default(Nullable<int>);
				}
				this.SendPropertyChanged("Parent");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_Children(TestDef entity)
	{
		this.SendPropertyChanging();
		entity.Parent = this;
	}
	
	private void detach_Children(TestDef entity)
	{
		this.SendPropertyChanging();
		entity.Parent = null;
	}
	
	private void attach_PacksByComponent(Pack entity)
	{
		this.SendPropertyChanging();
		entity.Component = this;
	}
	
	private void detach_PacksByComponent(Pack entity)
	{
		this.SendPropertyChanging();
		entity.Component = null;
	}
	
	private void attach_PacksBySource(Pack entity)
	{
		this.SendPropertyChanging();
		entity.Source = this;
	}
	
	private void detach_PacksBySource(Pack entity)
	{
		this.SendPropertyChanging();
		entity.Source = null;
	}
	
	private void attach_TestResults(TestResult entity)
	{
		this.SendPropertyChanging();
		entity.HBsAg = this;
	}
	
	private void detach_TestResults(TestResult entity)
	{
		this.SendPropertyChanging();
		entity.HBsAg = null;
	}
	
	private void attach_TestResults1(TestResult entity)
	{
		this.SendPropertyChanging();
		entity.HCV = this;
	}
	
	private void detach_TestResults1(TestResult entity)
	{
		this.SendPropertyChanging();
		entity.HCV = null;
	}
	
	private void attach_TestResults2(TestResult entity)
	{
		this.SendPropertyChanging();
		entity.HIV = this;
	}
	
	private void detach_TestResults2(TestResult entity)
	{
		this.SendPropertyChanging();
		entity.HIV = null;
	}
	
	private void attach_TestResults3(TestResult entity)
	{
		this.SendPropertyChanging();
		entity.Malaria = this;
	}
	
	private void detach_TestResults3(TestResult entity)
	{
		this.SendPropertyChanging();
		entity.Malaria = null;
	}
	
	private void attach_TestResults4(TestResult entity)
	{
		this.SendPropertyChanging();
		entity.Syphilis = this;
	}
	
	private void detach_TestResults4(TestResult entity)
	{
		this.SendPropertyChanging();
		entity.Syphilis = null;
	}
	
	private void attach_BloodTypesByABO(BloodType entity)
	{
		this.SendPropertyChanging();
		entity.ABO = this;
	}
	
	private void detach_BloodTypesByABO(BloodType entity)
	{
		this.SendPropertyChanging();
		entity.ABO = null;
	}
	
	private void attach_BloodTypesByRH(BloodType entity)
	{
		this.SendPropertyChanging();
		entity.RH = this;
	}
	
	private void detach_BloodTypesByRH(BloodType entity)
	{
		this.SendPropertyChanging();
		entity.RH = null;
	}
	
	private void attach_CampaignsBySource(Campaign entity)
	{
		this.SendPropertyChanging();
		entity.Source = this;
	}
	
	private void detach_CampaignsBySource(Campaign entity)
	{
		this.SendPropertyChanging();
		entity.Source = null;
	}
	
	private void attach_PackResultHistories(PackResultHistory entity)
	{
		this.SendPropertyChanging();
		entity.TestDef = this;
	}
	
	private void detach_PackResultHistories(PackResultHistory entity)
	{
		this.SendPropertyChanging();
		entity.TestDef = null;
	}
}

[Table(Name="dbo.People")]
public partial class People : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private System.Guid _ID;
	
	private string _Name;
	
	private string _Codabar;
	
	private string _CMND;
	
	private System.Nullable<System.DateTime> _DOB;
	
	private System.Nullable<System.Guid> _SexID;
	
	private string _Job;
	
	private string _Email;
	
	private string _Phone;
	
	private string _Note;
	
	private System.Data.Linq.Binary _Photo;
	
	private System.Nullable<System.Guid> _HopistalID;
	
	private System.Nullable<int> _Status;
	
	private string _ResidentAddress;
	
	private System.Nullable<System.Guid> _ResidentGeo1;
	
	private System.Nullable<System.Guid> _ResidentGeo2;
	
	private System.Nullable<System.Guid> _ResidentGeo3;
	
	private string _MailingAddress;
	
	private System.Nullable<System.Guid> _MailingGeo1;
	
	private System.Nullable<System.Guid> _MailingGeo2;
	
	private System.Nullable<System.Guid> _MailingGeo3;
	
	private System.Nullable<bool> _EnableMailingAddress;
	
	private string _NameNoDiacritics;
	
	private EntitySet<PeopleStayIn> _PeopleStayIns;
	
	private EntitySet<Pack> _Packs;
	
	private EntitySet<Order> _Orders;
	
	private EntityRef<Hospital> _Hospital;
	
	private EntityRef<Geo> _Geo;
	
	private EntityRef<Geo> _Geo1;
	
	private EntityRef<Geo> _Geo2;
	
	private EntityRef<Geo> _Geo3;
	
	private EntityRef<Geo> _Geo4;
	
	private EntityRef<Geo> _Geo5;
	
	private EntityRef<Sex> _Sex;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(System.Guid value);
    partial void OnIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnCodabarChanging(string value);
    partial void OnCodabarChanged();
    partial void OnCMNDChanging(string value);
    partial void OnCMNDChanged();
    partial void OnDOBChanging(System.Nullable<System.DateTime> value);
    partial void OnDOBChanged();
    partial void OnSexIDChanging(System.Nullable<System.Guid> value);
    partial void OnSexIDChanged();
    partial void OnJobChanging(string value);
    partial void OnJobChanged();
    partial void OnEmailChanging(string value);
    partial void OnEmailChanged();
    partial void OnPhoneChanging(string value);
    partial void OnPhoneChanged();
    partial void OnNoteChanging(string value);
    partial void OnNoteChanged();
    partial void OnPhotoChanging(System.Data.Linq.Binary value);
    partial void OnPhotoChanged();
    partial void OnHopistalIDChanging(System.Nullable<System.Guid> value);
    partial void OnHopistalIDChanged();
    partial void OnStatusChanging(System.Nullable<int> value);
    partial void OnStatusChanged();
    partial void OnResidentAddressChanging(string value);
    partial void OnResidentAddressChanged();
    partial void OnResidentGeoID1Changing(System.Nullable<System.Guid> value);
    partial void OnResidentGeoID1Changed();
    partial void OnResidentGeoID2Changing(System.Nullable<System.Guid> value);
    partial void OnResidentGeoID2Changed();
    partial void OnResidentGeoID3Changing(System.Nullable<System.Guid> value);
    partial void OnResidentGeoID3Changed();
    partial void OnMailingAddressChanging(string value);
    partial void OnMailingAddressChanged();
    partial void OnMailingGeoID1Changing(System.Nullable<System.Guid> value);
    partial void OnMailingGeoID1Changed();
    partial void OnMailingGeoID2Changing(System.Nullable<System.Guid> value);
    partial void OnMailingGeoID2Changed();
    partial void OnMailingGeoID3Changing(System.Nullable<System.Guid> value);
    partial void OnMailingGeoID3Changed();
    partial void OnEnableMailingAddressChanging(System.Nullable<bool> value);
    partial void OnEnableMailingAddressChanged();
    partial void OnNameNoDiacriticsChanging(string value);
    partial void OnNameNoDiacriticsChanged();
    #endregion
	
	public People()
	{
		this._PeopleStayIns = new EntitySet<PeopleStayIn>(new Action<PeopleStayIn>(this.attach_PeopleStayIns), new Action<PeopleStayIn>(this.detach_PeopleStayIns));
		this._Packs = new EntitySet<Pack>(new Action<Pack>(this.attach_Packs), new Action<Pack>(this.detach_Packs));
		this._Orders = new EntitySet<Order>(new Action<Order>(this.attach_Orders), new Action<Order>(this.detach_Orders));
		this._Hospital = default(EntityRef<Hospital>);
		this._Geo = default(EntityRef<Geo>);
		this._Geo1 = default(EntityRef<Geo>);
		this._Geo2 = default(EntityRef<Geo>);
		this._Geo3 = default(EntityRef<Geo>);
		this._Geo4 = default(EntityRef<Geo>);
		this._Geo5 = default(EntityRef<Geo>);
		this._Sex = default(EntityRef<Sex>);
		OnCreated();
	}
	
	[Column(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true, IsDbGenerated=true)]
	public System.Guid ID
	{
		get
		{
			return this._ID;
		}
		set
		{
			if ((this._ID != value))
			{
				this.OnIDChanging(value);
				this.SendPropertyChanging();
				this._ID = value;
				this.SendPropertyChanged("ID");
				this.OnIDChanged();
			}
		}
	}
	
	[Column(Storage="_Name", DbType="NVarChar(MAX)")]
	public string Name
	{
		get
		{
			return this._Name;
		}
		set
		{
			if ((this._Name != value))
			{
				this.OnNameChanging(value);
				this.SendPropertyChanging();
				this._Name = value;
				this.SendPropertyChanged("Name");
				this.OnNameChanged();
			}
		}
	}
	
	[Column(Storage="_Codabar", DbType="NVarChar(MAX)")]
	public string Codabar
	{
		get
		{
			return this._Codabar;
		}
		set
		{
			if ((this._Codabar != value))
			{
				this.OnCodabarChanging(value);
				this.SendPropertyChanging();
				this._Codabar = value;
				this.SendPropertyChanged("Codabar");
				this.OnCodabarChanged();
			}
		}
	}
	
	[Column(Storage="_CMND", DbType="NVarChar(MAX)")]
	public string CMND
	{
		get
		{
			return this._CMND;
		}
		set
		{
			if ((this._CMND != value))
			{
				this.OnCMNDChanging(value);
				this.SendPropertyChanging();
				this._CMND = value;
				this.SendPropertyChanged("CMND");
				this.OnCMNDChanged();
			}
		}
	}
	
	[Column(Storage="_DOB", DbType="DateTime")]
	public System.Nullable<System.DateTime> DOB
	{
		get
		{
			return this._DOB;
		}
		set
		{
			if ((this._DOB != value))
			{
				this.OnDOBChanging(value);
				this.SendPropertyChanging();
				this._DOB = value;
				this.SendPropertyChanged("DOB");
				this.OnDOBChanged();
			}
		}
	}
	
	[Column(Storage="_SexID", DbType="UniqueIdentifier")]
	public System.Nullable<System.Guid> SexID
	{
		get
		{
			return this._SexID;
		}
		set
		{
			if ((this._SexID != value))
			{
				if (this._Sex.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnSexIDChanging(value);
				this.SendPropertyChanging();
				this._SexID = value;
				this.SendPropertyChanged("SexID");
				this.OnSexIDChanged();
			}
		}
	}
	
	[Column(Storage="_Job", DbType="NVarChar(MAX)")]
	public string Job
	{
		get
		{
			return this._Job;
		}
		set
		{
			if ((this._Job != value))
			{
				this.OnJobChanging(value);
				this.SendPropertyChanging();
				this._Job = value;
				this.SendPropertyChanged("Job");
				this.OnJobChanged();
			}
		}
	}
	
	[Column(Storage="_Email", DbType="NVarChar(MAX)")]
	public string Email
	{
		get
		{
			return this._Email;
		}
		set
		{
			if ((this._Email != value))
			{
				this.OnEmailChanging(value);
				this.SendPropertyChanging();
				this._Email = value;
				this.SendPropertyChanged("Email");
				this.OnEmailChanged();
			}
		}
	}
	
	[Column(Storage="_Phone", DbType="NVarChar(MAX)")]
	public string Phone
	{
		get
		{
			return this._Phone;
		}
		set
		{
			if ((this._Phone != value))
			{
				this.OnPhoneChanging(value);
				this.SendPropertyChanging();
				this._Phone = value;
				this.SendPropertyChanged("Phone");
				this.OnPhoneChanged();
			}
		}
	}
	
	[Column(Storage="_Note", DbType="NVarChar(MAX)")]
	public string Note
	{
		get
		{
			return this._Note;
		}
		set
		{
			if ((this._Note != value))
			{
				this.OnNoteChanging(value);
				this.SendPropertyChanging();
				this._Note = value;
				this.SendPropertyChanged("Note");
				this.OnNoteChanged();
			}
		}
	}
	
	[Column(Storage="_Photo", DbType="Image", UpdateCheck=UpdateCheck.Never)]
	public System.Data.Linq.Binary Photo
	{
		get
		{
			return this._Photo;
		}
		set
		{
			if ((this._Photo != value))
			{
				this.OnPhotoChanging(value);
				this.SendPropertyChanging();
				this._Photo = value;
				this.SendPropertyChanged("Photo");
				this.OnPhotoChanged();
			}
		}
	}
	
	[Column(Storage="_HopistalID", DbType="UniqueIdentifier")]
	public System.Nullable<System.Guid> HopistalID
	{
		get
		{
			return this._HopistalID;
		}
		set
		{
			if ((this._HopistalID != value))
			{
				if (this._Hospital.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnHopistalIDChanging(value);
				this.SendPropertyChanging();
				this._HopistalID = value;
				this.SendPropertyChanged("HopistalID");
				this.OnHopistalIDChanged();
			}
		}
	}
	
	[Column(Storage="_Status", DbType="Int")]
	public System.Nullable<int> Status
	{
		get
		{
			return this._Status;
		}
		set
		{
			if ((this._Status != value))
			{
				this.OnStatusChanging(value);
				this.SendPropertyChanging();
				this._Status = value;
				this.SendPropertyChanged("Status");
				this.OnStatusChanged();
			}
		}
	}
	
	[Column(Storage="_ResidentAddress", DbType="NVarChar(MAX)")]
	public string ResidentAddress
	{
		get
		{
			return this._ResidentAddress;
		}
		set
		{
			if ((this._ResidentAddress != value))
			{
				this.OnResidentAddressChanging(value);
				this.SendPropertyChanging();
				this._ResidentAddress = value;
				this.SendPropertyChanged("ResidentAddress");
				this.OnResidentAddressChanged();
			}
		}
	}
	
	[Column(Storage="_ResidentGeo1", DbType="UniqueIdentifier")]
	public System.Nullable<System.Guid> ResidentGeoID1
	{
		get
		{
			return this._ResidentGeo1;
		}
		set
		{
			if ((this._ResidentGeo1 != value))
			{
				if (this._Geo3.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnResidentGeoID1Changing(value);
				this.SendPropertyChanging();
				this._ResidentGeo1 = value;
				this.SendPropertyChanged("ResidentGeoID1");
				this.OnResidentGeoID1Changed();
			}
		}
	}
	
	[Column(Storage="_ResidentGeo2", DbType="UniqueIdentifier")]
	public System.Nullable<System.Guid> ResidentGeoID2
	{
		get
		{
			return this._ResidentGeo2;
		}
		set
		{
			if ((this._ResidentGeo2 != value))
			{
				if (this._Geo4.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnResidentGeoID2Changing(value);
				this.SendPropertyChanging();
				this._ResidentGeo2 = value;
				this.SendPropertyChanged("ResidentGeoID2");
				this.OnResidentGeoID2Changed();
			}
		}
	}
	
	[Column(Storage="_ResidentGeo3", DbType="UniqueIdentifier")]
	public System.Nullable<System.Guid> ResidentGeoID3
	{
		get
		{
			return this._ResidentGeo3;
		}
		set
		{
			if ((this._ResidentGeo3 != value))
			{
				if (this._Geo5.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnResidentGeoID3Changing(value);
				this.SendPropertyChanging();
				this._ResidentGeo3 = value;
				this.SendPropertyChanged("ResidentGeoID3");
				this.OnResidentGeoID3Changed();
			}
		}
	}
	
	[Column(Storage="_MailingAddress", DbType="NVarChar(MAX)")]
	public string MailingAddress
	{
		get
		{
			return this._MailingAddress;
		}
		set
		{
			if ((this._MailingAddress != value))
			{
				this.OnMailingAddressChanging(value);
				this.SendPropertyChanging();
				this._MailingAddress = value;
				this.SendPropertyChanged("MailingAddress");
				this.OnMailingAddressChanged();
			}
		}
	}
	
	[Column(Storage="_MailingGeo1", DbType="UniqueIdentifier")]
	public System.Nullable<System.Guid> MailingGeoID1
	{
		get
		{
			return this._MailingGeo1;
		}
		set
		{
			if ((this._MailingGeo1 != value))
			{
				if (this._Geo.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnMailingGeoID1Changing(value);
				this.SendPropertyChanging();
				this._MailingGeo1 = value;
				this.SendPropertyChanged("MailingGeoID1");
				this.OnMailingGeoID1Changed();
			}
		}
	}
	
	[Column(Storage="_MailingGeo2", DbType="UniqueIdentifier")]
	public System.Nullable<System.Guid> MailingGeoID2
	{
		get
		{
			return this._MailingGeo2;
		}
		set
		{
			if ((this._MailingGeo2 != value))
			{
				if (this._Geo1.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnMailingGeoID2Changing(value);
				this.SendPropertyChanging();
				this._MailingGeo2 = value;
				this.SendPropertyChanged("MailingGeoID2");
				this.OnMailingGeoID2Changed();
			}
		}
	}
	
	[Column(Storage="_MailingGeo3", DbType="UniqueIdentifier")]
	public System.Nullable<System.Guid> MailingGeoID3
	{
		get
		{
			return this._MailingGeo3;
		}
		set
		{
			if ((this._MailingGeo3 != value))
			{
				if (this._Geo2.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnMailingGeoID3Changing(value);
				this.SendPropertyChanging();
				this._MailingGeo3 = value;
				this.SendPropertyChanged("MailingGeoID3");
				this.OnMailingGeoID3Changed();
			}
		}
	}
	
	[Column(Storage="_EnableMailingAddress", DbType="Bit")]
	public System.Nullable<bool> EnableMailingAddress
	{
		get
		{
			return this._EnableMailingAddress;
		}
		set
		{
			if ((this._EnableMailingAddress != value))
			{
				this.OnEnableMailingAddressChanging(value);
				this.SendPropertyChanging();
				this._EnableMailingAddress = value;
				this.SendPropertyChanged("EnableMailingAddress");
				this.OnEnableMailingAddressChanged();
			}
		}
	}
	
	[Column(Storage="_NameNoDiacritics", DbType="NVarChar(MAX)")]
	public string NameNoDiacritics
	{
		get
		{
			return this._NameNoDiacritics;
		}
		set
		{
			if ((this._NameNoDiacritics != value))
			{
				this.OnNameNoDiacriticsChanging(value);
				this.SendPropertyChanging();
				this._NameNoDiacritics = value;
				this.SendPropertyChanged("NameNoDiacritics");
				this.OnNameNoDiacriticsChanged();
			}
		}
	}
	
	[Association(Name="People_PeopleStayIn", Storage="_PeopleStayIns", ThisKey="ID", OtherKey="PeopleID")]
	public EntitySet<PeopleStayIn> PeopleStayIns
	{
		get
		{
			return this._PeopleStayIns;
		}
		set
		{
			this._PeopleStayIns.Assign(value);
		}
	}
	
	[Association(Name="People_Pack", Storage="_Packs", ThisKey="ID", OtherKey="PeopleID")]
	public EntitySet<Pack> Packs
	{
		get
		{
			return this._Packs;
		}
		set
		{
			this._Packs.Assign(value);
		}
	}
	
	[Association(Name="People_Order", Storage="_Orders", ThisKey="ID", OtherKey="PeopleID")]
	public EntitySet<Order> Orders
	{
		get
		{
			return this._Orders;
		}
		set
		{
			this._Orders.Assign(value);
		}
	}
	
	[Association(Name="Hospital_People", Storage="_Hospital", ThisKey="HopistalID", OtherKey="ID", IsForeignKey=true)]
	public Hospital Hospital
	{
		get
		{
			return this._Hospital.Entity;
		}
		set
		{
			Hospital previousValue = this._Hospital.Entity;
			if (((previousValue != value) 
						|| (this._Hospital.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Hospital.Entity = null;
					previousValue.Peoples.Remove(this);
				}
				this._Hospital.Entity = value;
				if ((value != null))
				{
					value.Peoples.Add(this);
					this._HopistalID = value.ID;
				}
				else
				{
					this._HopistalID = default(Nullable<System.Guid>);
				}
				this.SendPropertyChanged("Hospital");
			}
		}
	}
	
	[Association(Name="Geo_People", Storage="_Geo", ThisKey="MailingGeoID1", OtherKey="ID", IsForeignKey=true)]
	public Geo MailingGeo1
	{
		get
		{
			return this._Geo.Entity;
		}
		set
		{
			Geo previousValue = this._Geo.Entity;
			if (((previousValue != value) 
						|| (this._Geo.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Geo.Entity = null;
					previousValue.PeopleMailingGeo1.Remove(this);
				}
				this._Geo.Entity = value;
				if ((value != null))
				{
					value.PeopleMailingGeo1.Add(this);
					this._MailingGeo1 = value.ID;
				}
				else
				{
					this._MailingGeo1 = default(Nullable<System.Guid>);
				}
				this.SendPropertyChanged("MailingGeo1");
			}
		}
	}
	
	[Association(Name="Geo_People1", Storage="_Geo1", ThisKey="MailingGeoID2", OtherKey="ID", IsForeignKey=true)]
	public Geo MailingGeo2
	{
		get
		{
			return this._Geo1.Entity;
		}
		set
		{
			Geo previousValue = this._Geo1.Entity;
			if (((previousValue != value) 
						|| (this._Geo1.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Geo1.Entity = null;
					previousValue.PeopleMailingGeo2.Remove(this);
				}
				this._Geo1.Entity = value;
				if ((value != null))
				{
					value.PeopleMailingGeo2.Add(this);
					this._MailingGeo2 = value.ID;
				}
				else
				{
					this._MailingGeo2 = default(Nullable<System.Guid>);
				}
				this.SendPropertyChanged("MailingGeo2");
			}
		}
	}
	
	[Association(Name="Geo_People2", Storage="_Geo2", ThisKey="MailingGeoID3", OtherKey="ID", IsForeignKey=true)]
	public Geo MailingGeo3
	{
		get
		{
			return this._Geo2.Entity;
		}
		set
		{
			Geo previousValue = this._Geo2.Entity;
			if (((previousValue != value) 
						|| (this._Geo2.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Geo2.Entity = null;
					previousValue.PeopleMailingGeo3.Remove(this);
				}
				this._Geo2.Entity = value;
				if ((value != null))
				{
					value.PeopleMailingGeo3.Add(this);
					this._MailingGeo3 = value.ID;
				}
				else
				{
					this._MailingGeo3 = default(Nullable<System.Guid>);
				}
				this.SendPropertyChanged("MailingGeo3");
			}
		}
	}
	
	[Association(Name="Geo_People3", Storage="_Geo3", ThisKey="ResidentGeoID1", OtherKey="ID", IsForeignKey=true)]
	public Geo ResidentGeo1
	{
		get
		{
			return this._Geo3.Entity;
		}
		set
		{
			Geo previousValue = this._Geo3.Entity;
			if (((previousValue != value) 
						|| (this._Geo3.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Geo3.Entity = null;
					previousValue.PeopleResidentGeo1.Remove(this);
				}
				this._Geo3.Entity = value;
				if ((value != null))
				{
					value.PeopleResidentGeo1.Add(this);
					this._ResidentGeo1 = value.ID;
				}
				else
				{
					this._ResidentGeo1 = default(Nullable<System.Guid>);
				}
				this.SendPropertyChanged("ResidentGeo1");
			}
		}
	}
	
	[Association(Name="Geo_People4", Storage="_Geo4", ThisKey="ResidentGeoID2", OtherKey="ID", IsForeignKey=true)]
	public Geo ResidentGeo2
	{
		get
		{
			return this._Geo4.Entity;
		}
		set
		{
			Geo previousValue = this._Geo4.Entity;
			if (((previousValue != value) 
						|| (this._Geo4.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Geo4.Entity = null;
					previousValue.PeopleResidentGeo2.Remove(this);
				}
				this._Geo4.Entity = value;
				if ((value != null))
				{
					value.PeopleResidentGeo2.Add(this);
					this._ResidentGeo2 = value.ID;
				}
				else
				{
					this._ResidentGeo2 = default(Nullable<System.Guid>);
				}
				this.SendPropertyChanged("ResidentGeo2");
			}
		}
	}
	
	[Association(Name="Geo_People5", Storage="_Geo5", ThisKey="ResidentGeoID3", OtherKey="ID", IsForeignKey=true)]
	public Geo ResidentGeo3
	{
		get
		{
			return this._Geo5.Entity;
		}
		set
		{
			Geo previousValue = this._Geo5.Entity;
			if (((previousValue != value) 
						|| (this._Geo5.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Geo5.Entity = null;
					previousValue.PeopleResidentGeo3.Remove(this);
				}
				this._Geo5.Entity = value;
				if ((value != null))
				{
					value.PeopleResidentGeo3.Add(this);
					this._ResidentGeo3 = value.ID;
				}
				else
				{
					this._ResidentGeo3 = default(Nullable<System.Guid>);
				}
				this.SendPropertyChanged("ResidentGeo3");
			}
		}
	}
	
	[Association(Name="Sex_People", Storage="_Sex", ThisKey="SexID", OtherKey="ID", IsForeignKey=true)]
	public Sex Sex
	{
		get
		{
			return this._Sex.Entity;
		}
		set
		{
			Sex previousValue = this._Sex.Entity;
			if (((previousValue != value) 
						|| (this._Sex.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Sex.Entity = null;
					previousValue.Peoples.Remove(this);
				}
				this._Sex.Entity = value;
				if ((value != null))
				{
					value.Peoples.Add(this);
					this._SexID = value.ID;
				}
				else
				{
					this._SexID = default(Nullable<System.Guid>);
				}
				this.SendPropertyChanged("Sex");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_PeopleStayIns(PeopleStayIn entity)
	{
		this.SendPropertyChanging();
		entity.People = this;
	}
	
	private void detach_PeopleStayIns(PeopleStayIn entity)
	{
		this.SendPropertyChanging();
		entity.People = null;
	}
	
	private void attach_Packs(Pack entity)
	{
		this.SendPropertyChanging();
		entity.People = this;
	}
	
	private void detach_Packs(Pack entity)
	{
		this.SendPropertyChanging();
		entity.People = null;
	}
	
	private void attach_Orders(Order entity)
	{
		this.SendPropertyChanging();
		entity.People = this;
	}
	
	private void detach_Orders(Order entity)
	{
		this.SendPropertyChanging();
		entity.People = null;
	}
}

[Table(Name="dbo.Pack")]
public partial class Pack : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private System.Guid _ID;
	
	private string _Codabar;
	
	private System.Nullable<System.Guid> _PeopleID;
	
	private Pack.StatusX _Status;
	
	private System.Nullable<System.DateTime> _CollectedDate;
	
	private System.Nullable<int> _Volume;
	
	private System.Nullable<System.Guid> _HospitalID;
	
	private System.Nullable<int> _CampaignID;
	
	private string _Note;
	
	private int _Autonum;
	
	private System.Nullable<int> _SourceID;
	
	private System.Nullable<int> _ComponentID;
	
	private string _Actor;
	
	private EntitySet<TestResult> _TestResults;
	
	private EntitySet<BloodType> _BloodTypes;
	
	private EntitySet<PackStatusHistory> _PackStatusHistories;
	
	private EntitySet<PackResultHistory> _PackResultHistories;
	
	private EntitySet<PackOrder> _PackOrders;
	
	private EntitySet<PackExtract> _PackExtractsBySource;
	
	private EntitySet<PackExtract> _PackExtractsByExtract;
	
	private EntityRef<Hospital> _Hospital;
	
	private EntityRef<People> _People;
	
	private EntityRef<TestDef> _Component;
	
	private EntityRef<TestDef> _Source;
	
	private EntityRef<Campaign> _Campaign;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(System.Guid value);
    partial void OnIDChanged();
    partial void OnCodabarChanging(string value);
    partial void OnCodabarChanged();
    partial void OnPeopleIDChanging(System.Nullable<System.Guid> value);
    partial void OnPeopleIDChanged();
    partial void OnStatusChanging(Pack.StatusX value);
    partial void OnStatusChanged();
    partial void OnCollectedDateChanging(System.Nullable<System.DateTime> value);
    partial void OnCollectedDateChanged();
    partial void OnVolumeChanging(System.Nullable<int> value);
    partial void OnVolumeChanged();
    partial void OnHospitalIDChanging(System.Nullable<System.Guid> value);
    partial void OnHospitalIDChanged();
    partial void OnCampaignIDChanging(System.Nullable<int> value);
    partial void OnCampaignIDChanged();
    partial void OnNoteChanging(string value);
    partial void OnNoteChanged();
    partial void OnAutonumChanging(int value);
    partial void OnAutonumChanged();
    partial void OnSourceIDChanging(System.Nullable<int> value);
    partial void OnSourceIDChanged();
    partial void OnComponentIDChanging(System.Nullable<int> value);
    partial void OnComponentIDChanged();
    partial void OnActorChanging(string value);
    partial void OnActorChanged();
    #endregion
	
	public Pack()
	{
		this._TestResults = new EntitySet<TestResult>(new Action<TestResult>(this.attach_TestResults), new Action<TestResult>(this.detach_TestResults));
		this._BloodTypes = new EntitySet<BloodType>(new Action<BloodType>(this.attach_BloodTypes), new Action<BloodType>(this.detach_BloodTypes));
		this._PackStatusHistories = new EntitySet<PackStatusHistory>(new Action<PackStatusHistory>(this.attach_PackStatusHistories), new Action<PackStatusHistory>(this.detach_PackStatusHistories));
		this._PackResultHistories = new EntitySet<PackResultHistory>(new Action<PackResultHistory>(this.attach_PackResultHistories), new Action<PackResultHistory>(this.detach_PackResultHistories));
		this._PackOrders = new EntitySet<PackOrder>(new Action<PackOrder>(this.attach_PackOrders), new Action<PackOrder>(this.detach_PackOrders));
		this._PackExtractsBySource = new EntitySet<PackExtract>(new Action<PackExtract>(this.attach_PackExtractsBySource), new Action<PackExtract>(this.detach_PackExtractsBySource));
		this._PackExtractsByExtract = new EntitySet<PackExtract>(new Action<PackExtract>(this.attach_PackExtractsByExtract), new Action<PackExtract>(this.detach_PackExtractsByExtract));
		this._Hospital = default(EntityRef<Hospital>);
		this._People = default(EntityRef<People>);
		this._Component = default(EntityRef<TestDef>);
		this._Source = default(EntityRef<TestDef>);
		this._Campaign = default(EntityRef<Campaign>);
		OnCreated();
	}
	
	[Column(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true, IsDbGenerated=true)]
	public System.Guid ID
	{
		get
		{
			return this._ID;
		}
		set
		{
			if ((this._ID != value))
			{
				this.OnIDChanging(value);
				this.SendPropertyChanging();
				this._ID = value;
				this.SendPropertyChanged("ID");
				this.OnIDChanged();
			}
		}
	}
	
	[Column(Storage="_Codabar", DbType="NVarChar(MAX)")]
	public string Codabar
	{
		get
		{
			return this._Codabar;
		}
		set
		{
			if ((this._Codabar != value))
			{
				this.OnCodabarChanging(value);
				this.SendPropertyChanging();
				this._Codabar = value;
				this.SendPropertyChanged("Codabar");
				this.OnCodabarChanged();
			}
		}
	}
	
	[Column(Storage="_PeopleID", DbType="UniqueIdentifier")]
	public System.Nullable<System.Guid> PeopleID
	{
		get
		{
			return this._PeopleID;
		}
		set
		{
			if ((this._PeopleID != value))
			{
				if (this._People.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnPeopleIDChanging(value);
				this.SendPropertyChanging();
				this._PeopleID = value;
				this.SendPropertyChanged("PeopleID");
				this.OnPeopleIDChanged();
			}
		}
	}
	
	[Column(Storage="_Status", DbType="Int", CanBeNull=true)]
	public Pack.StatusX Status
	{
		get
		{
			return this._Status;
		}
		set
		{
			if ((this._Status != value))
			{
				this.OnStatusChanging(value);
				this.SendPropertyChanging();
				this._Status = value;
				this.SendPropertyChanged("Status");
				this.OnStatusChanged();
			}
		}
	}
	
	[Column(Storage="_CollectedDate", DbType="DateTime")]
	public System.Nullable<System.DateTime> CollectedDate
	{
		get
		{
			return this._CollectedDate;
		}
		set
		{
			if ((this._CollectedDate != value))
			{
				this.OnCollectedDateChanging(value);
				this.SendPropertyChanging();
				this._CollectedDate = value;
				this.SendPropertyChanged("CollectedDate");
				this.OnCollectedDateChanged();
			}
		}
	}
	
	[Column(Storage="_Volume", DbType="Int")]
	public System.Nullable<int> Volume
	{
		get
		{
			return this._Volume;
		}
		set
		{
			if ((this._Volume != value))
			{
				this.OnVolumeChanging(value);
				this.SendPropertyChanging();
				this._Volume = value;
				this.SendPropertyChanged("Volume");
				this.OnVolumeChanged();
			}
		}
	}
	
	[Column(Storage="_HospitalID", DbType="UniqueIdentifier")]
	public System.Nullable<System.Guid> HospitalID
	{
		get
		{
			return this._HospitalID;
		}
		set
		{
			if ((this._HospitalID != value))
			{
				if (this._Hospital.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnHospitalIDChanging(value);
				this.SendPropertyChanging();
				this._HospitalID = value;
				this.SendPropertyChanged("HospitalID");
				this.OnHospitalIDChanged();
			}
		}
	}
	
	[Column(Storage="_CampaignID", DbType="Int")]
	public System.Nullable<int> CampaignID
	{
		get
		{
			return this._CampaignID;
		}
		set
		{
			if ((this._CampaignID != value))
			{
				if (this._Campaign.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnCampaignIDChanging(value);
				this.SendPropertyChanging();
				this._CampaignID = value;
				this.SendPropertyChanged("CampaignID");
				this.OnCampaignIDChanged();
			}
		}
	}
	
	[Column(Storage="_Note", DbType="NVarChar(MAX)")]
	public string Note
	{
		get
		{
			return this._Note;
		}
		set
		{
			if ((this._Note != value))
			{
				this.OnNoteChanging(value);
				this.SendPropertyChanging();
				this._Note = value;
				this.SendPropertyChanged("Note");
				this.OnNoteChanged();
			}
		}
	}
	
	[Column(Storage="_Autonum", AutoSync=AutoSync.Always, DbType="Int NOT NULL IDENTITY", IsDbGenerated=true)]
	public int Autonum
	{
		get
		{
			return this._Autonum;
		}
		set
		{
			if ((this._Autonum != value))
			{
				this.OnAutonumChanging(value);
				this.SendPropertyChanging();
				this._Autonum = value;
				this.SendPropertyChanged("Autonum");
				this.OnAutonumChanged();
			}
		}
	}
	
	[Column(Storage="_SourceID", DbType="Int")]
	public System.Nullable<int> SourceID
	{
		get
		{
			return this._SourceID;
		}
		set
		{
			if ((this._SourceID != value))
			{
				if (this._Source.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnSourceIDChanging(value);
				this.SendPropertyChanging();
				this._SourceID = value;
				this.SendPropertyChanged("SourceID");
				this.OnSourceIDChanged();
			}
		}
	}
	
	[Column(Storage="_ComponentID", DbType="Int")]
	public System.Nullable<int> ComponentID
	{
		get
		{
			return this._ComponentID;
		}
		set
		{
			if ((this._ComponentID != value))
			{
				if (this._Component.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnComponentIDChanging(value);
				this.SendPropertyChanging();
				this._ComponentID = value;
				this.SendPropertyChanged("ComponentID");
				this.OnComponentIDChanged();
			}
		}
	}
	
	[Column(Storage="_Actor", DbType="NVarChar(MAX)")]
	public string Actor
	{
		get
		{
			return this._Actor;
		}
		set
		{
			if ((this._Actor != value))
			{
				this.OnActorChanging(value);
				this.SendPropertyChanging();
				this._Actor = value;
				this.SendPropertyChanged("Actor");
				this.OnActorChanged();
			}
		}
	}
	
	[Association(Name="Pack_TestResult", Storage="_TestResults", ThisKey="ID", OtherKey="PackID")]
	public EntitySet<TestResult> TestResults
	{
		get
		{
			return this._TestResults;
		}
		set
		{
			this._TestResults.Assign(value);
		}
	}
	
	[Association(Name="Pack_BloodType", Storage="_BloodTypes", ThisKey="ID", OtherKey="PackID")]
	public EntitySet<BloodType> BloodTypes
	{
		get
		{
			return this._BloodTypes;
		}
		set
		{
			this._BloodTypes.Assign(value);
		}
	}
	
	[Association(Name="Pack_PackStatusHistory", Storage="_PackStatusHistories", ThisKey="ID", OtherKey="PackID")]
	public EntitySet<PackStatusHistory> PackStatusHistories
	{
		get
		{
			return this._PackStatusHistories;
		}
		set
		{
			this._PackStatusHistories.Assign(value);
		}
	}
	
	[Association(Name="Pack_PackResultHistory", Storage="_PackResultHistories", ThisKey="ID", OtherKey="PackID")]
	public EntitySet<PackResultHistory> PackResultHistories
	{
		get
		{
			return this._PackResultHistories;
		}
		set
		{
			this._PackResultHistories.Assign(value);
		}
	}
	
	[Association(Name="Pack_PackOrder", Storage="_PackOrders", ThisKey="ID", OtherKey="PackID")]
	public EntitySet<PackOrder> PackOrders
	{
		get
		{
			return this._PackOrders;
		}
		set
		{
			this._PackOrders.Assign(value);
		}
	}
	
	[Association(Name="Pack_PackExtract", Storage="_PackExtractsBySource", ThisKey="ID", OtherKey="SourcePackID")]
	public EntitySet<PackExtract> PackExtractsBySource
	{
		get
		{
			return this._PackExtractsBySource;
		}
		set
		{
			this._PackExtractsBySource.Assign(value);
		}
	}
	
	[Association(Name="Pack_PackExtract1", Storage="_PackExtractsByExtract", ThisKey="ID", OtherKey="ExtractPackID")]
	public EntitySet<PackExtract> PackExtractsByExtract
	{
		get
		{
			return this._PackExtractsByExtract;
		}
		set
		{
			this._PackExtractsByExtract.Assign(value);
		}
	}
	
	[Association(Name="Hospital_Pack", Storage="_Hospital", ThisKey="HospitalID", OtherKey="ID", IsForeignKey=true)]
	public Hospital Hospital
	{
		get
		{
			return this._Hospital.Entity;
		}
		set
		{
			Hospital previousValue = this._Hospital.Entity;
			if (((previousValue != value) 
						|| (this._Hospital.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Hospital.Entity = null;
					previousValue.Packs.Remove(this);
				}
				this._Hospital.Entity = value;
				if ((value != null))
				{
					value.Packs.Add(this);
					this._HospitalID = value.ID;
				}
				else
				{
					this._HospitalID = default(Nullable<System.Guid>);
				}
				this.SendPropertyChanged("Hospital");
			}
		}
	}
	
	[Association(Name="People_Pack", Storage="_People", ThisKey="PeopleID", OtherKey="ID", IsForeignKey=true)]
	public People People
	{
		get
		{
			return this._People.Entity;
		}
		set
		{
			People previousValue = this._People.Entity;
			if (((previousValue != value) 
						|| (this._People.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._People.Entity = null;
					previousValue.Packs.Remove(this);
				}
				this._People.Entity = value;
				if ((value != null))
				{
					value.Packs.Add(this);
					this._PeopleID = value.ID;
				}
				else
				{
					this._PeopleID = default(Nullable<System.Guid>);
				}
				this.SendPropertyChanged("People");
			}
		}
	}
	
	[Association(Name="TestDef_Pack", Storage="_Component", ThisKey="ComponentID", OtherKey="ID", IsForeignKey=true)]
	public TestDef Component
	{
		get
		{
			return this._Component.Entity;
		}
		set
		{
			TestDef previousValue = this._Component.Entity;
			if (((previousValue != value) 
						|| (this._Component.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Component.Entity = null;
					previousValue.PacksByComponent.Remove(this);
				}
				this._Component.Entity = value;
				if ((value != null))
				{
					value.PacksByComponent.Add(this);
					this._ComponentID = value.ID;
				}
				else
				{
					this._ComponentID = default(Nullable<int>);
				}
				this.SendPropertyChanged("Component");
			}
		}
	}
	
	[Association(Name="TestDef_Pack1", Storage="_Source", ThisKey="SourceID", OtherKey="ID", IsForeignKey=true)]
	public TestDef Source
	{
		get
		{
			return this._Source.Entity;
		}
		set
		{
			TestDef previousValue = this._Source.Entity;
			if (((previousValue != value) 
						|| (this._Source.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Source.Entity = null;
					previousValue.PacksBySource.Remove(this);
				}
				this._Source.Entity = value;
				if ((value != null))
				{
					value.PacksBySource.Add(this);
					this._SourceID = value.ID;
				}
				else
				{
					this._SourceID = default(Nullable<int>);
				}
				this.SendPropertyChanged("Source");
			}
		}
	}
	
	[Association(Name="Campaign_Pack", Storage="_Campaign", ThisKey="CampaignID", OtherKey="ID", IsForeignKey=true)]
	public Campaign Campaign
	{
		get
		{
			return this._Campaign.Entity;
		}
		set
		{
			Campaign previousValue = this._Campaign.Entity;
			if (((previousValue != value) 
						|| (this._Campaign.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Campaign.Entity = null;
					previousValue.Packs.Remove(this);
				}
				this._Campaign.Entity = value;
				if ((value != null))
				{
					value.Packs.Add(this);
					this._CampaignID = value.ID;
				}
				else
				{
					this._CampaignID = default(Nullable<int>);
				}
				this.SendPropertyChanged("Campaign");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_TestResults(TestResult entity)
	{
		this.SendPropertyChanging();
		entity.Pack = this;
	}
	
	private void detach_TestResults(TestResult entity)
	{
		this.SendPropertyChanging();
		entity.Pack = null;
	}
	
	private void attach_BloodTypes(BloodType entity)
	{
		this.SendPropertyChanging();
		entity.Pack = this;
	}
	
	private void detach_BloodTypes(BloodType entity)
	{
		this.SendPropertyChanging();
		entity.Pack = null;
	}
	
	private void attach_PackStatusHistories(PackStatusHistory entity)
	{
		this.SendPropertyChanging();
		entity.Pack = this;
	}
	
	private void detach_PackStatusHistories(PackStatusHistory entity)
	{
		this.SendPropertyChanging();
		entity.Pack = null;
	}
	
	private void attach_PackResultHistories(PackResultHistory entity)
	{
		this.SendPropertyChanging();
		entity.Pack = this;
	}
	
	private void detach_PackResultHistories(PackResultHistory entity)
	{
		this.SendPropertyChanging();
		entity.Pack = null;
	}
	
	private void attach_PackOrders(PackOrder entity)
	{
		this.SendPropertyChanging();
		entity.Pack = this;
	}
	
	private void detach_PackOrders(PackOrder entity)
	{
		this.SendPropertyChanging();
		entity.Pack = null;
	}
	
	private void attach_PackExtractsBySource(PackExtract entity)
	{
		this.SendPropertyChanging();
		entity.SourcePack = this;
	}
	
	private void detach_PackExtractsBySource(PackExtract entity)
	{
		this.SendPropertyChanging();
		entity.SourcePack = null;
	}
	
	private void attach_PackExtractsByExtract(PackExtract entity)
	{
		this.SendPropertyChanging();
		entity.ExtractPack = this;
	}
	
	private void detach_PackExtractsByExtract(PackExtract entity)
	{
		this.SendPropertyChanging();
		entity.ExtractPack = null;
	}
}

[Table(Name="dbo.TestResult")]
public partial class TestResult : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private System.Guid _ID;
	
	private System.Nullable<System.Guid> _PackID;
	
	private System.Nullable<int> _Syphilis;
	
	private System.Nullable<int> _HBsAg;
	
	private System.Nullable<int> _HCV;
	
	private System.Nullable<int> _HIV;
	
	private System.Nullable<int> _Malaria;
	
	private System.Nullable<System.DateTime> _CommitDate;
	
	private System.Nullable<int> _Times;
	
	private string _Actor;
	
	private EntityRef<Pack> _Pack;
	
	private EntityRef<TestDef> _TestDef;
	
	private EntityRef<TestDef> _TestDef1;
	
	private EntityRef<TestDef> _TestDef2;
	
	private EntityRef<TestDef> _TestDef3;
	
	private EntityRef<TestDef> _TestDef4;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(System.Guid value);
    partial void OnIDChanged();
    partial void OnPackIDChanging(System.Nullable<System.Guid> value);
    partial void OnPackIDChanged();
    partial void OnSyphilisIDChanging(System.Nullable<int> value);
    partial void OnSyphilisIDChanged();
    partial void OnHBsAgIDChanging(System.Nullable<int> value);
    partial void OnHBsAgIDChanged();
    partial void OnHCVIDChanging(System.Nullable<int> value);
    partial void OnHCVIDChanged();
    partial void OnHIVIDChanging(System.Nullable<int> value);
    partial void OnHIVIDChanged();
    partial void OnMalariaIDChanging(System.Nullable<int> value);
    partial void OnMalariaIDChanged();
    partial void OnCommitDateChanging(System.Nullable<System.DateTime> value);
    partial void OnCommitDateChanged();
    partial void OnTimesChanging(System.Nullable<int> value);
    partial void OnTimesChanged();
    partial void OnActorChanging(string value);
    partial void OnActorChanged();
    #endregion
	
	public TestResult()
	{
		this._Pack = default(EntityRef<Pack>);
		this._TestDef = default(EntityRef<TestDef>);
		this._TestDef1 = default(EntityRef<TestDef>);
		this._TestDef2 = default(EntityRef<TestDef>);
		this._TestDef3 = default(EntityRef<TestDef>);
		this._TestDef4 = default(EntityRef<TestDef>);
		OnCreated();
	}
	
	[Column(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true, IsDbGenerated=true)]
	public System.Guid ID
	{
		get
		{
			return this._ID;
		}
		set
		{
			if ((this._ID != value))
			{
				this.OnIDChanging(value);
				this.SendPropertyChanging();
				this._ID = value;
				this.SendPropertyChanged("ID");
				this.OnIDChanged();
			}
		}
	}
	
	[Column(Storage="_PackID", DbType="UniqueIdentifier")]
	public System.Nullable<System.Guid> PackID
	{
		get
		{
			return this._PackID;
		}
		set
		{
			if ((this._PackID != value))
			{
				if (this._Pack.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnPackIDChanging(value);
				this.SendPropertyChanging();
				this._PackID = value;
				this.SendPropertyChanged("PackID");
				this.OnPackIDChanged();
			}
		}
	}
	
	[Column(Storage="_Syphilis", DbType="Int")]
	public System.Nullable<int> SyphilisID
	{
		get
		{
			return this._Syphilis;
		}
		set
		{
			if ((this._Syphilis != value))
			{
				if (this._TestDef4.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnSyphilisIDChanging(value);
				this.SendPropertyChanging();
				this._Syphilis = value;
				this.SendPropertyChanged("SyphilisID");
				this.OnSyphilisIDChanged();
			}
		}
	}
	
	[Column(Storage="_HBsAg", DbType="Int")]
	public System.Nullable<int> HBsAgID
	{
		get
		{
			return this._HBsAg;
		}
		set
		{
			if ((this._HBsAg != value))
			{
				if (this._TestDef.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnHBsAgIDChanging(value);
				this.SendPropertyChanging();
				this._HBsAg = value;
				this.SendPropertyChanged("HBsAgID");
				this.OnHBsAgIDChanged();
			}
		}
	}
	
	[Column(Storage="_HCV", DbType="Int")]
	public System.Nullable<int> HCVID
	{
		get
		{
			return this._HCV;
		}
		set
		{
			if ((this._HCV != value))
			{
				if (this._TestDef1.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnHCVIDChanging(value);
				this.SendPropertyChanging();
				this._HCV = value;
				this.SendPropertyChanged("HCVID");
				this.OnHCVIDChanged();
			}
		}
	}
	
	[Column(Storage="_HIV", DbType="Int")]
	public System.Nullable<int> HIVID
	{
		get
		{
			return this._HIV;
		}
		set
		{
			if ((this._HIV != value))
			{
				if (this._TestDef2.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnHIVIDChanging(value);
				this.SendPropertyChanging();
				this._HIV = value;
				this.SendPropertyChanged("HIVID");
				this.OnHIVIDChanged();
			}
		}
	}
	
	[Column(Storage="_Malaria", DbType="Int")]
	public System.Nullable<int> MalariaID
	{
		get
		{
			return this._Malaria;
		}
		set
		{
			if ((this._Malaria != value))
			{
				if (this._TestDef3.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnMalariaIDChanging(value);
				this.SendPropertyChanging();
				this._Malaria = value;
				this.SendPropertyChanged("MalariaID");
				this.OnMalariaIDChanged();
			}
		}
	}
	
	[Column(Storage="_CommitDate", DbType="DateTime")]
	public System.Nullable<System.DateTime> CommitDate
	{
		get
		{
			return this._CommitDate;
		}
		set
		{
			if ((this._CommitDate != value))
			{
				this.OnCommitDateChanging(value);
				this.SendPropertyChanging();
				this._CommitDate = value;
				this.SendPropertyChanged("CommitDate");
				this.OnCommitDateChanged();
			}
		}
	}
	
	[Column(Storage="_Times", DbType="Int")]
	public System.Nullable<int> Times
	{
		get
		{
			return this._Times;
		}
		set
		{
			if ((this._Times != value))
			{
				this.OnTimesChanging(value);
				this.SendPropertyChanging();
				this._Times = value;
				this.SendPropertyChanged("Times");
				this.OnTimesChanged();
			}
		}
	}
	
	[Column(Storage="_Actor", DbType="NVarChar(MAX)")]
	public string Actor
	{
		get
		{
			return this._Actor;
		}
		set
		{
			if ((this._Actor != value))
			{
				this.OnActorChanging(value);
				this.SendPropertyChanging();
				this._Actor = value;
				this.SendPropertyChanged("Actor");
				this.OnActorChanged();
			}
		}
	}
	
	[Association(Name="Pack_TestResult", Storage="_Pack", ThisKey="PackID", OtherKey="ID", IsForeignKey=true)]
	public Pack Pack
	{
		get
		{
			return this._Pack.Entity;
		}
		set
		{
			Pack previousValue = this._Pack.Entity;
			if (((previousValue != value) 
						|| (this._Pack.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Pack.Entity = null;
					previousValue.TestResults.Remove(this);
				}
				this._Pack.Entity = value;
				if ((value != null))
				{
					value.TestResults.Add(this);
					this._PackID = value.ID;
				}
				else
				{
					this._PackID = default(Nullable<System.Guid>);
				}
				this.SendPropertyChanged("Pack");
			}
		}
	}
	
	[Association(Name="TestDef_TestResult", Storage="_TestDef", ThisKey="HBsAgID", OtherKey="ID", IsForeignKey=true)]
	public TestDef HBsAg
	{
		get
		{
			return this._TestDef.Entity;
		}
		set
		{
			TestDef previousValue = this._TestDef.Entity;
			if (((previousValue != value) 
						|| (this._TestDef.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._TestDef.Entity = null;
					previousValue.TestResultsByHBsAg.Remove(this);
				}
				this._TestDef.Entity = value;
				if ((value != null))
				{
					value.TestResultsByHBsAg.Add(this);
					this._HBsAg = value.ID;
				}
				else
				{
					this._HBsAg = default(Nullable<int>);
				}
				this.SendPropertyChanged("HBsAg");
			}
		}
	}
	
	[Association(Name="TestDef_TestResult1", Storage="_TestDef1", ThisKey="HCVID", OtherKey="ID", IsForeignKey=true)]
	public TestDef HCV
	{
		get
		{
			return this._TestDef1.Entity;
		}
		set
		{
			TestDef previousValue = this._TestDef1.Entity;
			if (((previousValue != value) 
						|| (this._TestDef1.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._TestDef1.Entity = null;
					previousValue.TestResultsByHCV.Remove(this);
				}
				this._TestDef1.Entity = value;
				if ((value != null))
				{
					value.TestResultsByHCV.Add(this);
					this._HCV = value.ID;
				}
				else
				{
					this._HCV = default(Nullable<int>);
				}
				this.SendPropertyChanged("HCV");
			}
		}
	}
	
	[Association(Name="TestDef_TestResult2", Storage="_TestDef2", ThisKey="HIVID", OtherKey="ID", IsForeignKey=true)]
	public TestDef HIV
	{
		get
		{
			return this._TestDef2.Entity;
		}
		set
		{
			TestDef previousValue = this._TestDef2.Entity;
			if (((previousValue != value) 
						|| (this._TestDef2.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._TestDef2.Entity = null;
					previousValue.TestResultsByHIV.Remove(this);
				}
				this._TestDef2.Entity = value;
				if ((value != null))
				{
					value.TestResultsByHIV.Add(this);
					this._HIV = value.ID;
				}
				else
				{
					this._HIV = default(Nullable<int>);
				}
				this.SendPropertyChanged("HIV");
			}
		}
	}
	
	[Association(Name="TestDef_TestResult3", Storage="_TestDef3", ThisKey="MalariaID", OtherKey="ID", IsForeignKey=true)]
	public TestDef Malaria
	{
		get
		{
			return this._TestDef3.Entity;
		}
		set
		{
			TestDef previousValue = this._TestDef3.Entity;
			if (((previousValue != value) 
						|| (this._TestDef3.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._TestDef3.Entity = null;
					previousValue.TestResultsByMalaria.Remove(this);
				}
				this._TestDef3.Entity = value;
				if ((value != null))
				{
					value.TestResultsByMalaria.Add(this);
					this._Malaria = value.ID;
				}
				else
				{
					this._Malaria = default(Nullable<int>);
				}
				this.SendPropertyChanged("Malaria");
			}
		}
	}
	
	[Association(Name="TestDef_TestResult4", Storage="_TestDef4", ThisKey="SyphilisID", OtherKey="ID", IsForeignKey=true)]
	public TestDef Syphilis
	{
		get
		{
			return this._TestDef4.Entity;
		}
		set
		{
			TestDef previousValue = this._TestDef4.Entity;
			if (((previousValue != value) 
						|| (this._TestDef4.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._TestDef4.Entity = null;
					previousValue.TestResultsBySyphilis.Remove(this);
				}
				this._TestDef4.Entity = value;
				if ((value != null))
				{
					value.TestResultsBySyphilis.Add(this);
					this._Syphilis = value.ID;
				}
				else
				{
					this._Syphilis = default(Nullable<int>);
				}
				this.SendPropertyChanged("Syphilis");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}

[Table(Name="dbo.BloodType")]
public partial class BloodType : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private System.Guid _ID;
	
	private System.Nullable<System.Guid> _PackID;
	
	private System.Nullable<int> _aboID;
	
	private System.Nullable<int> _rhID;
	
	private System.Nullable<System.DateTime> _CommitDate;
	
	private System.Nullable<int> _Times;
	
	private string _Actor;
	
	private EntityRef<Pack> _Pack;
	
	private EntityRef<TestDef> _ABO;
	
	private EntityRef<TestDef> _RH;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(System.Guid value);
    partial void OnIDChanged();
    partial void OnPackIDChanging(System.Nullable<System.Guid> value);
    partial void OnPackIDChanged();
    partial void OnaboIDChanging(System.Nullable<int> value);
    partial void OnaboIDChanged();
    partial void OnrhIDChanging(System.Nullable<int> value);
    partial void OnrhIDChanged();
    partial void OnCommitDateChanging(System.Nullable<System.DateTime> value);
    partial void OnCommitDateChanged();
    partial void OnTimesChanging(System.Nullable<int> value);
    partial void OnTimesChanged();
    partial void OnActorChanging(string value);
    partial void OnActorChanged();
    #endregion
	
	public BloodType()
	{
		this._Pack = default(EntityRef<Pack>);
		this._ABO = default(EntityRef<TestDef>);
		this._RH = default(EntityRef<TestDef>);
		OnCreated();
	}
	
	[Column(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true, IsDbGenerated=true)]
	public System.Guid ID
	{
		get
		{
			return this._ID;
		}
		set
		{
			if ((this._ID != value))
			{
				this.OnIDChanging(value);
				this.SendPropertyChanging();
				this._ID = value;
				this.SendPropertyChanged("ID");
				this.OnIDChanged();
			}
		}
	}
	
	[Column(Storage="_PackID", DbType="UniqueIdentifier")]
	public System.Nullable<System.Guid> PackID
	{
		get
		{
			return this._PackID;
		}
		set
		{
			if ((this._PackID != value))
			{
				if (this._Pack.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnPackIDChanging(value);
				this.SendPropertyChanging();
				this._PackID = value;
				this.SendPropertyChanged("PackID");
				this.OnPackIDChanged();
			}
		}
	}
	
	[Column(Storage="_aboID", DbType="Int")]
	public System.Nullable<int> aboID
	{
		get
		{
			return this._aboID;
		}
		set
		{
			if ((this._aboID != value))
			{
				if (this._ABO.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnaboIDChanging(value);
				this.SendPropertyChanging();
				this._aboID = value;
				this.SendPropertyChanged("aboID");
				this.OnaboIDChanged();
			}
		}
	}
	
	[Column(Storage="_rhID", DbType="Int")]
	public System.Nullable<int> rhID
	{
		get
		{
			return this._rhID;
		}
		set
		{
			if ((this._rhID != value))
			{
				if (this._RH.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnrhIDChanging(value);
				this.SendPropertyChanging();
				this._rhID = value;
				this.SendPropertyChanged("rhID");
				this.OnrhIDChanged();
			}
		}
	}
	
	[Column(Storage="_CommitDate", DbType="DateTime")]
	public System.Nullable<System.DateTime> CommitDate
	{
		get
		{
			return this._CommitDate;
		}
		set
		{
			if ((this._CommitDate != value))
			{
				this.OnCommitDateChanging(value);
				this.SendPropertyChanging();
				this._CommitDate = value;
				this.SendPropertyChanged("CommitDate");
				this.OnCommitDateChanged();
			}
		}
	}
	
	[Column(Storage="_Times", DbType="Int")]
	public System.Nullable<int> Times
	{
		get
		{
			return this._Times;
		}
		set
		{
			if ((this._Times != value))
			{
				this.OnTimesChanging(value);
				this.SendPropertyChanging();
				this._Times = value;
				this.SendPropertyChanged("Times");
				this.OnTimesChanged();
			}
		}
	}
	
	[Column(Storage="_Actor", DbType="NVarChar(MAX)")]
	public string Actor
	{
		get
		{
			return this._Actor;
		}
		set
		{
			if ((this._Actor != value))
			{
				this.OnActorChanging(value);
				this.SendPropertyChanging();
				this._Actor = value;
				this.SendPropertyChanged("Actor");
				this.OnActorChanged();
			}
		}
	}
	
	[Association(Name="Pack_BloodType", Storage="_Pack", ThisKey="PackID", OtherKey="ID", IsForeignKey=true)]
	public Pack Pack
	{
		get
		{
			return this._Pack.Entity;
		}
		set
		{
			Pack previousValue = this._Pack.Entity;
			if (((previousValue != value) 
						|| (this._Pack.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Pack.Entity = null;
					previousValue.BloodTypes.Remove(this);
				}
				this._Pack.Entity = value;
				if ((value != null))
				{
					value.BloodTypes.Add(this);
					this._PackID = value.ID;
				}
				else
				{
					this._PackID = default(Nullable<System.Guid>);
				}
				this.SendPropertyChanged("Pack");
			}
		}
	}
	
	[Association(Name="TestDef_BloodType", Storage="_ABO", ThisKey="aboID", OtherKey="ID", IsForeignKey=true)]
	public TestDef ABO
	{
		get
		{
			return this._ABO.Entity;
		}
		set
		{
			TestDef previousValue = this._ABO.Entity;
			if (((previousValue != value) 
						|| (this._ABO.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._ABO.Entity = null;
					previousValue.BloodTypesByABO.Remove(this);
				}
				this._ABO.Entity = value;
				if ((value != null))
				{
					value.BloodTypesByABO.Add(this);
					this._aboID = value.ID;
				}
				else
				{
					this._aboID = default(Nullable<int>);
				}
				this.SendPropertyChanged("ABO");
			}
		}
	}
	
	[Association(Name="TestDef_BloodType1", Storage="_RH", ThisKey="rhID", OtherKey="ID", IsForeignKey=true)]
	public TestDef RH
	{
		get
		{
			return this._RH.Entity;
		}
		set
		{
			TestDef previousValue = this._RH.Entity;
			if (((previousValue != value) 
						|| (this._RH.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._RH.Entity = null;
					previousValue.BloodTypesByRH.Remove(this);
				}
				this._RH.Entity = value;
				if ((value != null))
				{
					value.BloodTypesByRH.Add(this);
					this._rhID = value.ID;
				}
				else
				{
					this._rhID = default(Nullable<int>);
				}
				this.SendPropertyChanged("RH");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}

[Table(Name="dbo.PackStatusHistory")]
public partial class PackStatusHistory : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _ID;
	
	private System.Nullable<System.Guid> _PackID;
	
	private Pack.StatusX _FromStatus;
	
	private Pack.StatusX _ToStatus;
	
	private string _Actor;
	
	private System.Nullable<System.DateTime> _Date;
	
	private string _Note;
	
	private EntityRef<Pack> _Pack;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnPackIDChanging(System.Nullable<System.Guid> value);
    partial void OnPackIDChanged();
    partial void OnFromStatusChanging(Pack.StatusX value);
    partial void OnFromStatusChanged();
    partial void OnToStatusChanging(Pack.StatusX value);
    partial void OnToStatusChanged();
    partial void OnActorChanging(string value);
    partial void OnActorChanged();
    partial void OnDateChanging(System.Nullable<System.DateTime> value);
    partial void OnDateChanged();
    partial void OnNoteChanging(string value);
    partial void OnNoteChanged();
    #endregion
	
	public PackStatusHistory()
	{
		this._Pack = default(EntityRef<Pack>);
		OnCreated();
	}
	
	[Column(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int ID
	{
		get
		{
			return this._ID;
		}
		set
		{
			if ((this._ID != value))
			{
				this.OnIDChanging(value);
				this.SendPropertyChanging();
				this._ID = value;
				this.SendPropertyChanged("ID");
				this.OnIDChanged();
			}
		}
	}
	
	[Column(Storage="_PackID", DbType="UniqueIdentifier")]
	public System.Nullable<System.Guid> PackID
	{
		get
		{
			return this._PackID;
		}
		set
		{
			if ((this._PackID != value))
			{
				if (this._Pack.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnPackIDChanging(value);
				this.SendPropertyChanging();
				this._PackID = value;
				this.SendPropertyChanged("PackID");
				this.OnPackIDChanged();
			}
		}
	}
	
	[Column(Storage="_FromStatus", DbType="Int", CanBeNull=true)]
	public Pack.StatusX FromStatus
	{
		get
		{
			return this._FromStatus;
		}
		set
		{
			if ((this._FromStatus != value))
			{
				this.OnFromStatusChanging(value);
				this.SendPropertyChanging();
				this._FromStatus = value;
				this.SendPropertyChanged("FromStatus");
				this.OnFromStatusChanged();
			}
		}
	}
	
	[Column(Storage="_ToStatus", DbType="Int", CanBeNull=true)]
	public Pack.StatusX ToStatus
	{
		get
		{
			return this._ToStatus;
		}
		set
		{
			if ((this._ToStatus != value))
			{
				this.OnToStatusChanging(value);
				this.SendPropertyChanging();
				this._ToStatus = value;
				this.SendPropertyChanged("ToStatus");
				this.OnToStatusChanged();
			}
		}
	}
	
	[Column(Storage="_Actor", DbType="NVarChar(MAX)")]
	public string Actor
	{
		get
		{
			return this._Actor;
		}
		set
		{
			if ((this._Actor != value))
			{
				this.OnActorChanging(value);
				this.SendPropertyChanging();
				this._Actor = value;
				this.SendPropertyChanged("Actor");
				this.OnActorChanged();
			}
		}
	}
	
	[Column(Storage="_Date", DbType="DateTime")]
	public System.Nullable<System.DateTime> Date
	{
		get
		{
			return this._Date;
		}
		set
		{
			if ((this._Date != value))
			{
				this.OnDateChanging(value);
				this.SendPropertyChanging();
				this._Date = value;
				this.SendPropertyChanged("Date");
				this.OnDateChanged();
			}
		}
	}
	
	[Column(Storage="_Note", DbType="NVarChar(MAX)")]
	public string Note
	{
		get
		{
			return this._Note;
		}
		set
		{
			if ((this._Note != value))
			{
				this.OnNoteChanging(value);
				this.SendPropertyChanging();
				this._Note = value;
				this.SendPropertyChanged("Note");
				this.OnNoteChanged();
			}
		}
	}
	
	[Association(Name="Pack_PackStatusHistory", Storage="_Pack", ThisKey="PackID", OtherKey="ID", IsForeignKey=true)]
	public Pack Pack
	{
		get
		{
			return this._Pack.Entity;
		}
		set
		{
			Pack previousValue = this._Pack.Entity;
			if (((previousValue != value) 
						|| (this._Pack.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Pack.Entity = null;
					previousValue.PackStatusHistories.Remove(this);
				}
				this._Pack.Entity = value;
				if ((value != null))
				{
					value.PackStatusHistories.Add(this);
					this._PackID = value.ID;
				}
				else
				{
					this._PackID = default(Nullable<System.Guid>);
				}
				this.SendPropertyChanged("Pack");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}

[Table(Name="dbo.Org")]
public partial class Org : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _ID;
	
	private string _Name;
	
	private string _NameNoDiacritics;
	
	private string _Address;
	
	private System.Nullable<System.Guid> _GeoID1;
	
	private System.Nullable<System.Guid> _GeoID2;
	
	private System.Nullable<System.Guid> _GeoID3;
	
	private string _Note;
	
	private System.Nullable<int> _Type;
	
	private EntitySet<Campaign> _CampaignsByCoopOrg;
	
	private EntitySet<Campaign> _CampaignsByHostOrg;
	
	private EntitySet<Order> _Orders;
	
	private EntityRef<Geo> _Geo1;
	
	private EntityRef<Geo> _Geo2;
	
	private EntityRef<Geo> _Geo3;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnNameNoDiacriticsChanging(string value);
    partial void OnNameNoDiacriticsChanged();
    partial void OnAddressChanging(string value);
    partial void OnAddressChanged();
    partial void OnGeoID1Changing(System.Nullable<System.Guid> value);
    partial void OnGeoID1Changed();
    partial void OnGeoID2Changing(System.Nullable<System.Guid> value);
    partial void OnGeoID2Changed();
    partial void OnGeoID3Changing(System.Nullable<System.Guid> value);
    partial void OnGeoID3Changed();
    partial void OnNoteChanging(string value);
    partial void OnNoteChanged();
    partial void OnTypeChanging(System.Nullable<int> value);
    partial void OnTypeChanged();
    #endregion
	
	public Org()
	{
		this._CampaignsByCoopOrg = new EntitySet<Campaign>(new Action<Campaign>(this.attach_CampaignsByCoopOrg), new Action<Campaign>(this.detach_CampaignsByCoopOrg));
		this._CampaignsByHostOrg = new EntitySet<Campaign>(new Action<Campaign>(this.attach_CampaignsByHostOrg), new Action<Campaign>(this.detach_CampaignsByHostOrg));
		this._Orders = new EntitySet<Order>(new Action<Order>(this.attach_Orders), new Action<Order>(this.detach_Orders));
		this._Geo1 = default(EntityRef<Geo>);
		this._Geo2 = default(EntityRef<Geo>);
		this._Geo3 = default(EntityRef<Geo>);
		OnCreated();
	}
	
	[Column(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int ID
	{
		get
		{
			return this._ID;
		}
		set
		{
			if ((this._ID != value))
			{
				this.OnIDChanging(value);
				this.SendPropertyChanging();
				this._ID = value;
				this.SendPropertyChanged("ID");
				this.OnIDChanged();
			}
		}
	}
	
	[Column(Storage="_Name", DbType="NVarChar(MAX)")]
	public string Name
	{
		get
		{
			return this._Name;
		}
		set
		{
			if ((this._Name != value))
			{
				this.OnNameChanging(value);
				this.SendPropertyChanging();
				this._Name = value;
				this.SendPropertyChanged("Name");
				this.OnNameChanged();
			}
		}
	}
	
	[Column(Storage="_NameNoDiacritics", DbType="NVarChar(MAX)")]
	public string NameNoDiacritics
	{
		get
		{
			return this._NameNoDiacritics;
		}
		set
		{
			if ((this._NameNoDiacritics != value))
			{
				this.OnNameNoDiacriticsChanging(value);
				this.SendPropertyChanging();
				this._NameNoDiacritics = value;
				this.SendPropertyChanged("NameNoDiacritics");
				this.OnNameNoDiacriticsChanged();
			}
		}
	}
	
	[Column(Storage="_Address", DbType="NVarChar(MAX)")]
	public string Address
	{
		get
		{
			return this._Address;
		}
		set
		{
			if ((this._Address != value))
			{
				this.OnAddressChanging(value);
				this.SendPropertyChanging();
				this._Address = value;
				this.SendPropertyChanged("Address");
				this.OnAddressChanged();
			}
		}
	}
	
	[Column(Storage="_GeoID1", DbType="UniqueIdentifier")]
	public System.Nullable<System.Guid> GeoID1
	{
		get
		{
			return this._GeoID1;
		}
		set
		{
			if ((this._GeoID1 != value))
			{
				if (this._Geo1.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnGeoID1Changing(value);
				this.SendPropertyChanging();
				this._GeoID1 = value;
				this.SendPropertyChanged("GeoID1");
				this.OnGeoID1Changed();
			}
		}
	}
	
	[Column(Storage="_GeoID2", DbType="UniqueIdentifier")]
	public System.Nullable<System.Guid> GeoID2
	{
		get
		{
			return this._GeoID2;
		}
		set
		{
			if ((this._GeoID2 != value))
			{
				if (this._Geo2.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnGeoID2Changing(value);
				this.SendPropertyChanging();
				this._GeoID2 = value;
				this.SendPropertyChanged("GeoID2");
				this.OnGeoID2Changed();
			}
		}
	}
	
	[Column(Storage="_GeoID3", DbType="UniqueIdentifier")]
	public System.Nullable<System.Guid> GeoID3
	{
		get
		{
			return this._GeoID3;
		}
		set
		{
			if ((this._GeoID3 != value))
			{
				if (this._Geo3.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnGeoID3Changing(value);
				this.SendPropertyChanging();
				this._GeoID3 = value;
				this.SendPropertyChanged("GeoID3");
				this.OnGeoID3Changed();
			}
		}
	}
	
	[Column(Storage="_Note", DbType="NVarChar(MAX)")]
	public string Note
	{
		get
		{
			return this._Note;
		}
		set
		{
			if ((this._Note != value))
			{
				this.OnNoteChanging(value);
				this.SendPropertyChanging();
				this._Note = value;
				this.SendPropertyChanged("Note");
				this.OnNoteChanged();
			}
		}
	}
	
	[Column(Storage="_Type", DbType="Int")]
	public System.Nullable<int> Type
	{
		get
		{
			return this._Type;
		}
		set
		{
			if ((this._Type != value))
			{
				this.OnTypeChanging(value);
				this.SendPropertyChanging();
				this._Type = value;
				this.SendPropertyChanged("Type");
				this.OnTypeChanged();
			}
		}
	}
	
	[Association(Name="Org_Campaign", Storage="_CampaignsByCoopOrg", ThisKey="ID", OtherKey="CoopOrgID")]
	public EntitySet<Campaign> CampaignsByCoopOrg
	{
		get
		{
			return this._CampaignsByCoopOrg;
		}
		set
		{
			this._CampaignsByCoopOrg.Assign(value);
		}
	}
	
	[Association(Name="Org_Campaign1", Storage="_CampaignsByHostOrg", ThisKey="ID", OtherKey="HostOrgID")]
	public EntitySet<Campaign> CampaignsByHostOrg
	{
		get
		{
			return this._CampaignsByHostOrg;
		}
		set
		{
			this._CampaignsByHostOrg.Assign(value);
		}
	}
	
	[Association(Name="Org_Order", Storage="_Orders", ThisKey="ID", OtherKey="OrgID")]
	public EntitySet<Order> Orders
	{
		get
		{
			return this._Orders;
		}
		set
		{
			this._Orders.Assign(value);
		}
	}
	
	[Association(Name="Geo_Org", Storage="_Geo1", ThisKey="GeoID1", OtherKey="ID", IsForeignKey=true)]
	public Geo Geo1
	{
		get
		{
			return this._Geo1.Entity;
		}
		set
		{
			Geo previousValue = this._Geo1.Entity;
			if (((previousValue != value) 
						|| (this._Geo1.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Geo1.Entity = null;
					previousValue.OrgsByGeo1.Remove(this);
				}
				this._Geo1.Entity = value;
				if ((value != null))
				{
					value.OrgsByGeo1.Add(this);
					this._GeoID1 = value.ID;
				}
				else
				{
					this._GeoID1 = default(Nullable<System.Guid>);
				}
				this.SendPropertyChanged("Geo1");
			}
		}
	}
	
	[Association(Name="Geo_Org1", Storage="_Geo2", ThisKey="GeoID2", OtherKey="ID", IsForeignKey=true)]
	public Geo Geo2
	{
		get
		{
			return this._Geo2.Entity;
		}
		set
		{
			Geo previousValue = this._Geo2.Entity;
			if (((previousValue != value) 
						|| (this._Geo2.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Geo2.Entity = null;
					previousValue.OrgsByGeo2.Remove(this);
				}
				this._Geo2.Entity = value;
				if ((value != null))
				{
					value.OrgsByGeo2.Add(this);
					this._GeoID2 = value.ID;
				}
				else
				{
					this._GeoID2 = default(Nullable<System.Guid>);
				}
				this.SendPropertyChanged("Geo2");
			}
		}
	}
	
	[Association(Name="Geo_Org2", Storage="_Geo3", ThisKey="GeoID3", OtherKey="ID", IsForeignKey=true)]
	public Geo Geo3
	{
		get
		{
			return this._Geo3.Entity;
		}
		set
		{
			Geo previousValue = this._Geo3.Entity;
			if (((previousValue != value) 
						|| (this._Geo3.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Geo3.Entity = null;
					previousValue.OrgsByGeo3.Remove(this);
				}
				this._Geo3.Entity = value;
				if ((value != null))
				{
					value.OrgsByGeo3.Add(this);
					this._GeoID3 = value.ID;
				}
				else
				{
					this._GeoID3 = default(Nullable<System.Guid>);
				}
				this.SendPropertyChanged("Geo3");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_CampaignsByCoopOrg(Campaign entity)
	{
		this.SendPropertyChanging();
		entity.CoopOrg = this;
	}
	
	private void detach_CampaignsByCoopOrg(Campaign entity)
	{
		this.SendPropertyChanging();
		entity.CoopOrg = null;
	}
	
	private void attach_CampaignsByHostOrg(Campaign entity)
	{
		this.SendPropertyChanging();
		entity.HostOrg = this;
	}
	
	private void detach_CampaignsByHostOrg(Campaign entity)
	{
		this.SendPropertyChanging();
		entity.HostOrg = null;
	}
	
	private void attach_Orders(Order entity)
	{
		this.SendPropertyChanging();
		entity.Org = this;
	}
	
	private void detach_Orders(Order entity)
	{
		this.SendPropertyChanging();
		entity.Org = null;
	}
}

[Table(Name="dbo.Campaign")]
public partial class Campaign : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _ID;
	
	private string _Name;
	
	private System.Nullable<System.DateTime> _Date;
	
	private string _Note;
	
	private string _ContactName;
	
	private string _ContactPhone;
	
	private string _ContactTitle;
	
	private System.Nullable<int> _SourceID;
	
	private Campaign.StatusX _Status;
	
	private System.Nullable<int> _Est;
	
	private System.Nullable<int> _CoopOrgID;
	
	private System.Nullable<int> _HostOrgID;
	
	private string _NameNoDiacritics;
	
	private Campaign.TypeX _Type;
	
	private EntitySet<Pack> _Packs;
	
	private EntitySet<CampaignStatusHistory> _CampaignStatusHistories;
	
	private EntityRef<Org> _CoopOrg;
	
	private EntityRef<Org> _HostOrg;
	
	private EntityRef<TestDef> _Source;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnDateChanging(System.Nullable<System.DateTime> value);
    partial void OnDateChanged();
    partial void OnNoteChanging(string value);
    partial void OnNoteChanged();
    partial void OnContactNameChanging(string value);
    partial void OnContactNameChanged();
    partial void OnContactPhoneChanging(string value);
    partial void OnContactPhoneChanged();
    partial void OnContactTitleChanging(string value);
    partial void OnContactTitleChanged();
    partial void OnSourceIDChanging(System.Nullable<int> value);
    partial void OnSourceIDChanged();
    partial void OnStatusChanging(Campaign.StatusX value);
    partial void OnStatusChanged();
    partial void OnEstChanging(System.Nullable<int> value);
    partial void OnEstChanged();
    partial void OnCoopOrgIDChanging(System.Nullable<int> value);
    partial void OnCoopOrgIDChanged();
    partial void OnHostOrgIDChanging(System.Nullable<int> value);
    partial void OnHostOrgIDChanged();
    partial void OnNameNoDiacriticsChanging(string value);
    partial void OnNameNoDiacriticsChanged();
    partial void OnTypeChanging(Campaign.TypeX value);
    partial void OnTypeChanged();
    #endregion
	
	public Campaign()
	{
		this._Packs = new EntitySet<Pack>(new Action<Pack>(this.attach_Packs), new Action<Pack>(this.detach_Packs));
		this._CampaignStatusHistories = new EntitySet<CampaignStatusHistory>(new Action<CampaignStatusHistory>(this.attach_CampaignStatusHistories), new Action<CampaignStatusHistory>(this.detach_CampaignStatusHistories));
		this._CoopOrg = default(EntityRef<Org>);
		this._HostOrg = default(EntityRef<Org>);
		this._Source = default(EntityRef<TestDef>);
		OnCreated();
	}
	
	[Column(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int ID
	{
		get
		{
			return this._ID;
		}
		set
		{
			if ((this._ID != value))
			{
				this.OnIDChanging(value);
				this.SendPropertyChanging();
				this._ID = value;
				this.SendPropertyChanged("ID");
				this.OnIDChanged();
			}
		}
	}
	
	[Column(Storage="_Name", DbType="NVarChar(MAX)")]
	public string Name
	{
		get
		{
			return this._Name;
		}
		set
		{
			if ((this._Name != value))
			{
				this.OnNameChanging(value);
				this.SendPropertyChanging();
				this._Name = value;
				this.SendPropertyChanged("Name");
				this.OnNameChanged();
			}
		}
	}
	
	[Column(Storage="_Date", DbType="DateTime")]
	public System.Nullable<System.DateTime> Date
	{
		get
		{
			return this._Date;
		}
		set
		{
			if ((this._Date != value))
			{
				this.OnDateChanging(value);
				this.SendPropertyChanging();
				this._Date = value;
				this.SendPropertyChanged("Date");
				this.OnDateChanged();
			}
		}
	}
	
	[Column(Storage="_Note", DbType="NVarChar(MAX)")]
	public string Note
	{
		get
		{
			return this._Note;
		}
		set
		{
			if ((this._Note != value))
			{
				this.OnNoteChanging(value);
				this.SendPropertyChanging();
				this._Note = value;
				this.SendPropertyChanged("Note");
				this.OnNoteChanged();
			}
		}
	}
	
	[Column(Storage="_ContactName", DbType="NVarChar(MAX)")]
	public string ContactName
	{
		get
		{
			return this._ContactName;
		}
		set
		{
			if ((this._ContactName != value))
			{
				this.OnContactNameChanging(value);
				this.SendPropertyChanging();
				this._ContactName = value;
				this.SendPropertyChanged("ContactName");
				this.OnContactNameChanged();
			}
		}
	}
	
	[Column(Storage="_ContactPhone", DbType="NVarChar(MAX)")]
	public string ContactPhone
	{
		get
		{
			return this._ContactPhone;
		}
		set
		{
			if ((this._ContactPhone != value))
			{
				this.OnContactPhoneChanging(value);
				this.SendPropertyChanging();
				this._ContactPhone = value;
				this.SendPropertyChanged("ContactPhone");
				this.OnContactPhoneChanged();
			}
		}
	}
	
	[Column(Storage="_ContactTitle", DbType="NVarChar(MAX)")]
	public string ContactTitle
	{
		get
		{
			return this._ContactTitle;
		}
		set
		{
			if ((this._ContactTitle != value))
			{
				this.OnContactTitleChanging(value);
				this.SendPropertyChanging();
				this._ContactTitle = value;
				this.SendPropertyChanged("ContactTitle");
				this.OnContactTitleChanged();
			}
		}
	}
	
	[Column(Storage="_SourceID", DbType="Int")]
	public System.Nullable<int> SourceID
	{
		get
		{
			return this._SourceID;
		}
		set
		{
			if ((this._SourceID != value))
			{
				if (this._Source.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnSourceIDChanging(value);
				this.SendPropertyChanging();
				this._SourceID = value;
				this.SendPropertyChanged("SourceID");
				this.OnSourceIDChanged();
			}
		}
	}
	
	[Column(Storage="_Status", DbType="Int", CanBeNull=true)]
	public Campaign.StatusX Status
	{
		get
		{
			return this._Status;
		}
		set
		{
			if ((this._Status != value))
			{
				this.OnStatusChanging(value);
				this.SendPropertyChanging();
				this._Status = value;
				this.SendPropertyChanged("Status");
				this.OnStatusChanged();
			}
		}
	}
	
	[Column(Storage="_Est", DbType="Int")]
	public System.Nullable<int> Est
	{
		get
		{
			return this._Est;
		}
		set
		{
			if ((this._Est != value))
			{
				this.OnEstChanging(value);
				this.SendPropertyChanging();
				this._Est = value;
				this.SendPropertyChanged("Est");
				this.OnEstChanged();
			}
		}
	}
	
	[Column(Storage="_CoopOrgID", DbType="Int")]
	public System.Nullable<int> CoopOrgID
	{
		get
		{
			return this._CoopOrgID;
		}
		set
		{
			if ((this._CoopOrgID != value))
			{
				if (this._CoopOrg.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnCoopOrgIDChanging(value);
				this.SendPropertyChanging();
				this._CoopOrgID = value;
				this.SendPropertyChanged("CoopOrgID");
				this.OnCoopOrgIDChanged();
			}
		}
	}
	
	[Column(Storage="_HostOrgID", DbType="Int")]
	public System.Nullable<int> HostOrgID
	{
		get
		{
			return this._HostOrgID;
		}
		set
		{
			if ((this._HostOrgID != value))
			{
				if (this._HostOrg.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnHostOrgIDChanging(value);
				this.SendPropertyChanging();
				this._HostOrgID = value;
				this.SendPropertyChanged("HostOrgID");
				this.OnHostOrgIDChanged();
			}
		}
	}
	
	[Column(Storage="_NameNoDiacritics", DbType="NVarChar(MAX)")]
	public string NameNoDiacritics
	{
		get
		{
			return this._NameNoDiacritics;
		}
		set
		{
			if ((this._NameNoDiacritics != value))
			{
				this.OnNameNoDiacriticsChanging(value);
				this.SendPropertyChanging();
				this._NameNoDiacritics = value;
				this.SendPropertyChanged("NameNoDiacritics");
				this.OnNameNoDiacriticsChanged();
			}
		}
	}
	
	[Column(Storage="_Type", DbType="Int", CanBeNull=true)]
	public Campaign.TypeX Type
	{
		get
		{
			return this._Type;
		}
		set
		{
			if ((this._Type != value))
			{
				this.OnTypeChanging(value);
				this.SendPropertyChanging();
				this._Type = value;
				this.SendPropertyChanged("Type");
				this.OnTypeChanged();
			}
		}
	}
	
	[Association(Name="Campaign_Pack", Storage="_Packs", ThisKey="ID", OtherKey="CampaignID")]
	public EntitySet<Pack> Packs
	{
		get
		{
			return this._Packs;
		}
		set
		{
			this._Packs.Assign(value);
		}
	}
	
	[Association(Name="Campaign_CampaignStatusHistory", Storage="_CampaignStatusHistories", ThisKey="ID", OtherKey="CampaignID")]
	public EntitySet<CampaignStatusHistory> CampaignStatusHistories
	{
		get
		{
			return this._CampaignStatusHistories;
		}
		set
		{
			this._CampaignStatusHistories.Assign(value);
		}
	}
	
	[Association(Name="Org_Campaign", Storage="_CoopOrg", ThisKey="CoopOrgID", OtherKey="ID", IsForeignKey=true)]
	public Org CoopOrg
	{
		get
		{
			return this._CoopOrg.Entity;
		}
		set
		{
			Org previousValue = this._CoopOrg.Entity;
			if (((previousValue != value) 
						|| (this._CoopOrg.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._CoopOrg.Entity = null;
					previousValue.CampaignsByCoopOrg.Remove(this);
				}
				this._CoopOrg.Entity = value;
				if ((value != null))
				{
					value.CampaignsByCoopOrg.Add(this);
					this._CoopOrgID = value.ID;
				}
				else
				{
					this._CoopOrgID = default(Nullable<int>);
				}
				this.SendPropertyChanged("CoopOrg");
			}
		}
	}
	
	[Association(Name="Org_Campaign1", Storage="_HostOrg", ThisKey="HostOrgID", OtherKey="ID", IsForeignKey=true)]
	public Org HostOrg
	{
		get
		{
			return this._HostOrg.Entity;
		}
		set
		{
			Org previousValue = this._HostOrg.Entity;
			if (((previousValue != value) 
						|| (this._HostOrg.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._HostOrg.Entity = null;
					previousValue.CampaignsByHostOrg.Remove(this);
				}
				this._HostOrg.Entity = value;
				if ((value != null))
				{
					value.CampaignsByHostOrg.Add(this);
					this._HostOrgID = value.ID;
				}
				else
				{
					this._HostOrgID = default(Nullable<int>);
				}
				this.SendPropertyChanged("HostOrg");
			}
		}
	}
	
	[Association(Name="TestDef_Campaign", Storage="_Source", ThisKey="SourceID", OtherKey="ID", IsForeignKey=true)]
	public TestDef Source
	{
		get
		{
			return this._Source.Entity;
		}
		set
		{
			TestDef previousValue = this._Source.Entity;
			if (((previousValue != value) 
						|| (this._Source.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Source.Entity = null;
					previousValue.CampaignsBySource.Remove(this);
				}
				this._Source.Entity = value;
				if ((value != null))
				{
					value.CampaignsBySource.Add(this);
					this._SourceID = value.ID;
				}
				else
				{
					this._SourceID = default(Nullable<int>);
				}
				this.SendPropertyChanged("Source");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_Packs(Pack entity)
	{
		this.SendPropertyChanging();
		entity.Campaign = this;
	}
	
	private void detach_Packs(Pack entity)
	{
		this.SendPropertyChanging();
		entity.Campaign = null;
	}
	
	private void attach_CampaignStatusHistories(CampaignStatusHistory entity)
	{
		this.SendPropertyChanging();
		entity.Campaign = this;
	}
	
	private void detach_CampaignStatusHistories(CampaignStatusHistory entity)
	{
		this.SendPropertyChanging();
		entity.Campaign = null;
	}
}

[Table(Name="dbo.CampaignStatusHistory")]
public partial class CampaignStatusHistory : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _ID;
	
	private System.Nullable<int> _CampaignID;
	
	private Campaign.StatusX _FromStatus;
	
	private Campaign.StatusX _ToStatus;
	
	private string _Actor;
	
	private System.Nullable<System.DateTime> _Date;
	
	private string _Note;
	
	private EntityRef<Campaign> _Campaign;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnCampaignIDChanging(System.Nullable<int> value);
    partial void OnCampaignIDChanged();
    partial void OnFromStatusChanging(Campaign.StatusX value);
    partial void OnFromStatusChanged();
    partial void OnToStatusChanging(Campaign.StatusX value);
    partial void OnToStatusChanged();
    partial void OnActorChanging(string value);
    partial void OnActorChanged();
    partial void OnDateChanging(System.Nullable<System.DateTime> value);
    partial void OnDateChanged();
    partial void OnNoteChanging(string value);
    partial void OnNoteChanged();
    #endregion
	
	public CampaignStatusHistory()
	{
		this._Campaign = default(EntityRef<Campaign>);
		OnCreated();
	}
	
	[Column(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int ID
	{
		get
		{
			return this._ID;
		}
		set
		{
			if ((this._ID != value))
			{
				this.OnIDChanging(value);
				this.SendPropertyChanging();
				this._ID = value;
				this.SendPropertyChanged("ID");
				this.OnIDChanged();
			}
		}
	}
	
	[Column(Storage="_CampaignID", DbType="Int")]
	public System.Nullable<int> CampaignID
	{
		get
		{
			return this._CampaignID;
		}
		set
		{
			if ((this._CampaignID != value))
			{
				if (this._Campaign.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnCampaignIDChanging(value);
				this.SendPropertyChanging();
				this._CampaignID = value;
				this.SendPropertyChanged("CampaignID");
				this.OnCampaignIDChanged();
			}
		}
	}
	
	[Column(Storage="_FromStatus", DbType="Int", CanBeNull=true)]
	public Campaign.StatusX FromStatus
	{
		get
		{
			return this._FromStatus;
		}
		set
		{
			if ((this._FromStatus != value))
			{
				this.OnFromStatusChanging(value);
				this.SendPropertyChanging();
				this._FromStatus = value;
				this.SendPropertyChanged("FromStatus");
				this.OnFromStatusChanged();
			}
		}
	}
	
	[Column(Storage="_ToStatus", DbType="Int", CanBeNull=true)]
	public Campaign.StatusX ToStatus
	{
		get
		{
			return this._ToStatus;
		}
		set
		{
			if ((this._ToStatus != value))
			{
				this.OnToStatusChanging(value);
				this.SendPropertyChanging();
				this._ToStatus = value;
				this.SendPropertyChanged("ToStatus");
				this.OnToStatusChanged();
			}
		}
	}
	
	[Column(Storage="_Actor", DbType="NVarChar(MAX)")]
	public string Actor
	{
		get
		{
			return this._Actor;
		}
		set
		{
			if ((this._Actor != value))
			{
				this.OnActorChanging(value);
				this.SendPropertyChanging();
				this._Actor = value;
				this.SendPropertyChanged("Actor");
				this.OnActorChanged();
			}
		}
	}
	
	[Column(Storage="_Date", DbType="DateTime")]
	public System.Nullable<System.DateTime> Date
	{
		get
		{
			return this._Date;
		}
		set
		{
			if ((this._Date != value))
			{
				this.OnDateChanging(value);
				this.SendPropertyChanging();
				this._Date = value;
				this.SendPropertyChanged("Date");
				this.OnDateChanged();
			}
		}
	}
	
	[Column(Storage="_Note", DbType="NVarChar(MAX)")]
	public string Note
	{
		get
		{
			return this._Note;
		}
		set
		{
			if ((this._Note != value))
			{
				this.OnNoteChanging(value);
				this.SendPropertyChanging();
				this._Note = value;
				this.SendPropertyChanged("Note");
				this.OnNoteChanged();
			}
		}
	}
	
	[Association(Name="Campaign_CampaignStatusHistory", Storage="_Campaign", ThisKey="CampaignID", OtherKey="ID", IsForeignKey=true)]
	public Campaign Campaign
	{
		get
		{
			return this._Campaign.Entity;
		}
		set
		{
			Campaign previousValue = this._Campaign.Entity;
			if (((previousValue != value) 
						|| (this._Campaign.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Campaign.Entity = null;
					previousValue.CampaignStatusHistories.Remove(this);
				}
				this._Campaign.Entity = value;
				if ((value != null))
				{
					value.CampaignStatusHistories.Add(this);
					this._CampaignID = value.ID;
				}
				else
				{
					this._CampaignID = default(Nullable<int>);
				}
				this.SendPropertyChanged("Campaign");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}

[Table(Name="dbo.[Log]")]
public partial class Log : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _ID;
	
	private Task.TaskX _TaskID;
	
	private string _Actor;
	
	private System.Nullable<System.DateTime> _Date;
	
	private string _Note;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnTaskIDChanging(Task.TaskX value);
    partial void OnTaskIDChanged();
    partial void OnActorChanging(string value);
    partial void OnActorChanged();
    partial void OnDateChanging(System.Nullable<System.DateTime> value);
    partial void OnDateChanged();
    partial void OnNoteChanging(string value);
    partial void OnNoteChanged();
    #endregion
	
	public Log()
	{
		OnCreated();
	}
	
	[Column(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int ID
	{
		get
		{
			return this._ID;
		}
		set
		{
			if ((this._ID != value))
			{
				this.OnIDChanging(value);
				this.SendPropertyChanging();
				this._ID = value;
				this.SendPropertyChanged("ID");
				this.OnIDChanged();
			}
		}
	}
	
	[Column(Storage="_TaskID", DbType="Int", CanBeNull=true)]
	public Task.TaskX TaskID
	{
		get
		{
			return this._TaskID;
		}
		set
		{
			if ((this._TaskID != value))
			{
				this.OnTaskIDChanging(value);
				this.SendPropertyChanging();
				this._TaskID = value;
				this.SendPropertyChanged("TaskID");
				this.OnTaskIDChanged();
			}
		}
	}
	
	[Column(Storage="_Actor", DbType="NVarChar(MAX)")]
	public string Actor
	{
		get
		{
			return this._Actor;
		}
		set
		{
			if ((this._Actor != value))
			{
				this.OnActorChanging(value);
				this.SendPropertyChanging();
				this._Actor = value;
				this.SendPropertyChanged("Actor");
				this.OnActorChanged();
			}
		}
	}
	
	[Column(Storage="_Date", DbType="DateTime")]
	public System.Nullable<System.DateTime> Date
	{
		get
		{
			return this._Date;
		}
		set
		{
			if ((this._Date != value))
			{
				this.OnDateChanging(value);
				this.SendPropertyChanging();
				this._Date = value;
				this.SendPropertyChanged("Date");
				this.OnDateChanged();
			}
		}
	}
	
	[Column(Storage="_Note", DbType="NVarChar(MAX)")]
	public string Note
	{
		get
		{
			return this._Note;
		}
		set
		{
			if ((this._Note != value))
			{
				this.OnNoteChanging(value);
				this.SendPropertyChanging();
				this._Note = value;
				this.SendPropertyChanged("Note");
				this.OnNoteChanged();
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}

[Table(Name="dbo.PackResultHistory")]
public partial class PackResultHistory : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _ID;
	
	private System.Nullable<System.Guid> _PackID;
	
	private System.Nullable<int> _TestDefID;
	
	private System.Nullable<int> _Times;
	
	private System.Nullable<System.DateTime> _Date;
	
	private string _Actor;
	
	private string _Note;
	
	private EntityRef<Pack> _Pack;
	
	private EntityRef<TestDef> _TestDef;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnPackIDChanging(System.Nullable<System.Guid> value);
    partial void OnPackIDChanged();
    partial void OnTestDefIDChanging(System.Nullable<int> value);
    partial void OnTestDefIDChanged();
    partial void OnTimesChanging(System.Nullable<int> value);
    partial void OnTimesChanged();
    partial void OnDateChanging(System.Nullable<System.DateTime> value);
    partial void OnDateChanged();
    partial void OnActorChanging(string value);
    partial void OnActorChanged();
    partial void OnNoteChanging(string value);
    partial void OnNoteChanged();
    #endregion
	
	public PackResultHistory()
	{
		this._Pack = default(EntityRef<Pack>);
		this._TestDef = default(EntityRef<TestDef>);
		OnCreated();
	}
	
	[Column(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int ID
	{
		get
		{
			return this._ID;
		}
		set
		{
			if ((this._ID != value))
			{
				this.OnIDChanging(value);
				this.SendPropertyChanging();
				this._ID = value;
				this.SendPropertyChanged("ID");
				this.OnIDChanged();
			}
		}
	}
	
	[Column(Storage="_PackID", DbType="UniqueIdentifier")]
	public System.Nullable<System.Guid> PackID
	{
		get
		{
			return this._PackID;
		}
		set
		{
			if ((this._PackID != value))
			{
				if (this._Pack.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnPackIDChanging(value);
				this.SendPropertyChanging();
				this._PackID = value;
				this.SendPropertyChanged("PackID");
				this.OnPackIDChanged();
			}
		}
	}
	
	[Column(Storage="_TestDefID", DbType="Int")]
	public System.Nullable<int> TestDefID
	{
		get
		{
			return this._TestDefID;
		}
		set
		{
			if ((this._TestDefID != value))
			{
				if (this._TestDef.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnTestDefIDChanging(value);
				this.SendPropertyChanging();
				this._TestDefID = value;
				this.SendPropertyChanged("TestDefID");
				this.OnTestDefIDChanged();
			}
		}
	}
	
	[Column(Storage="_Times", DbType="Int")]
	public System.Nullable<int> Times
	{
		get
		{
			return this._Times;
		}
		set
		{
			if ((this._Times != value))
			{
				this.OnTimesChanging(value);
				this.SendPropertyChanging();
				this._Times = value;
				this.SendPropertyChanged("Times");
				this.OnTimesChanged();
			}
		}
	}
	
	[Column(Storage="_Date", DbType="DateTime")]
	public System.Nullable<System.DateTime> Date
	{
		get
		{
			return this._Date;
		}
		set
		{
			if ((this._Date != value))
			{
				this.OnDateChanging(value);
				this.SendPropertyChanging();
				this._Date = value;
				this.SendPropertyChanged("Date");
				this.OnDateChanged();
			}
		}
	}
	
	[Column(Storage="_Actor", DbType="NVarChar(MAX)")]
	public string Actor
	{
		get
		{
			return this._Actor;
		}
		set
		{
			if ((this._Actor != value))
			{
				this.OnActorChanging(value);
				this.SendPropertyChanging();
				this._Actor = value;
				this.SendPropertyChanged("Actor");
				this.OnActorChanged();
			}
		}
	}
	
	[Column(Storage="_Note", DbType="NVarChar(MAX)")]
	public string Note
	{
		get
		{
			return this._Note;
		}
		set
		{
			if ((this._Note != value))
			{
				this.OnNoteChanging(value);
				this.SendPropertyChanging();
				this._Note = value;
				this.SendPropertyChanged("Note");
				this.OnNoteChanged();
			}
		}
	}
	
	[Association(Name="Pack_PackResultHistory", Storage="_Pack", ThisKey="PackID", OtherKey="ID", IsForeignKey=true)]
	public Pack Pack
	{
		get
		{
			return this._Pack.Entity;
		}
		set
		{
			Pack previousValue = this._Pack.Entity;
			if (((previousValue != value) 
						|| (this._Pack.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Pack.Entity = null;
					previousValue.PackResultHistories.Remove(this);
				}
				this._Pack.Entity = value;
				if ((value != null))
				{
					value.PackResultHistories.Add(this);
					this._PackID = value.ID;
				}
				else
				{
					this._PackID = default(Nullable<System.Guid>);
				}
				this.SendPropertyChanged("Pack");
			}
		}
	}
	
	[Association(Name="TestDef_PackResultHistory", Storage="_TestDef", ThisKey="TestDefID", OtherKey="ID", IsForeignKey=true)]
	public TestDef TestDef
	{
		get
		{
			return this._TestDef.Entity;
		}
		set
		{
			TestDef previousValue = this._TestDef.Entity;
			if (((previousValue != value) 
						|| (this._TestDef.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._TestDef.Entity = null;
					previousValue.PackResultHistories.Remove(this);
				}
				this._TestDef.Entity = value;
				if ((value != null))
				{
					value.PackResultHistories.Add(this);
					this._TestDefID = value.ID;
				}
				else
				{
					this._TestDefID = default(Nullable<int>);
				}
				this.SendPropertyChanged("TestDef");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}

[Table(Name="dbo.PackOrder")]
public partial class PackOrder : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _ID;
	
	private System.Nullable<System.Guid> _PackID;
	
	private System.Nullable<int> _OrderID;
	
	private EntityRef<Pack> _Pack;
	
	private EntityRef<Order> _Order;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnPackIDChanging(System.Nullable<System.Guid> value);
    partial void OnPackIDChanged();
    partial void OnOrderIDChanging(System.Nullable<int> value);
    partial void OnOrderIDChanged();
    #endregion
	
	public PackOrder()
	{
		this._Pack = default(EntityRef<Pack>);
		this._Order = default(EntityRef<Order>);
		OnCreated();
	}
	
	[Column(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int ID
	{
		get
		{
			return this._ID;
		}
		set
		{
			if ((this._ID != value))
			{
				this.OnIDChanging(value);
				this.SendPropertyChanging();
				this._ID = value;
				this.SendPropertyChanged("ID");
				this.OnIDChanged();
			}
		}
	}
	
	[Column(Storage="_PackID", DbType="UniqueIdentifier")]
	public System.Nullable<System.Guid> PackID
	{
		get
		{
			return this._PackID;
		}
		set
		{
			if ((this._PackID != value))
			{
				if (this._Pack.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnPackIDChanging(value);
				this.SendPropertyChanging();
				this._PackID = value;
				this.SendPropertyChanged("PackID");
				this.OnPackIDChanged();
			}
		}
	}
	
	[Column(Storage="_OrderID", DbType="Int")]
	public System.Nullable<int> OrderID
	{
		get
		{
			return this._OrderID;
		}
		set
		{
			if ((this._OrderID != value))
			{
				if (this._Order.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnOrderIDChanging(value);
				this.SendPropertyChanging();
				this._OrderID = value;
				this.SendPropertyChanged("OrderID");
				this.OnOrderIDChanged();
			}
		}
	}
	
	[Association(Name="Pack_PackOrder", Storage="_Pack", ThisKey="PackID", OtherKey="ID", IsForeignKey=true)]
	public Pack Pack
	{
		get
		{
			return this._Pack.Entity;
		}
		set
		{
			Pack previousValue = this._Pack.Entity;
			if (((previousValue != value) 
						|| (this._Pack.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Pack.Entity = null;
					previousValue.PackOrders.Remove(this);
				}
				this._Pack.Entity = value;
				if ((value != null))
				{
					value.PackOrders.Add(this);
					this._PackID = value.ID;
				}
				else
				{
					this._PackID = default(Nullable<System.Guid>);
				}
				this.SendPropertyChanged("Pack");
			}
		}
	}
	
	[Association(Name="Order_PackOrder", Storage="_Order", ThisKey="OrderID", OtherKey="ID", IsForeignKey=true)]
	public Order Order
	{
		get
		{
			return this._Order.Entity;
		}
		set
		{
			Order previousValue = this._Order.Entity;
			if (((previousValue != value) 
						|| (this._Order.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Order.Entity = null;
					previousValue.PackOrders.Remove(this);
				}
				this._Order.Entity = value;
				if ((value != null))
				{
					value.PackOrders.Add(this);
					this._OrderID = value.ID;
				}
				else
				{
					this._OrderID = default(Nullable<int>);
				}
				this.SendPropertyChanged("Order");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}

[Table(Name="dbo.[Order]")]
public partial class Order : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _ID;
	
	private string _Name;
	
	private System.Nullable<int> _OrgID;
	
	private System.Nullable<System.Guid> _PeopleID;
	
	private string _Note;
	
	private string _Actor;
	
	private System.Nullable<System.DateTime> _Date;
	
	private Order.TypeX _Type;
	
	private Order.StatusX _Status;
	
	private string _Dept;
	
	private string _Room;
	
	private string _Bed;
	
	private EntitySet<PackOrder> _PackOrders;
	
	private EntityRef<Org> _Org;
	
	private EntityRef<People> _People;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnOrgIDChanging(System.Nullable<int> value);
    partial void OnOrgIDChanged();
    partial void OnPeopleIDChanging(System.Nullable<System.Guid> value);
    partial void OnPeopleIDChanged();
    partial void OnNoteChanging(string value);
    partial void OnNoteChanged();
    partial void OnActorChanging(string value);
    partial void OnActorChanged();
    partial void OnDateChanging(System.Nullable<System.DateTime> value);
    partial void OnDateChanged();
    partial void OnTypeChanging(Order.TypeX value);
    partial void OnTypeChanged();
    partial void OnStatusChanging(Order.StatusX value);
    partial void OnStatusChanged();
    partial void OnDeptChanging(string value);
    partial void OnDeptChanged();
    partial void OnRoomChanging(string value);
    partial void OnRoomChanged();
    partial void OnBedChanging(string value);
    partial void OnBedChanged();
    #endregion
	
	public Order()
	{
		this._PackOrders = new EntitySet<PackOrder>(new Action<PackOrder>(this.attach_PackOrders), new Action<PackOrder>(this.detach_PackOrders));
		this._Org = default(EntityRef<Org>);
		this._People = default(EntityRef<People>);
		OnCreated();
	}
	
	[Column(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int ID
	{
		get
		{
			return this._ID;
		}
		set
		{
			if ((this._ID != value))
			{
				this.OnIDChanging(value);
				this.SendPropertyChanging();
				this._ID = value;
				this.SendPropertyChanged("ID");
				this.OnIDChanged();
			}
		}
	}
	
	[Column(Storage="_Name", DbType="NVarChar(MAX)")]
	public string Name
	{
		get
		{
			return this._Name;
		}
		set
		{
			if ((this._Name != value))
			{
				this.OnNameChanging(value);
				this.SendPropertyChanging();
				this._Name = value;
				this.SendPropertyChanged("Name");
				this.OnNameChanged();
			}
		}
	}
	
	[Column(Storage="_OrgID", DbType="Int")]
	public System.Nullable<int> OrgID
	{
		get
		{
			return this._OrgID;
		}
		set
		{
			if ((this._OrgID != value))
			{
				if (this._Org.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnOrgIDChanging(value);
				this.SendPropertyChanging();
				this._OrgID = value;
				this.SendPropertyChanged("OrgID");
				this.OnOrgIDChanged();
			}
		}
	}
	
	[Column(Storage="_PeopleID", DbType="UniqueIdentifier")]
	public System.Nullable<System.Guid> PeopleID
	{
		get
		{
			return this._PeopleID;
		}
		set
		{
			if ((this._PeopleID != value))
			{
				if (this._People.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnPeopleIDChanging(value);
				this.SendPropertyChanging();
				this._PeopleID = value;
				this.SendPropertyChanged("PeopleID");
				this.OnPeopleIDChanged();
			}
		}
	}
	
	[Column(Storage="_Note", DbType="NVarChar(MAX)")]
	public string Note
	{
		get
		{
			return this._Note;
		}
		set
		{
			if ((this._Note != value))
			{
				this.OnNoteChanging(value);
				this.SendPropertyChanging();
				this._Note = value;
				this.SendPropertyChanged("Note");
				this.OnNoteChanged();
			}
		}
	}
	
	[Column(Storage="_Actor", DbType="NVarChar(MAX)")]
	public string Actor
	{
		get
		{
			return this._Actor;
		}
		set
		{
			if ((this._Actor != value))
			{
				this.OnActorChanging(value);
				this.SendPropertyChanging();
				this._Actor = value;
				this.SendPropertyChanged("Actor");
				this.OnActorChanged();
			}
		}
	}
	
	[Column(Storage="_Date", DbType="DateTime")]
	public System.Nullable<System.DateTime> Date
	{
		get
		{
			return this._Date;
		}
		set
		{
			if ((this._Date != value))
			{
				this.OnDateChanging(value);
				this.SendPropertyChanging();
				this._Date = value;
				this.SendPropertyChanged("Date");
				this.OnDateChanged();
			}
		}
	}
	
	[Column(Storage="_Type", DbType="Int", CanBeNull=true)]
	public Order.TypeX Type
	{
		get
		{
			return this._Type;
		}
		set
		{
			if ((this._Type != value))
			{
				this.OnTypeChanging(value);
				this.SendPropertyChanging();
				this._Type = value;
				this.SendPropertyChanged("Type");
				this.OnTypeChanged();
			}
		}
	}
	
	[Column(Storage="_Status", DbType="Int", CanBeNull=true)]
	public Order.StatusX Status
	{
		get
		{
			return this._Status;
		}
		set
		{
			if ((this._Status != value))
			{
				this.OnStatusChanging(value);
				this.SendPropertyChanging();
				this._Status = value;
				this.SendPropertyChanged("Status");
				this.OnStatusChanged();
			}
		}
	}
	
	[Column(Storage="_Dept", DbType="NVarChar(MAX)")]
	public string Dept
	{
		get
		{
			return this._Dept;
		}
		set
		{
			if ((this._Dept != value))
			{
				this.OnDeptChanging(value);
				this.SendPropertyChanging();
				this._Dept = value;
				this.SendPropertyChanged("Dept");
				this.OnDeptChanged();
			}
		}
	}
	
	[Column(Storage="_Room", DbType="NVarChar(MAX)")]
	public string Room
	{
		get
		{
			return this._Room;
		}
		set
		{
			if ((this._Room != value))
			{
				this.OnRoomChanging(value);
				this.SendPropertyChanging();
				this._Room = value;
				this.SendPropertyChanged("Room");
				this.OnRoomChanged();
			}
		}
	}
	
	[Column(Storage="_Bed", DbType="NVarChar(MAX)")]
	public string Bed
	{
		get
		{
			return this._Bed;
		}
		set
		{
			if ((this._Bed != value))
			{
				this.OnBedChanging(value);
				this.SendPropertyChanging();
				this._Bed = value;
				this.SendPropertyChanged("Bed");
				this.OnBedChanged();
			}
		}
	}
	
	[Association(Name="Order_PackOrder", Storage="_PackOrders", ThisKey="ID", OtherKey="OrderID")]
	public EntitySet<PackOrder> PackOrders
	{
		get
		{
			return this._PackOrders;
		}
		set
		{
			this._PackOrders.Assign(value);
		}
	}
	
	[Association(Name="Org_Order", Storage="_Org", ThisKey="OrgID", OtherKey="ID", IsForeignKey=true)]
	public Org Org
	{
		get
		{
			return this._Org.Entity;
		}
		set
		{
			Org previousValue = this._Org.Entity;
			if (((previousValue != value) 
						|| (this._Org.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Org.Entity = null;
					previousValue.Orders.Remove(this);
				}
				this._Org.Entity = value;
				if ((value != null))
				{
					value.Orders.Add(this);
					this._OrgID = value.ID;
				}
				else
				{
					this._OrgID = default(Nullable<int>);
				}
				this.SendPropertyChanged("Org");
			}
		}
	}
	
	[Association(Name="People_Order", Storage="_People", ThisKey="PeopleID", OtherKey="ID", IsForeignKey=true)]
	public People People
	{
		get
		{
			return this._People.Entity;
		}
		set
		{
			People previousValue = this._People.Entity;
			if (((previousValue != value) 
						|| (this._People.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._People.Entity = null;
					previousValue.Orders.Remove(this);
				}
				this._People.Entity = value;
				if ((value != null))
				{
					value.Orders.Add(this);
					this._PeopleID = value.ID;
				}
				else
				{
					this._PeopleID = default(Nullable<System.Guid>);
				}
				this.SendPropertyChanged("People");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_PackOrders(PackOrder entity)
	{
		this.SendPropertyChanging();
		entity.Order = this;
	}
	
	private void detach_PackOrders(PackOrder entity)
	{
		this.SendPropertyChanging();
		entity.Order = null;
	}
}

[Table(Name="dbo.PackExtract")]
public partial class PackExtract : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _ID;
	
	private System.Nullable<System.Guid> _SourcePackID;
	
	private System.Nullable<System.Guid> _ExtractPackID;
	
	private string _Note;
	
	private EntityRef<Pack> _SourcePack;
	
	private EntityRef<Pack> _ExtractPack;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnSourcePackIDChanging(System.Nullable<System.Guid> value);
    partial void OnSourcePackIDChanged();
    partial void OnExtractPackIDChanging(System.Nullable<System.Guid> value);
    partial void OnExtractPackIDChanged();
    partial void OnNoteChanging(string value);
    partial void OnNoteChanged();
    #endregion
	
	public PackExtract()
	{
		this._SourcePack = default(EntityRef<Pack>);
		this._ExtractPack = default(EntityRef<Pack>);
		OnCreated();
	}
	
	[Column(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int ID
	{
		get
		{
			return this._ID;
		}
		set
		{
			if ((this._ID != value))
			{
				this.OnIDChanging(value);
				this.SendPropertyChanging();
				this._ID = value;
				this.SendPropertyChanged("ID");
				this.OnIDChanged();
			}
		}
	}
	
	[Column(Storage="_SourcePackID", DbType="UniqueIdentifier")]
	public System.Nullable<System.Guid> SourcePackID
	{
		get
		{
			return this._SourcePackID;
		}
		set
		{
			if ((this._SourcePackID != value))
			{
				if (this._SourcePack.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnSourcePackIDChanging(value);
				this.SendPropertyChanging();
				this._SourcePackID = value;
				this.SendPropertyChanged("SourcePackID");
				this.OnSourcePackIDChanged();
			}
		}
	}
	
	[Column(Storage="_ExtractPackID", DbType="UniqueIdentifier")]
	public System.Nullable<System.Guid> ExtractPackID
	{
		get
		{
			return this._ExtractPackID;
		}
		set
		{
			if ((this._ExtractPackID != value))
			{
				if (this._ExtractPack.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnExtractPackIDChanging(value);
				this.SendPropertyChanging();
				this._ExtractPackID = value;
				this.SendPropertyChanged("ExtractPackID");
				this.OnExtractPackIDChanged();
			}
		}
	}
	
	[Column(Storage="_Note", DbType="NVarChar(MAX)")]
	public string Note
	{
		get
		{
			return this._Note;
		}
		set
		{
			if ((this._Note != value))
			{
				this.OnNoteChanging(value);
				this.SendPropertyChanging();
				this._Note = value;
				this.SendPropertyChanged("Note");
				this.OnNoteChanged();
			}
		}
	}
	
	[Association(Name="Pack_PackExtract", Storage="_SourcePack", ThisKey="SourcePackID", OtherKey="ID", IsForeignKey=true)]
	public Pack SourcePack
	{
		get
		{
			return this._SourcePack.Entity;
		}
		set
		{
			Pack previousValue = this._SourcePack.Entity;
			if (((previousValue != value) 
						|| (this._SourcePack.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._SourcePack.Entity = null;
					previousValue.PackExtractsBySource.Remove(this);
				}
				this._SourcePack.Entity = value;
				if ((value != null))
				{
					value.PackExtractsBySource.Add(this);
					this._SourcePackID = value.ID;
				}
				else
				{
					this._SourcePackID = default(Nullable<System.Guid>);
				}
				this.SendPropertyChanged("SourcePack");
			}
		}
	}
	
	[Association(Name="Pack_PackExtract1", Storage="_ExtractPack", ThisKey="ExtractPackID", OtherKey="ID", IsForeignKey=true)]
	public Pack ExtractPack
	{
		get
		{
			return this._ExtractPack.Entity;
		}
		set
		{
			Pack previousValue = this._ExtractPack.Entity;
			if (((previousValue != value) 
						|| (this._ExtractPack.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._ExtractPack.Entity = null;
					previousValue.PackExtractsByExtract.Remove(this);
				}
				this._ExtractPack.Entity = value;
				if ((value != null))
				{
					value.PackExtractsByExtract.Add(this);
					this._ExtractPackID = value.ID;
				}
				else
				{
					this._ExtractPackID = default(Nullable<System.Guid>);
				}
				this.SendPropertyChanged("ExtractPack");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}
#pragma warning restore 1591
